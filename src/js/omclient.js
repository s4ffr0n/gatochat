require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (Buffer){
var proto = require("./ldproto");
var connection = require('./connection');
var ourcrypto = require('./crypto');

var LongdanMessageProcessor = require('./client/longdanMessageProcessor');
var LongdanMessageConsumer = require('./client/longdanMessageConsumer');

var AuthUtils = require('./client/ClientAuthUtils');
var BlobUtils = require('./client/ClientBlobUtils');
var FeedUtils = require('./client/ClientFeedUtils');
var IdentityUtils = require('./client/ClientIdentityUtils');
var MessagingUtils = require('./client/ClientMessagingUtils');
var OmStore = require('./client/OmStore-loki');
var OmEvent = require('./client/OmEvent');


var crypto = require('crypto');
var http = require('http');
var https = require('https');
var url = require('url');

if (typeof localStorage === "undefined" || localStorage === null) {
    var LocalStorage = require('node-localstorage').LocalStorage;
    localStorage = new LocalStorage('./scratch-localstorage');
}


var TEST_KEYS = new proto.LDPublicKeys({
	"ClusterEndpoints": {
		"ONE": ["http://us.omlet.me"],
		"TWO": ["http://sg.omlet.me"],
		"THREE": ["http://cn.omlet.me:8329"],
		"FOUR": ["http://de.omlet.me"],
		"yeouiju": ["http://0.omlet.me:3822"]
	},
	"ClusterKeys": {
		"ONE": "xkkzyNJmZ1DmNPxGwrykZ2O91f10KNXQvspa15nKKGs=",
		"TWO": "XaG4I7b7wDOZ+lGHSPwbJ2HLkIFf0UGYAWz9c9LkiQk=",
		"THREE": "hj/8xrbYZvZkeOjoN9ndTj+2HAICPXDfK3D/Tfl2nDY=",
		"FOUR": "xMRCvh1eki9JEceBcV7Bx49uaQYpX8FdD0eZ+LCGqCc=",
		"yeouiju": "YFmj7ucCh8lQZGSwtuMPAqLjcT9dkVclxB01IgXu6Hk="
	},
	"DefaultCluster": "ONE",
	"IdpEndpoints": ["http://idp.omlet.me"],
	"IdpKey": "MIOC9PS8KIwXOXSHtplBZLSpIqcifns0jzExtkHXw1g="
});
/*
var TEST_KEYS = new proto.LDPublicKeys({
    "ClusterEndpoints": { "ONE": ["http://127.0.0.1:3829"] },
    "ClusterKeys": { "ONE": "80Qd+N2ml/Iahcd5kFfzLdT+3Kel7wS/2AwCybtGblA=" },
    "DefaultCluster": "ONE",
    "IdpEndpoints": ["http://127.0.0.1:4001"],
    "IdpKey": "A2kW+bIHpCz0Xv2t7SVGPDjqXQbHPsBkFNtIhR3ruzk="
});
*/
function Client(configuration) {
    this._enabled = false;
    this._keys = TEST_KEYS;
    this._instance = "";
    if (configuration) {
        if (configuration.keys)
            this._keys = configuration.keys;
        if (configuration.instance)
            this._instance = configuration.instance;
        if (configuration.apiKey) {
            this._apiKey = configuration.apiKey;
        }
    }

    this._keyItem = this._instance + ":" + this._keys.IdpKey.toString("hex") + ":" + this._keys.IdpEndpoints[0] + ":key";
    this._detailsItem = this._instance + ":" + this._keys.IdpKey.toString("hex") + ":" + this._keys.IdpEndpoints[0] + ":details";

    if (configuration && configuration.reset)
        this.erasePrivateKey();

    this._privateKey = localStorage.getItem(this._keyItem);
    if (this._privateKey) {
        this._privateKey = new Buffer(this._privateKey, "base64");
    } else {
        console.log("generating new private key");
        this._privateKey = ourcrypto.createPrivateKey();
        var serialized = this._privateKey.toString("base64");
        localStorage.setItem(this._keyItem, serialized);
    }
    this.publicKey = ourcrypto.generatePublicKey(this._privateKey);

    this._details = localStorage.getItem(this._detailsItem);
    if (this._details) {
        this._details = new proto.LDAccountDetails(JSON.parse(this._details));
        this.account = this._details.Account;
    }

    this._idp = new connection.Connection(connection.IDP_CLUSTER, "/device", this._keys, this._privateKey, this._apiKey);
    this._idp.onInterrupted = this._onInterrupted.bind(this);
    if (this._details && this._details.Account)
        this._msg = new connection.Connection(this._details.Cluster, "/device", this._keys, this._privateKey, this._apiKey);
    else
        this._msg = new connection.Connection(undefined, undefined, this._keys, this._privateKey, this._apiKey);
    this._msg.onInterrupted = this._onInterrupted.bind(this);
    this._msg.debug = false;
    this._msg.onDeviceInvalid = this._onDeviceInvalid.bind(this);

    this.longdanMessageConsumer = new LongdanMessageConsumer(this);
    this.longdanMessageProcessor = new LongdanMessageProcessor(this);

    this.auth = new AuthUtils(this);
    this.blob = new BlobUtils(this);
    this.feed = new FeedUtils(this);
    this.identity = new IdentityUtils(this);
    this.messaging = new MessagingUtils(this);
    this.store = new OmStore(this);
    this.events = new OmEvent(this);
}

Client.prototype.onInterrupted = null; // function(cause)
Client.prototype.account = null;
Client.prototype.onSignedUp = null;
Client.prototype.onDeviceInvalid = null;

Client.prototype.erasePrivateKey = function() {
    localStorage.removeItem(this._keyItem);
    localStorage.removeItem(this._detailsItem);
}

Client.prototype._saveDetails = function(details) {
    this._details = details;
    localStorage.setItem(this._detailsItem, JSON.stringify(details.encode()));
    var myAccount = details.Account;
    this.account = myAccount;
    this.store.getAccounts(function(accountsDb) {
        accountsDb.getOrCreateObject(myAccount, function(account) {
            if (!account.owned) {
                account.owned = true;
                accountsDb.update(account);
            }
        }.bind(this));
    }.bind(this));
}
Client.prototype._createMsg = function () {
    this._msg.onInterrupted = this._onInterrupted.bind(this);
}
Client.prototype._onInterrupted = function (cause) {
    if (this.onInterrupted)
        this.onInterrupted(cause);
}
Client.prototype._onDeviceInvalid = function () {
    this.erasePrivateKey();
    this.disable();
    if (this.onDeviceInvalid)
        this.onDeviceInvalid();
}
Client.prototype.isRegistered = function() {
    return this._details && this._details.Account;
}

Client.prototype.idpCall = function(req, callback) {
    return this._idp.call(req, callback);
}
Client.prototype.msgCall = function (req, callback) {
    return this._msg.call(req, callback);
}

Client.prototype.signin = function(code, queryKey){
    var req = new proto.LDConfirmAuthCodeRequest();
	req.AuthCode = code;
	req.QueryKey = queryKey;

	this.idpCall(req, function(e, resp){
		if(e) {
			console.log('error:' + e);
		} else {
            this._saveDetails(resp.AccountDetails);
            this._msg._setCluster(this._details.Cluster, "/device");
            this._idp.onInterrupted = null;
            this._idp.disable();
            this._msg.enable();
            if (this.onSignedUp)
                this.onSignedUp();
		}
	}.bind(this));
}

Client.prototype._waitForSignin = function()
{
    this._signinTimer = setTimeout(this._pollSignin.bind(this), 0);
}

Client.prototype._pollSignin = function() {
    this._signinTimer = undefined;
    this._idp.call(new proto.LDCheckIdentityLinkedRequest(), this._polledSignin.bind(this));

}
Client.prototype._polledSignin = function (err, resp, req) {
    if (!this._enabled)
        return;
    if (!err && resp.AccountDetails != null) {
        this._saveDetails(resp.AccountDetails);
        this._msg._setCluster(this._details.Cluster, "/device");
        this._idp.onInterrupted = null;
        this._idp.disable();
        this._msg.enable();
        if (this.onSignedUp)
            this.onSignedUp();
    } else {
        this._signinTimer = setTimeout(this._pollSignin.bind(this), 3000); //TODO: better/push
    }
}
Client.prototype._cancelWaitForSignin = function () {
    if (this._signinTimer) {
        clearTimeout(this._signinTimer);
        this._signinTimer = undefined;
    }
}

Client.prototype.enable = function() {
    if (this._enabled)
        return;
    this._enabled = true;
    this.longdanMessageConsumer.start();
    if (this.account) {
        this._msg.enable();
    } else {
        this._idp.enable();
        this._waitForSignin();
    }
}
Client.prototype.disable = function () {
    if (!this._enabled)
        return;
    this._enabled = false;
    if (this.account) {
        this._msg.disable();
    } else {
        this._cancelWaitForSignin();
        this._idp.disable();
    }
}

// DEPRECATED, see client.blob
Client.prototype.uploadBlob = function(data, mime, cb) {
    var req = new proto.LDGetUploadTicketRequest();
    req.Account = this.account;
    req.Metadata = new proto.LDBlobMetadata();
    req.Metadata.MimeType = mime;
    req.Metadata.Size = data.length;

    var md5 = crypto.createHash('md5');
    md5.update(data);
    req.Metadata.Hash = md5.digest("base64");

    this.msgCall(req, this._gotUploadTicket.bind(this, data, cb));

}

// DEPRECATED, see client.blob
Client.prototype._gotUploadTicket = function (data, cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }
    var ticket = resp.BlobUploadTicket;

    if (ticket.AlreadyUploaded) {
        cb(undefined, ticket.BlobLinkString);
        return;
    }

    var p = url.parse(ticket.UploadUrl);
    var options = {
        hostname: p.hostname,
        port: p.port,
        path: p.path,
        method: 'PUT',
        headers: ticket.UploadHeaders,
        withCredentials: false,
        responseType: 'arraybuffer'
    };
    if (!options.port) options.port = p.protocol == "https:" ? 443 : 80;
    options.headers['Content-Length'] = data.length;

    var invoker = p.protocol == "https:" ? https : http;
    var req = invoker.request(options, this._gotUploadResponse.bind(this, ticket, cb));
    req.on('error', function (e) { cb(e); });
    req.end(data);
}

// DEPRECATED, see client.blob
Client.prototype._gotUploadResponse = function (uploadTicket, cb, resp) {
    if (resp.statusCode != 200) {
        cb(resp.statusCode);
        return;
    }
    var req = new proto.LDVerifyUploadCompletedRequest();
    req.BlobUploadTicket = uploadTicket;
    this.msgCall(req, this._gotBlobLinkString.bind(this, cb));

}

// DEPRECATED, see client.blob
Client.prototype._gotBlobLinkString = function (cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }
    cb(undefined, resp);
}

// DEPRECATED, see client.blob
Client.prototype.getDownloadLink = function(blobLinkString, cb) {
    var req = new proto.LDGetDownloadTicketRequest();
    req.BlobLinkString = blobLinkString;

    this.msgCall(req, this._gotDownloadTicket.bind(this, cb));
}

// DEPRECATED, see client.blob
Client.prototype._gotDownloadTicket = function (cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }
	if(resp.BlobDownloadTicket.Headers) {
		this._doDownload(this._gotDownload.bind(this, cb), undefined, resp);
	} else {
		cb(undefined, resp.BlobDownloadTicket.Url);
	}
}

// DEPRECATED, see client.blob
Client.prototype._gotDownload = function (cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }
	var uri = "data:application/octet-stream;base64," + resp.toString('base64');
    cb(undefined, uri);
}

// DEPRECATED, see client.blob
Client.prototype.download = function(blobLinkString, cb) {
    var req = new proto.LDGetDownloadTicketRequest();
    req.BlobLinkString = blobLinkString;

    this.msgCall(req, this._doDownload.bind(this, cb));
}

// DEPRECATED, see client.blob
Client.prototype._doDownload = function(cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }

    var p = url.parse(resp.BlobDownloadTicket.Url);
    var options = {
        hostname: p.hostname,
        port: p.port,
        path: p.path,
        headers: resp.BlobDownloadTicket.Headers,
        method: 'GET',
        withCredentials: false,
        responseType: 'arraybuffer'
    };

    if (!options.port) options.port = p.protocol == "https:" ? 443 : 80;
    var invoker = p.protocol == "https:" ? https : http;
    var req = invoker.request(options, this._gotDownloadResponse.bind(this, cb));
    req.on('error', function (e) { cb(e); });
    req.end();
}

// DEPRECATED, see client.blob
Client.prototype._gotDownloadResponse = function (cb, resp) {
    if (resp.statusCode != 200) {
        cb(resp.statusCode ? resp.statusCode : "BrowserBlocked");
        return;
    }
    var bufs = [];
    resp.on('data', function(d) {
        if (d.constructor == Uint8Array)
            d = new Buffer(d);
        bufs.push(d);
    });
    resp.on('end', function() {
        cb(undefined, Buffer.concat(bufs));
    });
}

//for test
// DEPRECATED, please use this.auth.connectEmail
Client.prototype.emailSignin = function (address) {
    var identity = new proto.LDIdentity();
    identity.Principal = address;
    identity.Type = proto.LDIdentityType.Email;

    var register = new proto.LDRegisterWithTokenRequest();
    register.Identity = identity;
    register.Locale = "en_US";

    this.idpCall(register, function() {});
}

//for test
// DEPRECATED, please use this.auth.connectPhone
Client.prototype.phoneSignin = function (phone) {
    var identity = new proto.LDIdentity();
    identity.Principal = phone;
    identity.Type = proto.LDIdentityType.Phone;

    var register = new proto.LDRegisterWithTokenRequest();
    register.Identity = identity;
    register.Locale = "en_US";

    this.idpCall(register, function() {});
}

module.exports = {
	DefaultConfiguration:TEST_KEYS,
    Client: Client,
    localStorage: localStorage,
    Connection: connection.Connection,
    PermanentFailure: connection.PermanentFailure,
    TemporaryFailure: connection.TemporaryFailure
};
Object.freeze(module.exports);

}).call(this,require("buffer").Buffer)
},{"./client/ClientAuthUtils":2,"./client/ClientBlobUtils":3,"./client/ClientFeedUtils":4,"./client/ClientIdentityUtils":5,"./client/ClientMessagingUtils":6,"./client/OmEvent":7,"./client/OmStore-loki":8,"./client/longdanMessageConsumer":9,"./client/longdanMessageProcessor":10,"./connection":20,"./crypto":21,"./ldproto":22,"buffer":26,"crypto":30,"http":168,"https":172,"node-localstorage":200,"url":194}],2:[function(require,module,exports){
var proto = require("../ldproto");

function AuthUtils(client) {
	this._client = client;
}

AuthUtils.prototype.connectIdentity = function(identity) {
	var req = new proto.LDRegisterWithTokenRequest();
	req.Identity = identity;
	this._client.idpCall(req, function(e, resp) {
	});
}

AuthUtils.prototype.connectEmail = function(email) {
  var identity = new proto.LDIdentity();
  identity.Type = proto.LDIdentityType.Email;
  identity.Principal = email;
  this.connectIdentity(identity);
}

AuthUtils.prototype.connectPhone = function(phone) {
  var identity = new proto.LDIdentity();
  identity.Type = proto.LDIdentityType.Phone;
  identity.Principal = email;
  this.connectIdentity(phone);
}

AuthUtils.prototype.confirmPinForIdentity = function(ldIdentity, pin, callback) {
	var req = new proto.LDConfirmTokenRequest();
	req.Identity = ldIdentity;
	req.Token = pin;
    this._client.idpCall(req, callback);
}

module.exports = AuthUtils;
},{"../ldproto":22}],3:[function(require,module,exports){
(function (Buffer){
var proto = require("../ldproto");
var crypto = require('crypto');
var http = require('http');
var https = require('https');
var url = require('url');

function BlobUtils(client) {
	this._client = client;
}

BlobUtils.prototype.ensureBlobSource = function(hash, source, timestamp, feed, callback) {
    this._client.store.getBlobs(function(blobsDb) {
        blobsDb.getOrCreateObject(hash, function(blob) {
            for (var i = 0; i < blob.sources.length; i++) {
                if (blob.sources[i] == source) {
                    if (callback) {
                        callback.call();
                    }
                    return;
                }
            }

            blob.sources.push(source)
            blobsDb.update(blob, callback);

        }.bind(this));
    }.bind(this));

    return hash;
}

BlobUtils.prototype.hashFromLongdanUrl = function(url) {
    var parser = document.createElement('a');
    parser.href = url;
    if (parser.protocol == "hosted:") {
        var encoded = url.split("#").pop();
        var hash = new Buffer(encoded, "base64").toString("hex");
        return hash;
    }

    if (parser.protocol == "longdan:") {
        var path = parser.pathname.substring(1);
        var encoded = path.split("/").pop();
        var hash = new Buffer(encoded, "base64").toString("hex");
        return hash;
    }

    return null;
}

BlobUtils.prototype.uploadBlob = function(data, mime, cb) {
    var req = new proto.LDGetUploadTicketRequest();
    req.Account = this._client.account;
    req.Metadata = new proto.LDBlobMetadata();
    req.Metadata.MimeType = mime;
    req.Metadata.Size = data.length;
    
    var md5 = crypto.createHash('md5');
    md5.update(data);
    req.Metadata.Hash = md5.digest("base64");
    
    this._client.msgCall(req, this._gotUploadTicket.bind(this, data, cb));
}

BlobUtils.prototype._blobHashUrlMap = {};

BlobUtils.prototype.getDownloadLinkForHash = function(hash, cb) {
    if (hash in this._blobHashUrlMap) {
        cb(undefined, this._blobHashUrlMap[hash]);
        return;
    }

    // Look up the blob as a 'low priority even', in case a blob+hash
    // has been scheduled for writing but is not yet available.
    setTimeout(function() {
        this._client.store.getBlobs(function(blobsDb) {
            blobsDb.getObjectByKey(hash, function(err, blob) {
                if (!blob) {
                    cb("Blob not found");
                    return;
                }
                var req = new proto.LDGetDownloadTicketRequest();
                req.BlobLinkString = blob.sources[0];
                        
                this._client.msgCall(req, this._gotDownloadTicket.bind(this, function(err, url) {
                    if (url) {
                        this._blobHashUrlMap[hash] = url;
                    }
                    cb(err, url);
                }.bind(this)));
            }.bind(this));
        }.bind(this));
    }.bind(this, 0));
}

BlobUtils.prototype.getDownloadLinkForBrl = function(blobLinkString, cb) {
    var req = new proto.LDGetDownloadTicketRequest();
    req.BlobLinkString = blobLinkString;
	        
    this._client.msgCall(req, this._gotDownloadTicket.bind(this, cb));
}

BlobUtils.prototype._gotUploadTicket = function (data, cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }
    var ticket = resp.BlobUploadTicket;
    
    if (ticket.AlreadyUploaded) {
        cb(undefined, ticket.BlobLinkString);
        return;
    }
    
    var p = url.parse(ticket.UploadUrl);
    var options = {
        hostname: p.hostname,
        port: p.port,
        path: p.path,
        method: 'PUT',
        headers: ticket.UploadHeaders,
        withCredentials: false,
        responseType: 'arraybuffer'
    };
    if (!options.port) options.port = p.protocol == "https:" ? 443 : 80;
    options.headers['Content-Length'] = data.length;
    
    var invoker = p.protocol == "https:" ? https : http;
    var req = invoker.request(options, this._gotUploadResponse.bind(this, ticket, cb));
    req.on('error', function (e) { cb(e); });
    req.end(data);
}

BlobUtils.prototype._gotUploadResponse = function (uploadTicket, cb, resp) {
    if (resp.statusCode != 200) {
        cb(resp.statusCode);
        return;
    }
    var req = new proto.LDVerifyUploadCompletedRequest();
    req.BlobUploadTicket = uploadTicket;
    this._client.msgCall(req, this._gotBlobLinkString.bind(this, cb));

}

BlobUtils.prototype._gotBlobLinkString = function (cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }
    cb(undefined, resp);
}

BlobUtils.prototype._gotDownloadTicket = function (cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }
	if(resp.BlobDownloadTicket.Headers) {
		this._doDownload(this._gotDownload.bind(this, cb), undefined, resp);
	} else {
		cb(undefined, resp.BlobDownloadTicket.Url);
	}
}

BlobUtils.prototype._gotDownload = function (cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }
	var uri = "data:application/octet-stream;base64," + resp.toString('base64');
    cb(undefined, uri);
}

BlobUtils.prototype.download = function(blobLinkString, cb) {
    var req = new proto.LDGetDownloadTicketRequest();
    req.BlobLinkString = blobLinkString;
	        
    this._client.msgCall(req, this._doDownload.bind(this, cb));
}

BlobUtils.prototype._doDownload = function(cb, e, resp) {
    if (e) {
        cb(e);
        return;
    }

    var p = url.parse(resp.BlobDownloadTicket.Url);
    var options = {
        protocol: p.protocol,
        hostname: p.hostname,
        port: p.port,
        path: p.path,
        headers: resp.BlobDownloadTicket.Headers,
        method: 'GET',
        withCredentials: false,
        responseType: 'arraybuffer'
    };
    
    if (!options.port) options.port = p.protocol == "https:" ? 443 : 80;
    var invoker = p.protocol == "https:" ? https : http;
    var req = invoker.request(options, this._gotDownloadResponse.bind(this, cb));
    req.on('error', function (e) { cb(e); });
    req.end();
}

BlobUtils.prototype.downloadUrl = function(link, cb) {
    var p = url.parse(link);
    var options = {
        protocol: p.protocol,
        hostname: p.hostname,
        port: p.port,
        path: p.path,
        method: 'GET',
        withCredentials: false,
        responseType: 'arraybuffer'
    };

    var invoker = p.protocol == "https:" ? https : http;
    var _responded = false;
    var req = invoker.request(options, function(resp) {
        if (resp.statusCode != 200) {
            if (!_responded) {
                _responded = true;
                cb(resp.statusCode ? resp.statusCode : "BrowserBlocked");
            }
            return;
        } else {
            var bufs = [];
            resp.on('data', function(d) {
                if (d.constructor == Uint8Array)
                    d = new Buffer(d);
                bufs.push(d);
            });
            resp.on('end', function() {
                if (!_responded) {
                    _responded = true;
                    cb(undefined, Buffer.concat(bufs));
                }
            });
        }
    }.bind(this));
    req.on('error', function (e) { 
        if (!_responded) {
            _responded = true;
            cb(e); 
        }
    });
    req.end();
}

BlobUtils.prototype._gotDownloadResponse = function (cb, resp) {
    var _responded = false;
    if (resp.statusCode != 200) {
        if (!_responded) {
            _responded = true;
            cb(resp.statusCode ? resp.statusCode : "BrowserBlocked");
        }
        return;
    }
    var bufs = [];
    resp.on('data', function(d) {
        if (d.constructor == Uint8Array)
            d = new Buffer(d);
        bufs.push(d);
    });
    resp.on('end', function() {
        if (!_responded) {
            _responded = true;
            cb(undefined, Buffer.concat(bufs));
        }
    });
}

BlobUtils.prototype.resizeImage = function(buf, sizes, cb) {
        var uri = "data:image/png;base64," + buf.toString('base64');
        var img = document.createElement('img');
        img.onerror = function(e) { cb("failed"); }
        img.onload = function() {
            var sized = [];
            for(var i = 0; i < sizes.length; ++i) {
                var edge = sizes[i];
                var scale = edge / Math.max(img.width, img.height);
                scale = Math.min(1.0, scale);
                var canvas = document.createElement('canvas'),
                ctx = canvas.getContext('2d');
                canvas.width = scale * img.width;
                canvas.height = scale * img.height;
                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                var enc = canvas.toDataURL();
                sized.push({
                    data:new om.Buffer(enc.split(",")[1], 'base64'),
                    width:canvas.width,
                    height:canvas.height
                });
            }
            cb(undefined, sized);
        }
        img.src = uri;
    }

module.exports = BlobUtils;
}).call(this,require("buffer").Buffer)
},{"../ldproto":22,"buffer":26,"crypto":30,"http":168,"https":172,"url":194}],4:[function(require,module,exports){
var proto = require("../ldproto");

function FeedUtils(client) {
	this._client = client;
}

FeedUtils.prototype.ensureFeedMember = function(feed, member) {
	var addMember = function(member) {
		var accountId = this._client.store.getObjectId(member);
	   	var feedId = this._client.store.getObjectId(feed);

	   	var needed = true;
	   	for (var i = 0; i < feed.members.length; i++) {
	   		if (feed.members[i] == accountId) {
	   			needed = false;
	   			break;
	   		}
	   	}
	   	if (needed) {
	   		feed.members.push(accountId)
	   		this._client.store.getFeeds(function(feeds) {
	   			feeds.update(feed);
	   		}.bind(this));

			member.feeds.push(feedId);
			this._client.store.getAccounts(function(accounts) {
				accounts.update(member, function(err, member) {
					this.generateFeedName(feedId);
				}.bind(this));
			}.bind(this));
	   	}
	}.bind(this);

	if (typeof(member) == 'string') {
		this._client.store.getAccounts(function(accounts) {
			accounts.getOrCreateObject(member, addMember);
		}.bind(this));
	} else {
		addMember(member);
	}
}

FeedUtils.prototype.generateFeedName = function(feedId) {
	this._client.store.getFeeds(function(feedsDb) {
		feedsDb.getObjectById(feedId, function(err, feed) {
			if (!feed.specifiedName) {
				this._client.store.getAccounts(function(accounts) {
					var members = accounts._data.find({$loki: {$in: feed.members}});
					members = members.filter(function(a) { return !a.owned; })
						.map(function(a) { return !a.name ? "Someone" : a.name; });
					feed.name = members.join(", ");
					feedsDb.update(feed);
				}.bind(this));
			}
		}.bind(this));
	}.bind(this));
}

module.exports = FeedUtils;
},{"../ldproto":22}],5:[function(require,module,exports){
var proto = require("../ldproto");

function IdentityUtils(client) {
	this._client = client;
}

IdentityUtils.prototype.ensureIdentity = function(details) {
	var account = details.account;
	this._client.store.getAccounts(function(accounts) {
   		accounts.getObjectByKey(account, function(err, existing) {
   			if (existing) {
   				if (existing.upToDate) {
					if (existing.profileVersion < details.profileVersion) {
	   					existing.name = details.name;
	   					existing.thumbnail = details.thumbnail;
	   					accounts.update(existing, function(err, existing) {
	   						   this.updateFeedNames(existing);
	   					}.bind(this));
	   				}
   				} else {
   					this.refreshAccountProfile(account);
   				}
   				
   			} else {
   				accounts.getOrCreateObject(account, function(identity) {
   					this.refreshAccountProfile(account);
   				}.bind(this), details);
   			}
   		}.bind(this));
   }.bind(this));
}

IdentityUtils.prototype.refreshAccountProfile = function(account) {
	var req = new proto.LDGetOmletContactProfileRequest();
	req.RequestedAccount = account;
	this._client.msgCall(req, function(err, resp, req) {
		if (err) {
			// TODO: retry
			return;
		}
		
		var profile = resp.ContactProfile;
		this._client.store.getAccounts(function(accountsDb) {
			accountsDb.getOrCreateObject(account, function(identity) {
				var newName = identity.name != profile.Name;
				identity.name = profile.Name;
				identity.profileVersion = profile.Version;
				identity.hasAppTime = profile.HasAppTime;
				identity.upToDate = true;
				accountsDb.update(identity, function(err, identity) {
					if (newName) {
						this.updateFeedNames(identity);
					}
				}.bind(this));
			}.bind(this));
		}.bind(this));
	}.bind(this));
}

IdentityUtils.prototype.updateFeedNames = function(identity) {
	identity.feeds.forEach(function(feedId) {
		this._client.feed.generateFeedName(feedId);
	}.bind(this));
}	

module.exports = IdentityUtils;
},{"../ldproto":22}],6:[function(require,module,exports){
(function (Buffer){
var proto = require("../ldproto");
var ObjTypes = require("./model/ObjTypes");
var crypto = require("crypto");

function MessagingUtils(client) {
	this._client = client;
}

MessagingUtils.prototype._sendObj = function(feed, type, body, callback) {
	if (typeof(feed) == 'string')
		feed = new proto.LDFeed(JSON.parse(feed));

	if (!feed)
		callback("No feed specified");

	var attachments = undefined;
	if (body._attachments !== undefined && body._attachments.length != 0) {
		attachments = body._attachments;
		delete body._attachments;
		this._sendObjAndAttachments(feed, type, body, attachments, callback);
	} else {
		var req = new proto.LDOverwriteMessageRequest();
	    req.Feed = feed;
	    req.AnyMemberWritable = false;
	    req.Body = new Buffer(JSON.stringify(body));
	    req.Id = new proto.LDTypedId();
	    req.Id.Type = type;
	    req.Id.Id = crypto.pseudoRandomBytes(32);
	    req.Version = 0;

		this._client.msgCall(req, function(err, resp, req) {
            // Try to inject message into DB. Not sure if this is a good place
            if(resp){
			    var message = new proto.LDMessage();
			    message.Id = req.Id;
			    message.Body = req.Body;
			    message.Feed = req.Feed;
			    message.Owner = this._client.account;
			    message.Timestamp = resp;
			    message.Version = req.Version;
			    this._client.longdanMessageProcessor.processDurableMessage(message);
            }
			if (typeof(callback) == 'function') {
				callback(err, resp, req);
			}
		}.bind(this));
	}
}

MessagingUtils.prototype._sendObjAndAttachments = function(feed, type, body, attachments, callback) { 
	if (attachments.length == 0) {
		this._sendObj(feed, type, body, callback);
	} else {
		var blob = attachments.shift();
		var bref = {
			Hash: blob.hash,
			Source: blob.source,
			Category: blob.category,
			PushType: blob.pushType
		};
		this._sendObj(feed, ObjTypes.BLOB_REFERENCE, bref, function(err, resp, req) {
			if (err) {
				callback(err);
			} else {
				setTimeout(function() {
					this._sendObjAndAttachments(feed, type, body, attachments, callback);
				}.bind(this), 0);
			}
		}.bind(this));
	}
}

MessagingUtils.prototype._urlToObj = function(url, cb) {
	var req = new proto.LDUrlToStoryRequest();
	req.Url = url;
	this._client.msgCall(req, function(err, resp, req) {
		if (err) {
			cb(err);
		} else {
			if (resp.ResponseType.startsWith("obj/")) {
				var type = resp.ResponseType.substring(4);
				var data = resp.ResponseData.toString("utf8");
				var body = JSON.parse(data);

				if (type == ObjTypes.PICTURE) {
					if ("imageData" in body) {
						var bytes = new Buffer(body.imageData, "base64");
						this._pictureObjFromBytes(bytes, cb);
					} else {
						cb("No image data");
					}
					return;
				}

				if (type == ObjTypes.ANIMATED_GIF) {
					if (body.imageData !== undefined) {
						var bytes = new Buffer(body.imageData, "base64");
						this._animatedGifObjFromBytes(bytes, cb);
					} else if (body.imageUrl !== undefined) {
						this._client.blob.downloadUrl(body.imageUrl, function(e, bytes) {
							if (e) {
								cb(e);
							} else {
								this._animatedGifObjFromBytes(bytes, cb);
							}
						}.bind(this));
					} else {
						cb("No image data");
					}
					return;
				}

				if (type == ObjTypes.RDL || type == ObjTypes.APP) {
					if ("displayThumbnailData" in body) {
						var bytes = new Buffer(body.displayThumbnailData, "base64");

						this._client.blob.resizeImage(bytes, [540], function(err, resized) {
							var img = resized[0];
							var mimeType = "image/jpeg";
							this._client.blob.uploadBlob(img.data, mimeType, function(err, blobLink) {
								if (err) {
									cb(err);
								} else {
									var hashHex = this._client.blob.hashFromLongdanUrl(blobLink);
									var hash = new Buffer(hashHex, "hex").toString("base64");
									delete body.displayThumbnailData;
									body.displayThumbnailHash = hash;
									body.thumbnailWidth = img.width;
									body.thumbnailHeight = img.height;
									body._attachments = [
										{
											hash: hash,
											category: "thumbnails",
											source: blobLink,
											mimeType: mimeType
										}
									];
									cb(undefined, type, body);
								}
							}.bind(this));
						}.bind(this));
					} else {
						cb(false, type, body);
					}
					return;
				}


				cb(false, type, body);
			}
		}
	}.bind(this));
}

MessagingUtils.prototype._imageUrlToObj = function(url, cb) {
	this._client.blob.downloadUrl(url, function(err, bytes) {
		if (err) {
			cb(err);
		} else {
			this._pictureObjFromBytes(bytes, cb);
		}
	}.bind(this));
}

// TODO: It would be better to upload the thumbnail; then
// send the PictureObj + thumbRef; then upload the fullsize + fullRef.
MessagingUtils.prototype._pictureObjFromBytes = function(bytes, cb) {
	var mimeType = "image/jpeg";
	var body = {
		_attachments: []
	};

	this._client.blob.resizeImage(bytes, [540, 1920], function(err, resized) {
		body.fullSizeWidth = resized[1].width;
		body.fullSizeHeight = resized[1].height;
		this._client.blob.uploadBlob(resized[0].data, mimeType, function(err, blobLink) {
			if (err) {
				cb(err);
			} else {
				var hashHex = this._client.blob.hashFromLongdanUrl(blobLink);
				var hash = new Buffer(hashHex, "hex").toString("base64");
				body.thumbnailHash = hash;
				body._attachments.push({
								hash: hash,
								category: "thumbnails",
								source: blobLink,
								pushType: ObjTypes.PICTURE,
								mimeType: mimeType
							});
				this._client.blob.uploadBlob(resized[1].data, mimeType, function(err, blobLink) {
					if (err) {
						cb(err);
					} else {
						var hashHex = this._client.blob.hashFromLongdanUrl(blobLink);
						var hash = new Buffer(hashHex, "hex").toString("base64");
						body.fullSizeHash = hash;
						body._attachments.push({
								hash: hash,
								category: "thumbnails",
								source: blobLink,
								mimeType: mimeType
							});
						cb(undefined, ObjTypes.PICTURE, body);
					}
				}.bind(this));
			}
		}.bind(this));
	}.bind(this));
}

MessagingUtils.prototype._animatedGifObjFromBytes = function(gif, cb) {
	var body = { _attachments: [] };
	this._client.blob.resizeImage(gif, [540], function(err, resized) {
		if (err) {
			cb(err);
			return;
		}

		var thumbnail = resized[0];
		this._client.blob.uploadBlob(thumbnail.data, "image/jpeg", function(err, blobLink) {
			if (err) {
				cb(err);
			} else {
				var hashHex = this._client.blob.hashFromLongdanUrl(blobLink);
				var hash = new Buffer(hashHex, "hex").toString("base64");
				body.thumbnailHash = hash;
				body._attachments.push({
						hash: hash,
						category: "thumbnails",
						source: blobLink,
						mimeType: "imag/jpeg"
					});

				this._client.blob.uploadBlob(gif, "image/gif", function(err, blobLink) {
					if (err) {
						cb(err);
					} else {
						var hashHex = this._client.blob.hashFromLongdanUrl(blobLink);
						var hash = new Buffer(hashHex, "hex").toString("base64");
						body.gifHash = hash;
						body._attachments.push({
							hash: hash,
							source: blobLink,
							mimeType: "image/gif",
							pushType: ObjTypes.ANIMATED_GIF
						});
						cb(undefined, ObjTypes.ANIMATED_GIF, body);
					}
				}.bind(this));
			}
		}.bind(this));
	}.bind(this));
}

module.exports = MessagingUtils;

}).call(this,require("buffer").Buffer)
},{"../ldproto":22,"./model/ObjTypes":12,"buffer":26,"crypto":30}],7:[function(require,module,exports){
var proto = require("../ldproto");

function OmEvent(client) {
	this._client = client;
}

OmEvent.prototype.FEEDS = "feeds";
OmEvent.prototype.ACCOUNTS = "accounts";

OmEvent.prototype._events = {};
OmEvent.prototype._eventKey = 0;
OmEvent.prototype._pendingEvents = {};
OmEvent.prototype._pushReceivers = {};

OmEvent.prototype.register = function(label, fn) {
  if (!(label in this._events)) {
     this._events[label] = {};
  }

  var key = "" + (++(this._eventKey));
  this._events[label][key] = fn;
  var me = this;

  return function() {
    delete this._events[label][key];
  }.bind(this);
}

OmEvent.prototype._notify = function(label) {
  this._pendingEvents[label] = true;
  setTimeout(this._releaseNotifications.bind(this), 0);
}

OmEvent.prototype._releaseNotifications = function() {
  var pending = this._pendingEvents;
  this._pendingEvents = {};
  for (var label in pending) {
    var listeners = this._events[label];
    if (listeners !== undefined) {
      for (var f in listeners) {
        listeners[f](label);
      }
    }
  }
}

OmEvent.prototype.registerMessagePushReceiver = function(fn) {
  var key = "" + (++(this._eventKey));
  this._pushReceivers[key] = fn;
  var me = this;

  return function() {
    delete this._pushReceivers[key];
  }.bind(this);
}

OmEvent.prototype._notifyMessagePushed = function(msg) {
  for (var i in this._pushReceivers) {
    this._pushReceivers[i](msg);
  }
}

module.exports = OmEvent;
},{"../ldproto":22}],8:[function(require,module,exports){
var proto = require("../ldproto");
var loki = require("lokijs");

function OmStore(client) {
	this._client = client;

	this._messages = {};
	this._members = {};
}

OmStore.prototype.getObjectId = function(object) {
	return object['$loki'];
}

OmStore.prototype.getFeeds = function(cb) {
	if (!this._feeds) {
		this._feeds = new OmTable(this._client, "feeds", "identifier");
		this._feeds._defaultObject = function() {
			return {
				name: "",
				members: [],
				specifiedName: null,
				specifiedThumbnailHash: null,
				renderableTime: 0
			}
		};
	}
	cb(this._feeds)
}

OmStore.prototype.getAccounts = function(cb) {
	if (!this._accounts) {
		this._accounts = new OmTable(this._client, "accounts", "account");
		this._accounts._defaultObject = function() {
			return {
				name: "",
				thumbnailHash: null,
				feeds: [],
				hasAppTime: null,
				profileVersion: 0,
				owned: false,
				upToDate: false
			};
		};
	}
	cb(this._accounts)
}

OmStore.prototype.getBlobs = function(cb) {
	if (!this._blobs) {
		this._blobs = new OmTable(this._client, "blobs", "hash");
		this._blobs._defaultObject = function() {
			return {
				sources: []
			};
		};
	}
	cb(this._blobs);
}

OmStore.prototype.getSettings = function(cb) {
	if (!this._settings)
		this._settings = new OmTable(this._client, "settings", "key");
	cb(this._settings)
}

OmStore.prototype.getFeedMessages = function(feedId, cb) {
	var db = this._messages[feedId];
	if (!db) {
		db = new OmTable(this._client, "feed-messages-" + feedId + ".json");
		this._messages[feedId] = db;
	}
	cb(db);
}

function OmTable(client, name, key) {
	this._client = client;
	this._name = name;
	this._key = key;

	var lokiSettings = {
		//autosave: true,
		//autosaveInterval: 10000,
		//autoload: true,
		//persistenceMethod: "localStorage"
	};
	this._db = new loki(name, lokiSettings);
	this._data = this._db.addCollection("data")
	if (key) {
		//this._data.ensureIndex({ fieldName: key });
	}
	
}

OmTable.prototype.insert = function(o, cb) {
	if (typeof(o.toRaw) == 'function')
		o = o.toRaw();
	var r = this._data.insert(o);
	if (typeof(cb) == 'function') {
		setTimeout(function() {
			cb(undefined, r);
		}, 0);
	}
	this._client.events._notify(this._name);
}

OmTable.prototype._defaultObject = function() {
	return {};
}

OmTable.prototype.update = function(o, cb) {
	if (typeof(o.toRaw) == 'function')
		o = o.toRaw();
	this._data.update(o);
	if (typeof(cb) == 'function') {
		setTimeout(function() {
			cb(null, o);
		}, 0);
	}
	this._client.events._notify(this._name);
}

OmTable.prototype.getObjectById = function(id, cb) {
	var o = this._data.findOne({ $loki : id });
	setTimeout(function() {
		cb(null, o);
	}, 0);
}

OmTable.prototype.getObjectByKey = function(key, cb) {
	var query = {};
	query[this._key] = key;
	var r = this._data.findOne(query);
	setTimeout(function() {
		cb(null, r);
	}, 0)
}

OmTable.prototype.getOrCreateObject = function(key, cb, details) {
    this.getObjectByKey(key, function(err, existing) {
		if (existing != null) {
			if (typeof(cb) == 'function') {
				cb(existing);
			}
		} else {
			var obj = this._defaultObject();
			if (typeof(details) != 'undefined') {
				for (var p in details) {
					obj[p] = details[p];
				}
			}
			obj[this._key] = key;
			this.insert(obj, function(err, res) {
				if (typeof(cb) == 'function') {
					setTimeout(function() {
						cb(res);	
					}, 0);
				}
			});
		}
	}.bind(this));
}

module.exports = OmStore;
},{"../ldproto":22,"lokijs":199}],9:[function(require,module,exports){
var proto = require("../ldproto");
var OMFeed = require("./model/OMFeed");
var ObjTypes = require("./model/ObjTypes");

function LongdanMessageConsumer(client) {
	this._client = client;
}

LongdanMessageConsumer.prototype.start = function() {
	this._client.store.getSettings(this._onLoadSettings.bind(this));
}

LongdanMessageConsumer.prototype._onLoadSettings = function(settings) {
	this._settings = settings;
	this._client.store.getFeeds(this._onLoadFeeds.bind(this));
}

LongdanMessageConsumer.prototype._onLoadFeeds = function(feeds) {
	this._feeds = feeds;
	this._settings.getObjectByKey("sync", function(err, sync) {
		if (sync == null) {
			var TWO_WEEKS = 2 * 7 * 24 * 60 * 60 * 1000;
			var twoWeeksAgo = new Date().getTime() - TWO_WEEKS;
			sync = {
			  key: "sync",
			  caughtUp: false,
			  feedSyncStart: 0,
			  feedSyncEnd: twoWeeksAgo * 1000,
			  feedSyncSplit: twoWeeksAgo * 1000,
			};
			this._settings.insert(sync, function(err, sync) {
				this._sync = sync;
				this._initConnection();
			}.bind(this));
		} else {
			this._sync = sync;
			this._initConnection();
		}
	}.bind(this));
}

LongdanMessageConsumer.prototype._initConnection = function() {
	var conn = this._client._msg;
	conn.onPush = this._onPush.bind(this);    
	conn.onSessionEstablished = this._establishConnection.bind(this);
	if (conn.connected) {
		this._establishConnection();	
	}
}

LongdanMessageConsumer.prototype._establishConnection = function() {
	this._client.msgCall(new proto.LDSubscribeForAccountInboxRequest(), this._onSubscribe);

	var lastSyncedTime = 0;
	var sync = this._sync;
	if (!sync.caughtUp) {
        lastSyncedTime = sync.feedSyncEnd;
    } else if (sync.feedSyncStart < sync.feedSyncSplit) {
        lastSyncedTime = sync.feedSyncStart;
    } else {
    	return;
    }

	var feedsReq = new proto.LDGetDirtyFeedsRequest();
	feedsReq.Since = lastSyncedTime;
	this._client.msgCall(feedsReq, this._onReceivedDirtyFeeds.bind(this));
}

LongdanMessageConsumer.prototype._onSubscribe = function() {
	// We are now listening for live durable msg pushes
}

LongdanMessageConsumer.prototype._onPush = function(push) {
	if (push.Message) {
		this._client.longdanMessageProcessor.processDurableMessage(push.Message, { pushed: true });
	}
}

LongdanMessageConsumer.prototype._onReceivedDirtyFeeds = function(error, resp, req) {
	if (error) {
		console.log("DOH");
		return;
	}

	var sync = this._sync;
    var lastSyncTime = 0;
    if (!sync.caughtUp) {
    	lastSyncTime = sync.feedSyncEnd;
    } else if (sync.feedSyncStart < sync.feedSyncSplit) {
		lastSyncTime = sync.feedSyncStart;
    } else {
    	//return;
    }

    resp.Dirty.forEach(function(dirty, i) {
		lastSyncTime = Math.max(lastSyncTime, dirty.LastWriteTime);

		var cb = function(f) {
			this._enqueueFeedForFetch(f);
		}.bind(this);

		var lastRenderableTime = (dirty.LastRenderableTime == null) ? 0 : dirty.LastRenderableTime;
		var identifier = JSON.stringify(dirty.Feed.encode());
		this._feeds.getOrCreateObject(identifier, cb, {
			acceptance: dirty.Acceptance,
		  	_syncMask: OMFeed.MASK_DEFAULT,
		  	renderableTime: lastRenderableTime
		});
	}, this);

	if (!resp.Partial) {
		sync.caughtUp = true;
	} else {
		var feedsReq = new proto.LDGetDirtyFeedsRequest();
		feedsReq.Since = lastSyncTime;
		if (lastSyncTime > sync.feedSyncSplit) {
			sync.feedSyncEnd = lastSyncTime;
		}
		this._settings.update(sync);
		this._client.msgCall(feedsReq, this._onReceivedDirtyFeeds.bind(this));
	}
}

LongdanMessageConsumer.prototype._enqueueFeedForFetch = function(feed) {
	if (feed._syncMask & OMFeed.MASK_STATE != 0) {
		this._fetchFeedState(feed);
	}
	if (feed._syncMask & OMFeed.MASK_DETAILS != 0) {
		var typedId = new proto.LDTypedId();
		typedId.Type = ObjTypes.FEED_DETAILS;
		typedId.Id = [];
		this._syncMessages(feed, typedId, OMFeed.MASK_DETAILS);
	}
	if (feed._syncMask & OMFeed.MASK_MEMBERS != 0) {
		this._fetchFeedMembers(feed);
	}
	if (feed._syncMask & OMFeed.MASK_NEWER != 0) {
		this._fetchFeedMessages(feed);
	}
	if (feed._syncMask & OMFeed.MASK_OLDER != 0) {
		this._fetchOlderFeedMessages(feed);
	}
}

LongdanMessageConsumer.prototype._fetchFeedMembers = function(feed, last) {
	var req = new proto.LDGetMessagesByTypeRequest();
    req.Feed = new OMFeed(feed).getLdFeed();
    req.Type = ObjTypes.FEED_MEMBERSHIP;
    req.NextResult = (typeof(last) != 'undefined') ? last : null;
    this._client.msgCall(req, this._fetchFeedMembersCallback.bind(this));
}

LongdanMessageConsumer.prototype._fetchFeedMembersCallback = function(error, resp, req) {
	var err = error || !resp.Messages;
	if (!err)
		this._client.longdanMessageProcessor.processDurableMessages(resp.Messages);
	var feedIdentifier = JSON.stringify(req.Feed.encode());
	this._feeds.getObjectByKey(feedIdentifier, (function(err2, feed) {
		feed._syncMask &= ~OMFeed.MASK_MEMBERS;
		feed.expired = false;
		feed.hasWriteAccess = true;
		this._feeds.update(feed);


		if (!err && resp.ContinuationKey != null) {
			this._fetchFeedMembers(feed, resp.ContinuationKey);
		}
	}).bind(this));
}

LongdanMessageConsumer.prototype._fetchFeedMessages = function(feed) {
	var req = new proto.LDGetMessagesSinceRequest();
    req.Timestamp = feed.newestFromService;
    req.Feed = new OMFeed(feed).getLdFeed();
    this._client.msgCall(req, this._fetchFeedMessagesCallback.bind(this));
}

LongdanMessageConsumer.prototype._fetchFeedMessagesCallback = function(error, resp, req) {
	if (error) {
		// TODO: handle
		return;
	}

	this._client.longdanMessageProcessor.processDurableMessages(resp.Messages);
	var last = resp.Messages[resp.Messages.length-1].Timestamp;

	var feedIdentifier = JSON.stringify(req.Feed.encode());
	this._feeds.getObjectByKey(feedIdentifier, (function(err, feed) {
		feed.newestFromService = last;
		if (resp.Partial) {
			this._feeds.update(feed, function() {
				this._fetchFeedMessages(feed);
			}.bind(this));
		} else {
			feed._syncMask &= ~OMFeed.MASK_NEWER;
			this._feeds.update(feed);
		}
	}).bind(this));
}

LongdanMessageConsumer.prototype._fetchOlderFeedMessages = function(feed) {

}

LongdanMessageConsumer.prototype._fetchFeedState = function(feed) {
	var req = new proto.LDGetFeedStateRequest();
    req.Feed = new OMFeed(feed).getLdFeed();
    this._client.msgCall(req, this._fetchFeedStateCallback.bind(this));
}

LongdanMessageConsumer.prototype._fetchFeedStateCallback = function(error, resp, req) {
	if (error) {
		// TODO: requeue
		return;
	}

	var feedIdentifier = JSON.stringify(req.Feed.encode());
	this._feeds.getObjectByKey(feedIdentifier, (function(err, feed) {
		feed._syncMask &= ~OMFeed.MASK_STATE;
		feed.acceptance = resp.AcceptanceState;
		feed.hasWriteAccess = true;
		this._feeds.update(feed);
	}).bind(this));
}

LongdanMessageConsumer.prototype._syncMessages = function(feed, id, maskToRemove) {
	var req = new proto.LDGetMessageByIdRequest();
	req.Feed = new proto.LDFeed(JSON.parse(feed.identifier));
	req.Id = id;
	this._client.msgCall(req, (function(error, resp) {
		feed._syncMask &= ~maskToRemove;
		if (!error && resp.Message) {
			this._client.longdanMessageProcessor.processDurableMessage(resp.Message);
		}
		this._feeds.update(feed);
	}).bind(this));
}

module.exports = LongdanMessageConsumer;

},{"../ldproto":22,"./model/OMFeed":11,"./model/ObjTypes":12}],10:[function(require,module,exports){
var ObjTypes = require("./model/ObjTypes");
var ChatObjectProcessor = require("./processors/ChatObjectProcessor");
var FeedDetailsProcessor = require("./processors/FeedDetailsProcessor");
var MembershipProcessor = require("./processors/MembershipProcessor");
var BlobRefProcessor = require("./processors/BlobRefProcessor");
var ContactProcessor = require("./processors/ContactProcessor");
var LikeProcessor = require("./processors/LikeProcessor");
var LastReadProcessor = require("./processors/LastReadProcessor");


var proto = require("../ldproto");

function LongdanMessageProcessor(client) {
	this._client = client;

	var cop = new ChatObjectProcessor();
	this._durableMessageProcessors = {};
	this._durableMessageProcessors[ObjTypes.TEXT] = cop;
	this._durableMessageProcessors[ObjTypes.ANIMATED_GIF] = cop;
	this._durableMessageProcessors[ObjTypes.PICTURE] = cop;
	this._durableMessageProcessors[ObjTypes.CANVAS] = cop;
	this._durableMessageProcessors[ObjTypes.STICKER] = cop;
	this._durableMessageProcessors[ObjTypes.ILBC] = cop;
	this._durableMessageProcessors[ObjTypes.RDL] = cop;
	this._durableMessageProcessors[ObjTypes.APP] = cop;
	this._durableMessageProcessors[ObjTypes.LOCATION] = cop;
	this._durableMessageProcessors[ObjTypes.FILE] = cop;
	this._durableMessageProcessors[ObjTypes.VIDEO] = cop;
	this._durableMessageProcessors[ObjTypes.COMMENT] = cop;
	this._durableMessageProcessors[ObjTypes.LIKE] = new LikeProcessor();
	this._durableMessageProcessors[ObjTypes.LAST_READ] = new LastReadProcessor();
	this._durableMessageProcessors[ObjTypes.FEED_DETAILS] = new FeedDetailsProcessor();
	this._durableMessageProcessors[ObjTypes.FEED_MEMBERSHIP] = new MembershipProcessor();
	this._durableMessageProcessors[ObjTypes.CONTACT] = new ContactProcessor();
	this._durableMessageProcessors[ObjTypes.BLOB_REFERENCE] = new BlobRefProcessor();
	this._durableMessageProcessors[ObjTypes.EBLOB_REFERENCE] = new BlobRefProcessor();
}

LongdanMessageProcessor.prototype.processDurableMessage = function(message, options) {
	if (this._db) {
		this._processDurableMessage.call(this, message, options);
	} else {
		this._client.store.getFeeds(function(feeds) {
		this._client.store.getAccounts(function(accounts) {
			this._db = {feeds:feeds, accounts:accounts};
			this._processDurableMessage.call(this, message, options);
		}.bind(this));
	}.bind(this));
	}
	
}

LongdanMessageProcessor.prototype._processDurableMessage = function(message, options) {
	var db = this._db;
	var proc = this._durableMessageProcessors[message.Id.Type];
	if (typeof(proc) != 'undefined') {
		try {
			var client = this._client;
			db.feeds.getOrCreateObject(JSON.stringify(message.Feed.encode()), function(feed) {
				if (message.Deleted) {
					// TODO: deletes
				} else {
					db.accounts.getOrCreateObject(message.Owner, function(sender) {
				    	proc.processMessage(client, db, feed, sender, message);
					})
				}
			});
		} catch (e) {
			console.error("Error processing message of type " + message.Id.Type, e);
		}
	} else {
//		console.log("Not processing message of type " + message.Id.Type);
	}

	if (options != undefined && options.pushed) {
		this._client.events._notifyMessagePushed(message);
	}
}

LongdanMessageProcessor.prototype.processDurableMessages = function(messages) {
	// Run all messages immediately
	/*
	for (var i = 0; i < messages.length; i++) {
		this.processDurableMessage(messages[i]);
	}
	*/

	// Schedule all messages together
	/*
	setTimeout(function() {
		for (var i = 0; i < messages.length; i++) {
			this.processDurableMessage(messages[i]);
		}
	}.bind(this), 0);
	*/

	// Each message scheduled on main thread
	
	messages.forEach(function(msg) {
		setTimeout(function() {
			this.processDurableMessage(msg);
		}.bind(this), 0);
	}.bind(this));
	
}

module.exports = LongdanMessageProcessor;
},{"../ldproto":22,"./model/ObjTypes":12,"./processors/BlobRefProcessor":13,"./processors/ChatObjectProcessor":14,"./processors/ContactProcessor":15,"./processors/FeedDetailsProcessor":16,"./processors/LastReadProcessor":17,"./processors/LikeProcessor":18,"./processors/MembershipProcessor":19}],11:[function(require,module,exports){
var proto = require("../../ldproto");

function OMFeed(feed) {
	this._feed = feed;
}

OMFeed.prototype.toRaw = function() {
	return this._feed;
}

OMFeed.prototype.getLdFeed = function() {
	return new proto.LDFeed(JSON.parse(this._feed.identifier));
}

OMFeed.MASK_NEWER = 1 << 0;
OMFeed.MASK_STATE = 1 << 1;
OMFeed.MASK_DETAILS = 1 << 2;
OMFeed.MASK_LAST_READ = 1 << 3;
OMFeed.MASK_MEMBERS = 1 << 4;
OMFeed.MASK_OLDER = 1 << 5;
OMFeed.MASK_DEFAULT = OMFeed.MASK_NEWER | OMFeed.MASK_STATE | OMFeed.MASK_DETAILS | OMFeed.MASK_LAST_READ | OMFeed.MASK_MEMBERS;

module.exports = OMFeed;
},{"../../ldproto":22}],12:[function(require,module,exports){
function ObjTypes() {
}

ObjTypes.TEXT = "text";
ObjTypes.PICTURE = "picture";
ObjTypes.ANIMATED_GIF = "animated_gif";
ObjTypes.FEED_DETAILS = "!feed_details";
ObjTypes.FEED_MEMBERSHIP = "!member";
ObjTypes.RDL = "rdl";
ObjTypes.APP = "app";
ObjTypes.LOCATION = "location";
ObjTypes.FILE = "file";
ObjTypes.VIDEO = "video";
ObjTypes.COMMENT = "comment";
ObjTypes.STICKER = "sticker";
ObjTypes.CANVAS = "canvas";
ObjTypes.BLOB_REFERENCE = "ref";
ObjTypes.EBLOB_REFERENCE = "eref";
ObjTypes.ILBC = "ilbc";
ObjTypes.CONTACT = "!contact";
ObjTypes.LIKE = "like";
ObjTypes.LAST_READ = "lastRead";



module.exports = ObjTypes;

},{}],13:[function(require,module,exports){
(function (Buffer){
var proto = require("../../ldproto");

function BlobRefProcessor() {

}

BlobRefProcessor.prototype.processMessage = function(client, db, feed, sender, msg) {
	var bref = JSON.parse(msg.Body.toString("utf8"));
	var source = bref.Source;
	if (source == null) {
		throw new Exception("No blob source");
	}

	if (source.startsWith("http://") ||
		source.startsWith("https://") ||
		source.startsWith("longdan://")) {

		var hash = new Buffer(bref.Hash, "base64").toString("hex");
		client.blob.ensureBlobSource(hash, source, msg.Timestamp, feed);
	}
}

module.exports = BlobRefProcessor;
}).call(this,require("buffer").Buffer)
},{"../../ldproto":22,"buffer":26}],14:[function(require,module,exports){
var proto = require("../../ldproto");

function ChatObjectProcessor() {

}

ChatObjectProcessor.prototype.processMessage = function(client, db, feed, sender, msg) {
  var t = msg.Timestamp / 1000;
  var body = JSON.parse(msg.Body);
  body.type = msg.Id.Type;
  body.senderId = client.store.getObjectId(sender);
  body.serverTimestamp = t;
  var feedId = client.store.getObjectId(feed);

  client.store.getFeedMessages(feedId, function(messages) {
      if (!('renderableTime' in feed))
        feed.renderableTime = 0;

      if (feed.renderableTime < t) {
          feed.renderableTime = t;
          feed.renderableObj = body;
      }   

      db.feeds.update(feed);
      messages.insert(body);
  }.bind(this));
}

module.exports = ChatObjectProcessor;
},{"../../ldproto":22}],15:[function(require,module,exports){
var proto = require("../../ldproto");

function ContactProcessor() {

}

ContactProcessor.prototype.processMessage = function(client, db, feed, sender, msg) {
	// TODO: Protocol generator for ldobjects.
   var contact = new proto.LDContactDetails(JSON.parse(msg.Body.toString("utf8")).c);

   if (contact.ProfilePictureLink) {
	   	var hash = client.blob.hashFromLongdanUrl(contact.ProfilePictureLink);
	  	client.blob.ensureBlobSource(hash, contact.ProfilePictureLink);
   }

   client.identity.ensureIdentity({
   		account: contact.Account,
   		name: contact.Name,
   		thumbnailHash: hash,
   		hasAppTime: contact.HasAppTime,
   		profileVersion: contact.Version
   });
}

module.exports = ContactProcessor;
},{"../../ldproto":22}],16:[function(require,module,exports){
var proto = require("../../ldproto");

function FeedDetailsProcessor() {

}

FeedDetailsProcessor.prototype.processMessage = function(client, db, feed, sender, msg) {
  var details = JSON.parse(msg.Body.toString("utf8"));
  
  feed.specifiedName = details.name;  	
  if (details.name) {
  	feed.name = details.name;
  }
  if (details.thumbnailLink) {
  	var hash = client.blob.hashFromLongdanUrl(details.thumbnailLink);
  	client.blob.ensureBlobSource(hash, details.thumbnailLink);
  	feed.thumbnailHash = feed.specifiedThumbnailHash = hash;
  }
  db.feeds.update(feed);
}

module.exports = FeedDetailsProcessor;
},{"../../ldproto":22}],17:[function(require,module,exports){
var proto = require("../../ldproto");

function LastReadProcessor() {

}

LastReadProcessor.prototype.processMessage = function(client, db, feed, sender, msg) {
   //console.log("LastRead " + JSON.parse(msg.Body.toString("utf8")));
}

module.exports = LastReadProcessor;
},{"../../ldproto":22}],18:[function(require,module,exports){
var proto = require("../../ldproto");

function LikeProcessor() {

}

LikeProcessor.prototype.processMessage = function(client, db, feed, sender, msg) {
   //console.log("obj " + JSON.parse(msg.Body.toString("utf8")));
}

module.exports = LikeProcessor;
},{"../../ldproto":22}],19:[function(require,module,exports){
var proto = require("../../ldproto");

function MembershipProcessor() {

}

MembershipProcessor.prototype.processMessage = function(client, db, feed, sender, msg) {
   var account = msg.Id.Id.toString("utf8");
   client.feed.ensureFeedMember(feed, account);
}

module.exports = MembershipProcessor;
},{"../../ldproto":22}],20:[function(require,module,exports){
(function (process,Buffer){
var proto = require("./ldproto");
var websocket = require('websocket');
var ourcrypto = require('./crypto');

var IDP_CLUSTER = "idp";
var BASE_BACKOFF = 3 * 1000;
var MAX_BACKOFF = 5 * 60 * 1000;

function makeWsPath(b, p) {
    if(process.browser) {
        if(document.location.href.indexOf("https") == 0) {
            b = b.replace("http://", "wss://");
            b = b.replace("https://", "wss://");
        } else { 
            b = b.replace("https://", "wss://");
            b = b.replace("http://", "ws://");
        }
    } else {
        b = b.replace("http://", "wss://");
        b = b.replace("https://", "wss://");
    }
    if (b.charAt(b.length - 1) == '/' && p.charAt(0) == '/')
        return b + p.substring(1);
    if (!b.charAt(b.length - 1) == '/' && !p.charAt(0) == '/')
        return b + "/" + p;
    return b + p;
};

function WaitingRequest(req, cb) {
    this.request = req;
    this.callback = cb; // function (error, resp, req)
}
function PendingRequest(wrapped, req, cb) {
    this.wrapped = wrapped;
    this.request = req;
    this.callback = cb; // function (error, resp, req)
}

function PermanentFailure(e) {
    Error.call(this);
    this.error = e;
}
PermanentFailure.prototype = new Error();
PermanentFailure.prototype.constructor = PermanentFailure;
PermanentFailure.prototype.permanent = true;
PermanentFailure.prototype.toString = function () {
    return "Permanent Failure: " + this.error;
}

function TemporaryFailure(e) {
    this.error = e;
}
TemporaryFailure.prototype = new Error();
TemporaryFailure.prototype.constructor = TemporaryFailure;
TemporaryFailure.prototype.permanent = false;
TemporaryFailure.prototype.toString = function () {
    return "Temporary Failure: " + this.error;
}

function Abort() {
    this.error = "Aborting";
}
Abort.prototype = new Error();
Abort.prototype.constructor = Abort;
Abort.prototype.permanent = true;
Abort.prototype.toString = function () {
    return "Aborted: ";
}

function rand(max) {
    return Math.floor(Math.random() * (max));
}

function Connection(cluster, target, configuration, privateKey, apiKey) {
    this._cluster = cluster;
    this._configuration = configuration;
    if (cluster == IDP_CLUSTER) {
        this._serverPublicKey = this._configuration.IdpKey;
        this._endpoint = makeWsPath(this._configuration.IdpEndpoints[rand(this._configuration.IdpEndpoints.length)], target);
        this._requestWrapper = 'makeIdpRpc';
        this._wrapperConstructor = proto.LDDeviceToIdpRpcWrapper;
        this._responseConstructor = proto.LDDeviceToIdpResponseContainer;
    } else {
        if (cluster)
            this._setCluster(cluster, target);
        this._requestWrapper = 'makeClusterRpc';
        this._wrapperConstructor = proto.LDDeviceToClusterRpcWrapper;
        this._responseConstructor = proto.LDDeviceToClusterResponseContainer;
    }
    
    if (apiKey) {
    	this._apiKey = new Buffer(apiKey.Id, "hex");
    	this._apiSecret = new Buffer(apiKey.Secret, "hex");
    } else {
    	this._apiKey = null;
    	this._apiSecret = null;
    }
    
    this._privateKey = privateKey;
    this._publicKey = ourcrypto.generatePublicKey(privateKey);
    this._waiting = []; // WaitingRequest array
    this._pending = {}; // reqId:RequestWithCallback dictionary};
}

Connection.prototype.onPush = null; // function(push);
Connection.prototype.onInterrupted = null; //function(cause);
Connection.prototype.onDeviceInvalid = null; //function();
Connection.prototype.connected = false;
Connection.prototype.debug = false;

Connection.prototype._setCluster = function(cluster, target) {
    if (!(cluster in this._configuration.ClusterKeys))
        throw "missing cluster info " + cluster;
    this._serverPublicKey = this._configuration.ClusterKeys[cluster];
    this._endpoint = makeWsPath(this._configuration.ClusterEndpoints[cluster][rand(this._configuration.ClusterEndpoints[cluster].length)], target);
}

Connection.prototype._verbose = function(m) {
    if (this.debug)
        console.log(m);
};
Connection.prototype._warn = function(m) {
    console.log("warn: " + m);
};

Connection.prototype.enable = function () {
    if (!this._endpoint)
        throw new Error("Must register with IDP!");
    if (this.enabled)
        return;
    this._enabled = true;
    this._connect();
};

Connection.prototype._connect = function() {
    this._nextRequestId = 1;
    this._client = new websocket.w3cwebsocket(this._endpoint);
    this._client.onopen = this._onopen.bind(this);
    this._client.onmessage = this._onmessage.bind(this);
    this._client.onclose = this._onclose.bind(this);
    this._client.onerror = this._onerror.bind(this);
};
Connection.prototype._clearBackoff = function(reason) {
    if (this._backoffTimer)
        clearTimeout(this._backoffTimer);
    this._backoffTimer = undefined;
    this._lastFailure = undefined;
    this._nextReschedule = undefined;
}
Connection.prototype._backoff = function (reason) {
    var interrupted = false;
    if (this._client) {
        this._client.close();
        interrupted = true;
    }
    this._client = undefined;
    this._sentChallenge = undefined;
    this._authenticated = undefined;
    if (reason.constructor == Abort) {
        this._clearBackoff();
        this._enabled = undefined;
    }
    var now = new Date();
    if (!this._nextReschedule) {
        //first error
        this._lastFailure = now;
        this._nextReschedule = now + BASE_BACKOFF;
        this._backoffTimer = setTimeout(this._retry.bind(this), this._nextReschedule - this._lastFailure);
    } else if (this._backoffTimer) {
        //already waiting
        this._verbose("repeated backoffs in progress, supressing");
    } else {
        var last_timeout = this._nextReschedule - this._lastFailure;
        this._lastFailure = now;
        this._nextReschedule = Math.min(now + last_timeout * 2, MAX_BACKOFF);
        this._backoffTimer = setTimeout(this._retry.bind(this), this._nextReschedule - this._lastFailure);
    }
    this._abortRequests();
    if (interrupted && typeof(this.onInterrupted) == "function") {
        this.onInterrupted(reason);
    }
};
Connection.prototype._retry = function(reason) {
    this._backoffTimer = undefined;
    if(this._enabled)
        this._connect();
}

Connection.prototype.disable = function() {
    if (!this._enabled)
        return;
    this._enabled = undefined;
    if (this._client)
        this._client.close();
    this._client = undefined;
    this._clearBackoff(new Abort());
};


Connection.prototype._sendRequest = function(req) {
    var wrapped = req[this._requestWrapper]();
    wrapped.Request.RequestId = this._nextRequestId++;
    var body = JSON.stringify(wrapped.encode());
    this._verbose(body);
    this._client.send(body);
    return wrapped;
};
Connection.prototype._sendResponse = function(wrapped) {
    var body = JSON.stringify(wrapped.encode());
    this._verbose(body);
    this._client.send(body);
};

Connection.prototype._call = function (req, callback) {
    var wrapped = this._sendRequest(req);
    var rcb = new PendingRequest(wrapped, req, callback);
    this._pending[wrapped.Request.RequestId] = rcb;
}

Connection.prototype._enqueue = function(req, callback) {
    if (!this._endpoint)
        this._warn("enqueueing message request before registered");
    var wr = new WaitingRequest(req, callback);
    this._waiting.push(wr);
}

Connection.prototype.call = function(req, callback) {
    if (this._authenticated)
        this._call(req, callback);
    else
        this._enqueue(req, callback);
}

Connection.prototype._sendHello = function() {
    var req = new proto.LDHelloChallengeRequest();
    req.SourceKey = this._publicKey;
    req.ApiKey = this._apiKey;
    req.DestinationChallenge = this._challengeForServer = ourcrypto.createNonce();
    this._call(req, this._ackHello.bind(this));
};

Connection.prototype._ackHello = function (error, resp, req) {
    if (error) {
        if (error.constructor == PermanentFailure && error.error == "DeviceNotFound") {
            this._warn("device no longer valid");
            if (this.onDeviceInvalid)
                this.onDeviceInvalid();
            this.disable();
            return;
        }

        this._backoff(error);
        return;
    }

    var response = resp.DestinationResponse;
    var challenge = resp.SourceChallenge;

    var shared = ourcrypto.computeShared(this._privateKey, this._serverPublicKey);

    var sha = ourcrypto.createSHA256();
    sha.update(new Buffer([1]));
    sha.update(new Buffer(shared));
    sha.update(new Buffer(this._challengeForServer));
    if (sha.digest('base64') != response.toString('base64')) {
        this._warn("server failed challenge");
        this._backoff(new TemporaryFailure("server failed challenge"));
        return;
    }

    sha = ourcrypto.createSHA256();
    sha.update(new Buffer([2]));
    sha.update(new Buffer(shared));
    sha.update(new Buffer(challenge));
    var sourceResponse = new Buffer(sha.digest('base64'), 'base64');

	var appResponse = null;
	if (this._apiSecret) {
	    sha = ourcrypto.createSHA256();
	    sha.update(new Buffer(this._apiSecret));
	    sha.update(new Buffer(challenge));
	    appResponse = new Buffer(sha.digest('base64'), 'base64');
    }
    var req = new proto.LDCompleteChallengeRequest();
    req.SourceResponse = sourceResponse;
    req.AppChallengeResponse = appResponse;
    this._sentChallenge = true;
    this._call(req, this._pumpRequests.bind(this));
};

Connection.prototype.sendPing = function(delay, lastRtt, cb) {
	if(!this.connected) {
		cb(new TemporaryFailure("NotConnected"));
		return;
	}
    var req = new proto.LDPingRequest();
	req.NextPingDelayMs = delay;
	req.LastRtt = lastRtt;
    this._call(req, this._ackPing.bind(this, cb));
};

Connection.prototype._ackPing = function (cb, error, resp, req) {
    if (error) {
		cb(error);
		return;
	}

	cb(undefined, resp.ObservedIp, resp.UtcMillis);
};

Connection.prototype._pumpRequests = function (error, resp, req) {
    if (error) {
        this._backoff(error);
        return;
    }
    this._authenticated = true;
    for (var i = 0; i < this._waiting.length; ++i)
        this._call(this._waiting[i].request, this._waiting[i].callback);
    this._waiting = undefined; //no waiting requests while we are running
};

Connection.prototype._abortRequests = function (error) {
    var pending = this._pending;
    this._pending = {};;
    for (var k in this._pending) {
        try {
            pending[k].callback(reason, undefined, pending[k].request);
        } catch (e) {
            this._warn("failure in callback for abort pending" + e);
            this._verbose(e.stack);
        }
    }
    var waiting = this._waiting;
    this._waiting = [];
    for (var i = 0; i < this._waiting; ++i) {
        try {
            waiting[i].callback(reason, undefined, waiting[i].request);
        } catch (e) {
            this._warn("failure in callback for abort waiting " + e);
            this._verbose(e.stack);
        }
    }
};

Connection.prototype._onerror = function (e) {
    this._warn('error' + e);
	this.connected = false;
    this._verbose(e);
    this._backoff(new TemporaryFailure(e));
};

Connection.prototype._onopen = function () {
    this._warn('connected');
	this.connected = true;
	if(!this._monitoring)
		this._sendHello();

    if (typeof(this.onSessionEstablished) == 'function') {
        this.onSessionEstablished();
    }
};

Connection.prototype._onclose = function (e) {
    this._warn('closed: ' + e.reason + " (" + e.code + ")");
	this.connected = false;
    this._backoff(new TemporaryFailure(e.reason));
};

function firstNotNull(o, d) {
    for (var k in o) {
        var s = o[k];
        if (s === null || s === undefined)
            continue;
        if (typeof (s) == "object") {
            if (d == 1)
                return s;
            var c = firstNotNull(s, d - 1);
            if (c !== null && c !== undefined)
                return c;
        }
    }
    return null;
}

Connection.prototype._extractResponse = function (resp) {
    if (resp.Response.HelloChallenge)
        return resp.Response.HelloChallenge;
    if (resp.Response.Simple)
        return resp.Response.Simple.Value;
    if (resp.Response.Ping)
        return resp.Response.Ping;
    return firstNotNull(resp.Response, 2);
}
Connection.prototype._extractPush = function (resp) {
    return firstNotNull(resp.Request, 2);
}

Connection.prototype._onmessage = function (e) {
    //When isn't this string??
    if (typeof e.data !== 'string')
        return;

    this._verbose("Received: '" + e.data + "'");
    var resp = new this._wrapperConstructor(JSON.parse(e.data));
    if (resp.Response) {
        var rcb = this._pending[resp.Response.RequestId];
        if (!rcb) {
            this._warn("unknown request id " + resp.Response.RequestId);
            this._verbose(resp);
            this._backoff(new Abort());
            return;
        }
        delete this._pending[resp.Response.RequestId];
        if (resp.Response.ErrorCode || resp.Response.ErrorDetail) {
            if (!rcb.callback) {
                this._warn("failure in callback for response " + e);
                this._verbose(rcb.request);
            } else {
                try {
                    if (resp.Response.ErrorCode && resp.Response.ErrorCode != "UnknownError")
                        rcb.callback(new PermanentFailure(resp.Response.ErrorCode), undefined, rcb.request);
                    else
                        rcb.callback(new TemporaryFailure(resp.Response.ErrorCode || resp.Response.ErrorDetail), undefined, rcb.request);
                } catch (e) {
                    this._warn("failure in callback for response " + e);
                    this._verbose(rcb.request);
                    throw e;
                }
            }
            return;
        }

        if (rcb.callback) {
            var extracted = this._extractResponse(resp);
            try {
                rcb.callback(undefined, extracted, rcb.request);
            } catch (e) {
                this._warn("failure in callback for success " + e);
                this._verbose(resp);
                this._verbose(extracted);
                throw e;
            }
        }
    } else {
        var extracted = this._extractPush(resp);
        if (!this.onPush) {
            this._warn("unhandled push: " + e.data);
        } else {
            try {
                this.onPush(extracted);
            } catch (e) {
                this._warn("failure in callback for push " + e);
                this._verbose(resp);
                this._verbose(extracted);
                throw e;
            }
        }
        var wrapper = new this._wrapperConstructor();
        wrapper.Response = new this._responseConstructor();
        wrapper.Response.RequestId = resp.Request.RequestId;
        this._sendResponse(wrapper);
    }
};


module.exports = {
  IDP_CLUSTER:IDP_CLUSTER,
  Connection:Connection,
  PermanentFailure:PermanentFailure,
  TemporaryFailure:TemporaryFailure
};
Object.freeze(module.exports);
}).call(this,require('_process'),require("buffer").Buffer)
},{"./crypto":21,"./ldproto":22,"_process":176,"buffer":26,"websocket":206}],21:[function(require,module,exports){
(function (Buffer){
var nacl = require('partial-nacl');
var crypto = require('crypto');
var FE_SIZE = 32;

function createPrivateKey() {
    return crypto.randomBytes(FE_SIZE);
}
function createNonce(s) {
    return crypto.randomBytes(s || FE_SIZE);
}
function generatePublicKey(priv) {
    return new Buffer(nacl.generate_pubkey(new Uint8Array(priv)));
}
function computeShared(priv, pub2) {
    var q = new Uint8Array(FE_SIZE);
    nacl.curve25519(q, new Uint8Array(priv), new Uint8Array(pub2));
    return new Buffer(q);
}
function createSHA256() {
    return crypto.createHash('sha256');
}
function createMD5() {
    return crypto.createHash('md5');
}

module.exports = {
    createNonce: createNonce,
    createPrivateKey: createPrivateKey,
    generatePublicKey: generatePublicKey,
    computeShared: computeShared,
    createSHA256: createSHA256,
    createMD5: createMD5,
};
Object.freeze(module.exports);
}).call(this,require("buffer").Buffer)
},{"buffer":26,"crypto":30,"partial-nacl":203}],22:[function(require,module,exports){
(function (Buffer){
function LDJSONLoggable(e) { 
}
LDJSONLoggable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    return o;
}
function LDRequestContainerBase(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['#'] !== null && e['#'] !== undefined))
        this.RequestId = e['#'];
    else
        this.RequestId = null;
    if(e && (e['@'] !== null && e['@'] !== undefined))
        this.Context = new LDRpcContext(e['@']);
    if(e && (e['*'] !== null && e['*'] !== undefined))
        this.HelloChallenge = new LDHelloChallengeRequest(e['*']);
    if(e && (e['+'] !== null && e['+'] !== undefined))
        this.CompleteChallenge = new LDCompleteChallengeRequest(e['+']);
    if(e && (e['-'] !== null && e['-'] !== undefined))
        this.Ping = new LDPingRequest(e['-']);
}
LDRequestContainerBase.prototype = new LDJSONLoggable();
LDRequestContainerBase.prototype.constructor = LDRequestContainerBase;
LDRequestContainerBase.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.RequestId !== null) o['#'] = this.RequestId;
    if(this.Context !== null) o['@'] = this.Context.encode();
    if(this.HelloChallenge !== null) o['*'] = this.HelloChallenge.encode();
    if(this.CompleteChallenge !== null) o['+'] = this.CompleteChallenge.encode();
    if(this.Ping !== null) o['-'] = this.Ping.encode();
    return o;
}
LDRequestContainerBase.prototype.RequestId = null;
LDRequestContainerBase.prototype.Context = null;
LDRequestContainerBase.prototype.HelloChallenge = null;
LDRequestContainerBase.prototype.CompleteChallenge = null;
LDRequestContainerBase.prototype.Ping = null;
function LDDeviceToIdpRequestContainer(e) { 
    LDRequestContainerBase.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Signup = new LDDeviceToIdpSignupRequestProtocol(e['a']);
    if(e && (e['A'] !== null && e['A'] !== undefined))
        this.Administrative = new LDDeviceToIdpAdministrativeRequestProtocol(e['A']);
}
LDDeviceToIdpRequestContainer.prototype = new LDRequestContainerBase();
LDDeviceToIdpRequestContainer.prototype.constructor = LDDeviceToIdpRequestContainer;
LDDeviceToIdpRequestContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestContainerBase.prototype.encode.call(this, o);
    if(this.Signup !== null) o['a'] = this.Signup.encode();
    if(this.Administrative !== null) o['A'] = this.Administrative.encode();
    return o;
}
LDDeviceToIdpRequestContainer.prototype.Signup = null;
LDDeviceToIdpRequestContainer.prototype.Administrative = null;
function LDResponseContainerBase(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['#'] !== null && e['#'] !== undefined))
        this.RequestId = e['#'];
    else
        this.RequestId = null;
    if(e && (e['!'] !== null && e['!'] !== undefined))
        this.ErrorCode = e['!'];
    else
        this.ErrorCode = null;
    if(e && (e['!!'] !== null && e['!!'] !== undefined))
        this.ErrorDetail = e['!!'];
    else
        this.ErrorDetail = null;
    if(e && (e['*'] !== null && e['*'] !== undefined))
        this.HelloChallenge = new LDHelloChallengeResponse(e['*']);
    if(e && (e['+'] !== null && e['+'] !== undefined))
        this.CompleteChallenge = new LDCompleteChallengeResponse(e['+']);
    if(e && (e['='] !== null && e['='] !== undefined))
        this.Simple = new LDSimpleResponse(e['=']);
    if(e && (e['-'] !== null && e['-'] !== undefined))
        this.Ping = new LDPingResponse(e['-']);
}
LDResponseContainerBase.prototype = new LDJSONLoggable();
LDResponseContainerBase.prototype.constructor = LDResponseContainerBase;
LDResponseContainerBase.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.RequestId !== null) o['#'] = this.RequestId;
    if(this.ErrorCode !== null) o['!'] = this.ErrorCode;
    if(this.ErrorDetail !== null) o['!!'] = this.ErrorDetail;
    if(this.HelloChallenge !== null) o['*'] = this.HelloChallenge.encode();
    if(this.CompleteChallenge !== null) o['+'] = this.CompleteChallenge.encode();
    if(this.Simple !== null) o['='] = this.Simple.encode();
    if(this.Ping !== null) o['-'] = this.Ping.encode();
    return o;
}
LDResponseContainerBase.prototype.RequestId = null;
LDResponseContainerBase.prototype.ErrorCode = null;
LDResponseContainerBase.prototype.ErrorDetail = null;
LDResponseContainerBase.prototype.HelloChallenge = null;
LDResponseContainerBase.prototype.CompleteChallenge = null;
LDResponseContainerBase.prototype.Simple = null;
LDResponseContainerBase.prototype.Ping = null;
function LDDeviceToIdpResponseContainer(e) { 
    LDResponseContainerBase.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Signup = new LDDeviceToIdpSignupResponseProtocol(e['a']);
    if(e && (e['A'] !== null && e['A'] !== undefined))
        this.Administrative = new LDDeviceToIdpAdministrativeResponseProtocol(e['A']);
}
LDDeviceToIdpResponseContainer.prototype = new LDResponseContainerBase();
LDDeviceToIdpResponseContainer.prototype.constructor = LDDeviceToIdpResponseContainer;
LDDeviceToIdpResponseContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseContainerBase.prototype.encode.call(this, o);
    if(this.Signup !== null) o['a'] = this.Signup.encode();
    if(this.Administrative !== null) o['A'] = this.Administrative.encode();
    return o;
}
LDDeviceToIdpResponseContainer.prototype.Signup = null;
LDDeviceToIdpResponseContainer.prototype.Administrative = null;
function LDDeviceToClusterRequestContainer(e) { 
    LDRequestContainerBase.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Message = new LDDeviceToClusterMessageRequestProtocol(e['m']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Inbox = new LDDeviceToClusterInboxRequestProtocol(e['i']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Blob = new LDClusterOrDeviceToClusterBlobRequestProtocol(e['b']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Contact = new LDDeviceToClusterContactRequestProtocol(e['c']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Profile = new LDDeviceToClusterProfileRequestProtocol(e['p']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AddressBook = new LDDeviceToClusterAddressBookRequestProtocol(e['a']);
    if(e && (e['oas'] !== null && e['oas'] !== undefined))
        this.OmletAppStore = new LDDeviceToClusterOmletItemStoreRequestProtocol(e['oas']);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Device = new LDDeviceToClusterDeviceRequestProtocol(e['d']);
    if(e && (e['cs'] !== null && e['cs'] !== undefined))
        this.CloudSync = new LDDeviceToClusterCloudSyncRequestProtocol(e['cs']);
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.GameChallenge = new LDDeviceToClusterGameChallengeRequestProtocol(e['g']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Subscription = new LDDeviceToClusterSubscriptionRequestProtocol(e['s']);
    if(e && (e['h'] !== null && e['h'] !== undefined))
        this.HighScore = new LDDeviceToClusterHighScoreRequestProtocol(e['h']);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.NearbyItem = new LDDeviceToClusterNearbyItemRequestProtocol(e['n']);
    if(e && (e['M'] !== null && e['M'] !== undefined))
        this.Misc = new LDDeviceToClusterMiscellaneousRequestProtocol(e['M']);
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.Oob = new LDDeviceToClusterDirectMessagingRequestProtocol(e['o']);
}
LDDeviceToClusterRequestContainer.prototype = new LDRequestContainerBase();
LDDeviceToClusterRequestContainer.prototype.constructor = LDDeviceToClusterRequestContainer;
LDDeviceToClusterRequestContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestContainerBase.prototype.encode.call(this, o);
    if(this.Message !== null) o['m'] = this.Message.encode();
    if(this.Inbox !== null) o['i'] = this.Inbox.encode();
    if(this.Blob !== null) o['b'] = this.Blob.encode();
    if(this.Contact !== null) o['c'] = this.Contact.encode();
    if(this.Profile !== null) o['p'] = this.Profile.encode();
    if(this.AddressBook !== null) o['a'] = this.AddressBook.encode();
    if(this.OmletAppStore !== null) o['oas'] = this.OmletAppStore.encode();
    if(this.Device !== null) o['d'] = this.Device.encode();
    if(this.CloudSync !== null) o['cs'] = this.CloudSync.encode();
    if(this.GameChallenge !== null) o['g'] = this.GameChallenge.encode();
    if(this.Subscription !== null) o['s'] = this.Subscription.encode();
    if(this.HighScore !== null) o['h'] = this.HighScore.encode();
    if(this.NearbyItem !== null) o['n'] = this.NearbyItem.encode();
    if(this.Misc !== null) o['M'] = this.Misc.encode();
    if(this.Oob !== null) o['o'] = this.Oob.encode();
    return o;
}
LDDeviceToClusterRequestContainer.prototype.Message = null;
LDDeviceToClusterRequestContainer.prototype.Inbox = null;
LDDeviceToClusterRequestContainer.prototype.Blob = null;
LDDeviceToClusterRequestContainer.prototype.Contact = null;
LDDeviceToClusterRequestContainer.prototype.Profile = null;
LDDeviceToClusterRequestContainer.prototype.AddressBook = null;
LDDeviceToClusterRequestContainer.prototype.OmletAppStore = null;
LDDeviceToClusterRequestContainer.prototype.Device = null;
LDDeviceToClusterRequestContainer.prototype.CloudSync = null;
LDDeviceToClusterRequestContainer.prototype.GameChallenge = null;
LDDeviceToClusterRequestContainer.prototype.Subscription = null;
LDDeviceToClusterRequestContainer.prototype.HighScore = null;
LDDeviceToClusterRequestContainer.prototype.NearbyItem = null;
LDDeviceToClusterRequestContainer.prototype.Misc = null;
LDDeviceToClusterRequestContainer.prototype.Oob = null;
function LDDeviceToClusterResponseContainer(e) { 
    LDResponseContainerBase.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Message = new LDDeviceToClusterMessageResponseProtocol(e['m']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Inbox = new LDDeviceToClusterInboxResponseProtocol(e['i']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Blob = new LDClusterOrDeviceToClusterBlobResponseProtocol(e['b']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Contact = new LDDeviceToClusterContactResponseProtocol(e['c']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Profile = new LDDeviceToClusterProfileResponseProtocol(e['p']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AddressBook = new LDDeviceToClusterAddressBookResponseProtocol(e['a']);
    if(e && (e['oas'] !== null && e['oas'] !== undefined))
        this.OmletAppStore = new LDDeviceToClusterOmletItemStoreResponseProtocol(e['oas']);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Device = new LDDeviceToClusterDeviceResponseProtocol(e['d']);
    if(e && (e['cs'] !== null && e['cs'] !== undefined))
        this.CloudSync = new LDDeviceToClusterCloudSyncResponseProtocol(e['cs']);
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.GameChallenge = new LDClusterOrDeviceToClusterGameChallengeResponseProtocol(e['g']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Subscription = new LDDeviceToClusterSubscriptionResponseProtocol(e['s']);
    if(e && (e['h'] !== null && e['h'] !== undefined))
        this.HighScore = new LDDeviceToClusterHighScoreResponseProtocol(e['h']);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.NearbyItem = new LDDeviceToClusterNearbyItemResponseProtocol(e['n']);
    if(e && (e['M'] !== null && e['M'] !== undefined))
        this.Misc = new LDDeviceToClusterMiscellaneousResponseProtocol(e['M']);
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.Oob = new LDDeviceToClusterDirectMessagingResponseProtocol(e['o']);
}
LDDeviceToClusterResponseContainer.prototype = new LDResponseContainerBase();
LDDeviceToClusterResponseContainer.prototype.constructor = LDDeviceToClusterResponseContainer;
LDDeviceToClusterResponseContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseContainerBase.prototype.encode.call(this, o);
    if(this.Message !== null) o['m'] = this.Message.encode();
    if(this.Inbox !== null) o['i'] = this.Inbox.encode();
    if(this.Blob !== null) o['b'] = this.Blob.encode();
    if(this.Contact !== null) o['c'] = this.Contact.encode();
    if(this.Profile !== null) o['p'] = this.Profile.encode();
    if(this.AddressBook !== null) o['a'] = this.AddressBook.encode();
    if(this.OmletAppStore !== null) o['oas'] = this.OmletAppStore.encode();
    if(this.Device !== null) o['d'] = this.Device.encode();
    if(this.CloudSync !== null) o['cs'] = this.CloudSync.encode();
    if(this.GameChallenge !== null) o['g'] = this.GameChallenge.encode();
    if(this.Subscription !== null) o['s'] = this.Subscription.encode();
    if(this.HighScore !== null) o['h'] = this.HighScore.encode();
    if(this.NearbyItem !== null) o['n'] = this.NearbyItem.encode();
    if(this.Misc !== null) o['M'] = this.Misc.encode();
    if(this.Oob !== null) o['o'] = this.Oob.encode();
    return o;
}
LDDeviceToClusterResponseContainer.prototype.Message = null;
LDDeviceToClusterResponseContainer.prototype.Inbox = null;
LDDeviceToClusterResponseContainer.prototype.Blob = null;
LDDeviceToClusterResponseContainer.prototype.Contact = null;
LDDeviceToClusterResponseContainer.prototype.Profile = null;
LDDeviceToClusterResponseContainer.prototype.AddressBook = null;
LDDeviceToClusterResponseContainer.prototype.OmletAppStore = null;
LDDeviceToClusterResponseContainer.prototype.Device = null;
LDDeviceToClusterResponseContainer.prototype.CloudSync = null;
LDDeviceToClusterResponseContainer.prototype.GameChallenge = null;
LDDeviceToClusterResponseContainer.prototype.Subscription = null;
LDDeviceToClusterResponseContainer.prototype.HighScore = null;
LDDeviceToClusterResponseContainer.prototype.NearbyItem = null;
LDDeviceToClusterResponseContainer.prototype.Misc = null;
LDDeviceToClusterResponseContainer.prototype.Oob = null;
function LDPublicKeys(e) { 
    if(e && (e['ClusterEndpoints'] !== null && e['ClusterEndpoints'] !== undefined)) { 
        this.ClusterEndpoints = {};
        var d = e['ClusterEndpoints'];
        for(var k in d) {
            var d2 = d[k];
            this.ClusterEndpoints[k] = [];
            for(var k2 = 0; k2 < d2.length; ++k2) this.ClusterEndpoints[k].push(d2[k2]);
        }
    }
    if(e && (e['ClusterKeys'] !== null && e['ClusterKeys'] !== undefined)) { 
        this.ClusterKeys = {};
        var d = e['ClusterKeys'];
        for(var k in d) this.ClusterKeys[k] = new Buffer(d[k], 'base64');
    }
    if(e && (e['DefaultCluster'] !== null && e['DefaultCluster'] !== undefined))
        this.DefaultCluster = e['DefaultCluster'];
    else
        this.DefaultCluster = null;
    if(e && (e['IdpEndpoints'] !== null && e['IdpEndpoints'] !== undefined)) { 
        this.IdpEndpoints = [];
        var d = e['IdpEndpoints'];
        for(var k = 0; k < d.length; ++k) this.IdpEndpoints.push(d[k]);
    }
    if(e && (e['IdpKey'] !== null && e['IdpKey'] !== undefined))
        this.IdpKey = new Buffer(e['IdpKey'], 'base64');
}
LDPublicKeys.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ClusterEndpoints !== null) { 
        o['ClusterEndpoints'] = {};
        var d = this.ClusterEndpoints;
        for(var k in d) {
            var d2 = d[k];
            o['ClusterEndpoints'][k] = [];
            for(var k2 = 0; k2 < d2.length; ++k2) o['ClusterEndpoints'][k].push(d2[k2]);
        }
    } else {
        this.ClusterEndpoints = null;
    }
    if(this.ClusterKeys !== null) { 
        o['ClusterKeys'] = {};
        var d = this.ClusterKeys;
        for(var k in d) o['ClusterKeys'][k] = d[k].toString('base64');
    } else {
        o['ClusterKeys'] = null;
    }
    if(this.DefaultCluster !== null) o['DefaultCluster'] = this.DefaultCluster;
    if(this.IdpEndpoints !== null) { 
        o['IdpEndpoints'] = [];
        var d = this.IdpEndpoints;
        for(var k = 0; k < d.length; ++k) o['IdpEndpoints'].push(d[k]);
    } else {
        o['IdpEndpoints'] = null;
    }
    if(this.IdpKey !== null) o['IdpKey'] = this.IdpKey.toString('base64');
    return o;
}
LDPublicKeys.prototype.ClusterEndpoints = null;
LDPublicKeys.prototype.ClusterKeys = null;
LDPublicKeys.prototype.DefaultCluster = null;
LDPublicKeys.prototype.IdpEndpoints = null;
LDPublicKeys.prototype.IdpKey = null;
function LDSynchronizedMessageBody(e) { 
    LDJSONLoggable.call(this, e);
}
LDSynchronizedMessageBody.prototype = new LDJSONLoggable();
LDSynchronizedMessageBody.prototype.constructor = LDSynchronizedMessageBody;
LDSynchronizedMessageBody.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDAcceptanceChange(e) { 
    LDSynchronizedMessageBody.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Acceptance = e['a'];
    else
        this.Acceptance = null;
}
LDAcceptanceChange.prototype = new LDSynchronizedMessageBody();
LDAcceptanceChange.prototype.constructor = LDAcceptanceChange;
LDAcceptanceChange.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDSynchronizedMessageBody.prototype.encode.call(this, o);
    if(this.Acceptance !== null) o['a'] = this.Acceptance;
    return o;
}
LDAcceptanceChange.prototype.Acceptance = null;
function LDBroadcastSettings(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Pin = e['p'];
    else
        this.Pin = null;
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.Expiration = e['e'];
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Latitude = e['a'];
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.Longitude = e['g'];
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Radius = e['r'];
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.BroadcasterAccount = e['b'];
    else
        this.BroadcasterAccount = null;
}
LDBroadcastSettings.prototype = new LDJSONLoggable();
LDBroadcastSettings.prototype.constructor = LDBroadcastSettings;
LDBroadcastSettings.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Pin !== null) o['p'] = this.Pin;
    if(this.Expiration !== null) o['e'] = this.Expiration;
    if(this.Latitude !== null) o['a'] = this.Latitude;
    if(this.Longitude !== null) o['g'] = this.Longitude;
    if(this.Radius !== null) o['r'] = this.Radius;
    if(this.BroadcasterAccount !== null) o['b'] = this.BroadcasterAccount;
    return o;
}
LDBroadcastSettings.prototype.Pin = null;
LDBroadcastSettings.prototype.Expiration = null;
LDBroadcastSettings.prototype.Latitude = null;
LDBroadcastSettings.prototype.Longitude = null;
LDBroadcastSettings.prototype.Radius = null;
LDBroadcastSettings.prototype.BroadcasterAccount = null;
function LDAddMeInfo(e) { 
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Profile = new LDContactProfile(e['p']);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.IntentLink = e['l'];
    else
        this.IntentLink = null;
}
LDAddMeInfo.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Profile !== null) o['p'] = this.Profile.encode();
    if(this.IntentLink !== null) o['l'] = this.IntentLink;
    return o;
}
LDAddMeInfo.prototype.Profile = null;
LDAddMeInfo.prototype.IntentLink = null;
function LDJoinFeedInfo(e) { 
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.FeedName = e['n'];
    else
        this.FeedName = null;
    if(e && (e['td'] !== null && e['td'] !== undefined))
        this.FeedThumbnailLink = e['td'];
    else
        this.FeedThumbnailLink = null;
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.IntentLink = e['l'];
    else
        this.IntentLink = null;
}
LDJoinFeedInfo.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.FeedName !== null) o['n'] = this.FeedName;
    if(this.FeedThumbnailLink !== null) o['td'] = this.FeedThumbnailLink;
    if(this.IntentLink !== null) o['l'] = this.IntentLink;
    return o;
}
LDJoinFeedInfo.prototype.FeedName = null;
LDJoinFeedInfo.prototype.FeedThumbnailLink = null;
LDJoinFeedInfo.prototype.IntentLink = null;
function LDDeviceToIdpRpcWrapper(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['q'] !== null && e['q'] !== undefined))
        this.Request = new LDDeviceToIdpRequestContainer(e['q']);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Response = new LDDeviceToIdpResponseContainer(e['r']);
}
LDDeviceToIdpRpcWrapper.prototype = new LDJSONLoggable();
LDDeviceToIdpRpcWrapper.prototype.constructor = LDDeviceToIdpRpcWrapper;
LDDeviceToIdpRpcWrapper.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Request !== null) o['q'] = this.Request.encode();
    if(this.Response !== null) o['r'] = this.Response.encode();
    return o;
}
LDDeviceToIdpRpcWrapper.prototype.Request = null;
LDDeviceToIdpRpcWrapper.prototype.Response = null;
function LDDeviceToClusterRpcWrapper(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['q'] !== null && e['q'] !== undefined))
        this.Request = new LDDeviceToClusterRequestContainer(e['q']);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Response = new LDDeviceToClusterResponseContainer(e['r']);
}
LDDeviceToClusterRpcWrapper.prototype = new LDJSONLoggable();
LDDeviceToClusterRpcWrapper.prototype.constructor = LDDeviceToClusterRpcWrapper;
LDDeviceToClusterRpcWrapper.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Request !== null) o['q'] = this.Request.encode();
    if(this.Response !== null) o['r'] = this.Response.encode();
    return o;
}
LDDeviceToClusterRpcWrapper.prototype.Request = null;
LDDeviceToClusterRpcWrapper.prototype.Response = null;
function LDRpcContext(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.DeviceId = new Buffer(e['b'], 'base64');
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.RootRequestId = new Buffer(e['r'], 'base64');
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.RequestId = new Buffer(e['i'], 'base64');
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.RequestingAccount = e['a'];
    else
        this.RequestingAccount = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.SourceCluster = e['c'];
    else
        this.SourceCluster = null;
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.ForwardedFromNode = e['f'];
    else
        this.ForwardedFromNode = null;
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.WriteSecure = e['s'];
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.RootIpAddress = e['l'];
    else
        this.RootIpAddress = null;
    if(e && (e['A'] !== null && e['A'] !== undefined))
        this.AppId = new Buffer(e['A'], 'base64');
}
LDRpcContext.prototype = new LDJSONLoggable();
LDRpcContext.prototype.constructor = LDRpcContext;
LDRpcContext.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.DeviceId !== null) o['b'] = this.DeviceId.toString('base64');
    if(this.RootRequestId !== null) o['r'] = this.RootRequestId.toString('base64');
    if(this.RequestId !== null) o['i'] = this.RequestId.toString('base64');
    if(this.RequestingAccount !== null) o['a'] = this.RequestingAccount;
    if(this.SourceCluster !== null) o['c'] = this.SourceCluster;
    if(this.ForwardedFromNode !== null) o['f'] = this.ForwardedFromNode;
    if(this.WriteSecure !== null) o['s'] = this.WriteSecure;
    if(this.RootIpAddress !== null) o['l'] = this.RootIpAddress;
    if(this.AppId !== null) o['A'] = this.AppId.toString('base64');
    return o;
}
LDRpcContext.prototype.DeviceId = null;
LDRpcContext.prototype.RootRequestId = null;
LDRpcContext.prototype.RequestId = null;
LDRpcContext.prototype.RequestingAccount = null;
LDRpcContext.prototype.SourceCluster = null;
LDRpcContext.prototype.ForwardedFromNode = null;
LDRpcContext.prototype.WriteSecure = null;
LDRpcContext.prototype.RootIpAddress = null;
LDRpcContext.prototype.AppId = null;
function LDHelloChallengeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.EphmeralKey = new Buffer(e['e'], 'base64');
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.SourceKey = new Buffer(e['k'], 'base64');
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.DestinationChallenge = new Buffer(e['c'], 'base64');
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.ApiKey = new Buffer(e['a'], 'base64');
}
LDHelloChallengeRequest.prototype = new LDJSONLoggable();
LDHelloChallengeRequest.prototype.constructor = LDHelloChallengeRequest;
LDHelloChallengeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.EphmeralKey !== null) o['e'] = this.EphmeralKey.toString('base64');
    if(this.SourceKey !== null) o['k'] = this.SourceKey.toString('base64');
    if(this.DestinationChallenge !== null) o['c'] = this.DestinationChallenge.toString('base64');
    if(this.ApiKey !== null) o['a'] = this.ApiKey.toString('base64');
    return o;
}
LDHelloChallengeRequest.prototype.EphmeralKey = null;
LDHelloChallengeRequest.prototype.SourceKey = null;
LDHelloChallengeRequest.prototype.DestinationChallenge = null;
LDHelloChallengeRequest.prototype.ApiKey = null;
function LDCompleteChallengeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.SourceResponse = new Buffer(e['r'], 'base64');
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Type = e['t'];
    else
        this.Type = null;
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Manufacturer = e['m'];
    else
        this.Manufacturer = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Model = e['d'];
    else
        this.Model = null;
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.OsVersion = e['o'];
    else
        this.OsVersion = null;
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.ClientVersion = e['v'];
    else
        this.ClientVersion = null;
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.Locale = e['l'];
    else
        this.Locale = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.AppChallengeResponse = new Buffer(e['c'], 'base64');
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.System = e['s'];
}
LDCompleteChallengeRequest.prototype = new LDJSONLoggable();
LDCompleteChallengeRequest.prototype.constructor = LDCompleteChallengeRequest;
LDCompleteChallengeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.SourceResponse !== null) o['r'] = this.SourceResponse.toString('base64');
    if(this.Type !== null) o['t'] = this.Type;
    if(this.Manufacturer !== null) o['m'] = this.Manufacturer;
    if(this.Model !== null) o['d'] = this.Model;
    if(this.OsVersion !== null) o['o'] = this.OsVersion;
    if(this.ClientVersion !== null) o['v'] = this.ClientVersion;
    if(this.Locale !== null) o['l'] = this.Locale;
    if(this.AppChallengeResponse !== null) o['c'] = this.AppChallengeResponse.toString('base64');
    if(this.System !== null) o['s'] = this.System;
    return o;
}
LDCompleteChallengeRequest.prototype.SourceResponse = null;
LDCompleteChallengeRequest.prototype.Type = null;
LDCompleteChallengeRequest.prototype.Manufacturer = null;
LDCompleteChallengeRequest.prototype.Model = null;
LDCompleteChallengeRequest.prototype.OsVersion = null;
LDCompleteChallengeRequest.prototype.ClientVersion = null;
LDCompleteChallengeRequest.prototype.Locale = null;
LDCompleteChallengeRequest.prototype.AppChallengeResponse = null;
LDCompleteChallengeRequest.prototype.System = null;
function LDPingRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.NextPingDelayMs = e['n'];
    else
        this.NextPingDelayMs = null;
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.LastRtt = e['l'];
}
LDPingRequest.prototype = new LDJSONLoggable();
LDPingRequest.prototype.constructor = LDPingRequest;
LDPingRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.NextPingDelayMs !== null) o['n'] = this.NextPingDelayMs;
    if(this.LastRtt !== null) o['l'] = this.LastRtt;
    return o;
}
LDPingRequest.prototype.NextPingDelayMs = null;
LDPingRequest.prototype.LastRtt = null;
function LDRequestProtocolBase(e) { 
    LDJSONLoggable.call(this, e);
}
LDRequestProtocolBase.prototype = new LDJSONLoggable();
LDRequestProtocolBase.prototype.constructor = LDRequestProtocolBase;
LDRequestProtocolBase.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDDeviceToIdpSignupRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.RegisterWithTokenRequest = new LDRegisterWithTokenRequest(e['r']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ConfirmTokenRequest = new LDConfirmTokenRequest(e['c']);
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.RegisterWithOAuthRequest = new LDRegisterWithOAuthRequest(e['o']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.GetLinkedIdentitiesRequest = new LDGetLinkedIdentitiesRequest(e['i']);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.CheckLinkedIdentityRequest = new LDCheckIdentityLinkedRequest(e['l']);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.UnlinkIdentityRequest = new LDUnlinkIdentityRequest(e['u']);
    if(e && (e['O'] !== null && e['O'] !== undefined))
        this.LinkOmletIdentityRequest = new LDLinkOmletIdentityRequest(e['O']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.GetAppSigninLinkRequest = new LDGetAppSigninLinkRequest(e['s']);
    if(e && (e['C'] !== null && e['C'] !== undefined))
        this.ConfirmAuthCodeRequest = new LDConfirmAuthCodeRequest(e['C']);
    if(e && (e['dp'] !== null && e['dp'] !== undefined))
        this.DeviceRegistrationStateChangedPush = new LDDeviceRegistrationStateChangedPush(e['dp']);
}
LDDeviceToIdpSignupRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToIdpSignupRequestProtocol.prototype.constructor = LDDeviceToIdpSignupRequestProtocol;
LDDeviceToIdpSignupRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.RegisterWithTokenRequest !== null) o['r'] = this.RegisterWithTokenRequest.encode();
    if(this.ConfirmTokenRequest !== null) o['c'] = this.ConfirmTokenRequest.encode();
    if(this.RegisterWithOAuthRequest !== null) o['o'] = this.RegisterWithOAuthRequest.encode();
    if(this.GetLinkedIdentitiesRequest !== null) o['i'] = this.GetLinkedIdentitiesRequest.encode();
    if(this.CheckLinkedIdentityRequest !== null) o['l'] = this.CheckLinkedIdentityRequest.encode();
    if(this.UnlinkIdentityRequest !== null) o['u'] = this.UnlinkIdentityRequest.encode();
    if(this.LinkOmletIdentityRequest !== null) o['O'] = this.LinkOmletIdentityRequest.encode();
    if(this.GetAppSigninLinkRequest !== null) o['s'] = this.GetAppSigninLinkRequest.encode();
    if(this.ConfirmAuthCodeRequest !== null) o['C'] = this.ConfirmAuthCodeRequest.encode();
    if(this.DeviceRegistrationStateChangedPush !== null) o['dp'] = this.DeviceRegistrationStateChangedPush.encode();
    return o;
}
LDDeviceToIdpSignupRequestProtocol.prototype.RegisterWithTokenRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.ConfirmTokenRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.RegisterWithOAuthRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.GetLinkedIdentitiesRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.CheckLinkedIdentityRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.UnlinkIdentityRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.LinkOmletIdentityRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.GetAppSigninLinkRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.ConfirmAuthCodeRequest = null;
LDDeviceToIdpSignupRequestProtocol.prototype.DeviceRegistrationStateChangedPush = null;
function LDDeviceToIdpAdministrativeRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.UnblockIdentity = new LDUnblockIdentityRequest(e['u']);
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.GetEmailLoginLink = new LDGetEmailLoginLinkRequest(e['e']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.GetDetailsByAccount = new LDGetAccountDetailsByAccountRequest(e['a']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.GetDetailsByIdentity = new LDGetAccountDetailsByIdentityRequest(e['i']);
    if(e && (e['I'] !== null && e['I'] !== undefined))
        this.GetIdentityRecordsRequest = new LDGetIdentityRecordsRequest(e['I']);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.ListFlaggedUsers = new LDListFlaggedUsersRequest(e['f']);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.ChangeUserName = new LDChangeUserNameRequest(e['n']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ChangeUserPicture = new LDChangeUserProfilePictureRequest(e['p']);
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.DisableGameChallenge = new LDDisableUserGameChallengeRequest(e['g']);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.LogUserOut = new LDLogUserOutRequest(e['l']);
}
LDDeviceToIdpAdministrativeRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToIdpAdministrativeRequestProtocol.prototype.constructor = LDDeviceToIdpAdministrativeRequestProtocol;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.UnblockIdentity !== null) o['u'] = this.UnblockIdentity.encode();
    if(this.GetEmailLoginLink !== null) o['e'] = this.GetEmailLoginLink.encode();
    if(this.GetDetailsByAccount !== null) o['a'] = this.GetDetailsByAccount.encode();
    if(this.GetDetailsByIdentity !== null) o['i'] = this.GetDetailsByIdentity.encode();
    if(this.GetIdentityRecordsRequest !== null) o['I'] = this.GetIdentityRecordsRequest.encode();
    if(this.ListFlaggedUsers !== null) o['f'] = this.ListFlaggedUsers.encode();
    if(this.ChangeUserName !== null) o['n'] = this.ChangeUserName.encode();
    if(this.ChangeUserPicture !== null) o['p'] = this.ChangeUserPicture.encode();
    if(this.DisableGameChallenge !== null) o['g'] = this.DisableGameChallenge.encode();
    if(this.LogUserOut !== null) o['l'] = this.LogUserOut.encode();
    return o;
}
LDDeviceToIdpAdministrativeRequestProtocol.prototype.UnblockIdentity = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.GetEmailLoginLink = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.GetDetailsByAccount = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.GetDetailsByIdentity = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.GetIdentityRecordsRequest = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.ListFlaggedUsers = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.ChangeUserName = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.ChangeUserPicture = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.DisableGameChallenge = null;
LDDeviceToIdpAdministrativeRequestProtocol.prototype.LogUserOut = null;
function LDHelloChallengeResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.SourceChallenge = new Buffer(e['c'], 'base64');
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.DestinationResponse = new Buffer(e['r'], 'base64');
}
LDHelloChallengeResponse.prototype = new LDJSONLoggable();
LDHelloChallengeResponse.prototype.constructor = LDHelloChallengeResponse;
LDHelloChallengeResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.SourceChallenge !== null) o['c'] = this.SourceChallenge.toString('base64');
    if(this.DestinationResponse !== null) o['r'] = this.DestinationResponse.toString('base64');
    return o;
}
LDHelloChallengeResponse.prototype.SourceChallenge = null;
LDHelloChallengeResponse.prototype.DestinationResponse = null;
function LDCompleteChallengeResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.LocationIndicator = e['l'];
    else
        this.LocationIndicator = null;
}
LDCompleteChallengeResponse.prototype = new LDJSONLoggable();
LDCompleteChallengeResponse.prototype.constructor = LDCompleteChallengeResponse;
LDCompleteChallengeResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.LocationIndicator !== null) o['l'] = this.LocationIndicator;
    return o;
}
LDCompleteChallengeResponse.prototype.LocationIndicator = null;
function LDSimpleResponse(e) { 
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Value = e['v'];
}
LDSimpleResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Value !== null) o['v'] = this.Value;
    return o;
}
LDSimpleResponse.prototype.Value = null;
function LDPingResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.ObservedIp = e['i'];
    else
        this.ObservedIp = null;
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.UtcMillis = e['t'];
    else
        this.UtcMillis = null;
}
LDPingResponse.prototype = new LDJSONLoggable();
LDPingResponse.prototype.constructor = LDPingResponse;
LDPingResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ObservedIp !== null) o['i'] = this.ObservedIp;
    if(this.UtcMillis !== null) o['t'] = this.UtcMillis;
    return o;
}
LDPingResponse.prototype.ObservedIp = null;
LDPingResponse.prototype.UtcMillis = null;
function LDResponseProtocolBase(e) { 
    LDJSONLoggable.call(this, e);
}
LDResponseProtocolBase.prototype = new LDJSONLoggable();
LDResponseProtocolBase.prototype.constructor = LDResponseProtocolBase;
LDResponseProtocolBase.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDDeviceToIdpSignupResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AccountDetailsResponse = new LDAccountDetailsResponse(e['a']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.GetLinkedIdentitiesResponse = new LDGetLinkedIdentitiesResponse(e['i']);
}
LDDeviceToIdpSignupResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToIdpSignupResponseProtocol.prototype.constructor = LDDeviceToIdpSignupResponseProtocol;
LDDeviceToIdpSignupResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.AccountDetailsResponse !== null) o['a'] = this.AccountDetailsResponse.encode();
    if(this.GetLinkedIdentitiesResponse !== null) o['i'] = this.GetLinkedIdentitiesResponse.encode();
    return o;
}
LDDeviceToIdpSignupResponseProtocol.prototype.AccountDetailsResponse = null;
LDDeviceToIdpSignupResponseProtocol.prototype.GetLinkedIdentitiesResponse = null;
function LDDeviceToIdpAdministrativeResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AccountDetailsResponse = new LDAccountDetailsResponse(e['a']);
    if(e && (e['I'] !== null && e['I'] !== undefined))
        this.GetIdentityRecordsResponse = new LDGetIdentityRecordsResponse(e['I']);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.ListFlaggedUsers = new LDListFlaggedUsersResponse(e['f']);
}
LDDeviceToIdpAdministrativeResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToIdpAdministrativeResponseProtocol.prototype.constructor = LDDeviceToIdpAdministrativeResponseProtocol;
LDDeviceToIdpAdministrativeResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.AccountDetailsResponse !== null) o['a'] = this.AccountDetailsResponse.encode();
    if(this.GetIdentityRecordsResponse !== null) o['I'] = this.GetIdentityRecordsResponse.encode();
    if(this.ListFlaggedUsers !== null) o['f'] = this.ListFlaggedUsers.encode();
    return o;
}
LDDeviceToIdpAdministrativeResponseProtocol.prototype.AccountDetailsResponse = null;
LDDeviceToIdpAdministrativeResponseProtocol.prototype.GetIdentityRecordsResponse = null;
LDDeviceToIdpAdministrativeResponseProtocol.prototype.ListFlaggedUsers = null;
function LDDeviceToClusterMessageRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.CreateFeed = new LDCreateFeedRequest(e['c']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.GetMessagesSince = new LDGetMessagesSinceRequest(e['s']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.GetMessagesBefore = new LDGetMessagesBeforeRequest(e['b']);
    if(e && (e['T'] !== null && e['T'] !== undefined))
        this.GetMessagesByType = new LDGetMessagesByTypeRequest(e['T']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.GetMessageById = new LDGetMessageByIdRequest(e['i']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AddMessage = new LDAddMessageRequest(e['a']);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.UpdateMessage = new LDUpdateMessageRequest(e['u']);
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.OverwriteMessage = new LDOverwriteMessageRequest(e['o']);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.DeleteMessage = new LDDeleteMessageRequest(e['d']);
    if(e && (e['S'] !== null && e['S'] !== undefined))
        this.SubscribeFeed = new LDSubscribeFeedRequest(e['S']);
    if(e && (e['U'] !== null && e['U'] !== undefined))
        this.UnsubscribeFeed = new LDUnsubscribeFeedRequest(e['U']);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.SubscribeFeedRealtime = new LDSubscribeFeedRealtimeRequest(e['l']);
    if(e && (e['q'] !== null && e['q'] !== undefined))
        this.UnsubscribeFeedRealtime = new LDUnsubscribeFeedRealtimeRequest(e['q']);
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.AddMember = new LDAddMemberRequest(e['g']);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.RemoveMember = new LDRemoveMemberRequest(e['r']);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.SetFeedName = new LDSetFeedNameRequest(e['n']);
    if(e && (e['h'] !== null && e['h'] !== undefined))
        this.SetFeedThumbnail = new LDSetFeedThumbnailRequest(e['h']);
    if(e && (e['L'] !== null && e['L'] !== undefined))
        this.SendRealtime = new LDSendRealtimeRequest(e['L']);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.AddPendingInvitation = new LDAddPendingInvitationRequest(e['f']);
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.RemovePendingInvitation = new LDRemovePendingInvitationRequest(e['e']);
    if(e && (e['j'] !== null && e['j'] !== undefined))
        this.GetJoinFeedLink = new LDGetJoinFeedLinkRequest(e['j']);
    if(e && (e['J'] !== null && e['J'] !== undefined))
        this.JoinFeed = new LDJoinFeedRequest(e['J']);
    if(e && (e['B'] !== null && e['B'] !== undefined))
        this.JoinBroadcast = new LDJoinBroadcastRequest(e['B']);
    if(e && (e['x'] !== null && e['x'] !== undefined))
        this.DefaultAccess = new LDSetDefaultAccessRequest(e['x']);
    if(e && (e['gf'] !== null && e['gf'] !== undefined))
        this.GetFeedDetails = new LDGetPublicFeedDetailsRequest(e['gf']);
    if(e && (e['D'] !== null && e['D'] !== undefined))
        this.ApplyDocumentRequest = new LDApplyDocumentTransformRequest(e['D']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.MessageDeliveryPush = new LDMessageDeliveryPush(e['p']);
    if(e && (e['P'] !== null && e['P'] !== undefined))
        this.RealtimeMessageDeliveryPush = new LDRealtimeMessageDeliveryPush(e['P']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.TerminatedPush = new LDMessageTerminatedPush(e['t']);
}
LDDeviceToClusterMessageRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterMessageRequestProtocol.prototype.constructor = LDDeviceToClusterMessageRequestProtocol;
LDDeviceToClusterMessageRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.CreateFeed !== null) o['c'] = this.CreateFeed.encode();
    if(this.GetMessagesSince !== null) o['s'] = this.GetMessagesSince.encode();
    if(this.GetMessagesBefore !== null) o['b'] = this.GetMessagesBefore.encode();
    if(this.GetMessagesByType !== null) o['T'] = this.GetMessagesByType.encode();
    if(this.GetMessageById !== null) o['i'] = this.GetMessageById.encode();
    if(this.AddMessage !== null) o['a'] = this.AddMessage.encode();
    if(this.UpdateMessage !== null) o['u'] = this.UpdateMessage.encode();
    if(this.OverwriteMessage !== null) o['o'] = this.OverwriteMessage.encode();
    if(this.DeleteMessage !== null) o['d'] = this.DeleteMessage.encode();
    if(this.SubscribeFeed !== null) o['S'] = this.SubscribeFeed.encode();
    if(this.UnsubscribeFeed !== null) o['U'] = this.UnsubscribeFeed.encode();
    if(this.SubscribeFeedRealtime !== null) o['l'] = this.SubscribeFeedRealtime.encode();
    if(this.UnsubscribeFeedRealtime !== null) o['q'] = this.UnsubscribeFeedRealtime.encode();
    if(this.AddMember !== null) o['g'] = this.AddMember.encode();
    if(this.RemoveMember !== null) o['r'] = this.RemoveMember.encode();
    if(this.SetFeedName !== null) o['n'] = this.SetFeedName.encode();
    if(this.SetFeedThumbnail !== null) o['h'] = this.SetFeedThumbnail.encode();
    if(this.SendRealtime !== null) o['L'] = this.SendRealtime.encode();
    if(this.AddPendingInvitation !== null) o['f'] = this.AddPendingInvitation.encode();
    if(this.RemovePendingInvitation !== null) o['e'] = this.RemovePendingInvitation.encode();
    if(this.GetJoinFeedLink !== null) o['j'] = this.GetJoinFeedLink.encode();
    if(this.JoinFeed !== null) o['J'] = this.JoinFeed.encode();
    if(this.JoinBroadcast !== null) o['B'] = this.JoinBroadcast.encode();
    if(this.DefaultAccess !== null) o['x'] = this.DefaultAccess.encode();
    if(this.GetFeedDetails !== null) o['gf'] = this.GetFeedDetails.encode();
    if(this.ApplyDocumentRequest !== null) o['D'] = this.ApplyDocumentRequest.encode();
    if(this.MessageDeliveryPush !== null) o['p'] = this.MessageDeliveryPush.encode();
    if(this.RealtimeMessageDeliveryPush !== null) o['P'] = this.RealtimeMessageDeliveryPush.encode();
    if(this.TerminatedPush !== null) o['t'] = this.TerminatedPush.encode();
    return o;
}
LDDeviceToClusterMessageRequestProtocol.prototype.CreateFeed = null;
LDDeviceToClusterMessageRequestProtocol.prototype.GetMessagesSince = null;
LDDeviceToClusterMessageRequestProtocol.prototype.GetMessagesBefore = null;
LDDeviceToClusterMessageRequestProtocol.prototype.GetMessagesByType = null;
LDDeviceToClusterMessageRequestProtocol.prototype.GetMessageById = null;
LDDeviceToClusterMessageRequestProtocol.prototype.AddMessage = null;
LDDeviceToClusterMessageRequestProtocol.prototype.UpdateMessage = null;
LDDeviceToClusterMessageRequestProtocol.prototype.OverwriteMessage = null;
LDDeviceToClusterMessageRequestProtocol.prototype.DeleteMessage = null;
LDDeviceToClusterMessageRequestProtocol.prototype.SubscribeFeed = null;
LDDeviceToClusterMessageRequestProtocol.prototype.UnsubscribeFeed = null;
LDDeviceToClusterMessageRequestProtocol.prototype.SubscribeFeedRealtime = null;
LDDeviceToClusterMessageRequestProtocol.prototype.UnsubscribeFeedRealtime = null;
LDDeviceToClusterMessageRequestProtocol.prototype.AddMember = null;
LDDeviceToClusterMessageRequestProtocol.prototype.RemoveMember = null;
LDDeviceToClusterMessageRequestProtocol.prototype.SetFeedName = null;
LDDeviceToClusterMessageRequestProtocol.prototype.SetFeedThumbnail = null;
LDDeviceToClusterMessageRequestProtocol.prototype.SendRealtime = null;
LDDeviceToClusterMessageRequestProtocol.prototype.AddPendingInvitation = null;
LDDeviceToClusterMessageRequestProtocol.prototype.RemovePendingInvitation = null;
LDDeviceToClusterMessageRequestProtocol.prototype.GetJoinFeedLink = null;
LDDeviceToClusterMessageRequestProtocol.prototype.JoinFeed = null;
LDDeviceToClusterMessageRequestProtocol.prototype.JoinBroadcast = null;
LDDeviceToClusterMessageRequestProtocol.prototype.DefaultAccess = null;
LDDeviceToClusterMessageRequestProtocol.prototype.GetFeedDetails = null;
LDDeviceToClusterMessageRequestProtocol.prototype.ApplyDocumentRequest = null;
LDDeviceToClusterMessageRequestProtocol.prototype.MessageDeliveryPush = null;
LDDeviceToClusterMessageRequestProtocol.prototype.RealtimeMessageDeliveryPush = null;
LDDeviceToClusterMessageRequestProtocol.prototype.TerminatedPush = null;
function LDDeviceToClusterInboxRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.GetFeedState = new LDGetFeedStateRequest(e['s']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.SetFeedAcceptance = new LDSetFeedAcceptanceRequest(e['a']);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.GetDirtyFeeds = new LDGetDirtyFeedsRequest(e['d']);
    if(e && (e['S'] !== null && e['S'] !== undefined))
        this.SubscribeAccount = new LDSubscribeForAccountInboxRequest(e['S']);
    if(e && (e['U'] !== null && e['U'] !== undefined))
        this.UnsubscribeAccount = new LDUnsubscribeForAccountInboxRequest(e['U']);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.RegisterPushNotificationKey = new LDRegisterPushNotificationKeyRequest(e['r']);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.MessagePush = new LDInboxDeliveryMessagePush(e['m']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.TerminatedPush = new LDInboxDeliveryTerminatedPush(e['t']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.SetAppleBadgeCount = new LDSetAppleBadgeCountRequest(e['b']);
}
LDDeviceToClusterInboxRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterInboxRequestProtocol.prototype.constructor = LDDeviceToClusterInboxRequestProtocol;
LDDeviceToClusterInboxRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.GetFeedState !== null) o['s'] = this.GetFeedState.encode();
    if(this.SetFeedAcceptance !== null) o['a'] = this.SetFeedAcceptance.encode();
    if(this.GetDirtyFeeds !== null) o['d'] = this.GetDirtyFeeds.encode();
    if(this.SubscribeAccount !== null) o['S'] = this.SubscribeAccount.encode();
    if(this.UnsubscribeAccount !== null) o['U'] = this.UnsubscribeAccount.encode();
    if(this.RegisterPushNotificationKey !== null) o['r'] = this.RegisterPushNotificationKey.encode();
    if(this.MessagePush !== null) o['m'] = this.MessagePush.encode();
    if(this.TerminatedPush !== null) o['t'] = this.TerminatedPush.encode();
    if(this.SetAppleBadgeCount !== null) o['b'] = this.SetAppleBadgeCount.encode();
    return o;
}
LDDeviceToClusterInboxRequestProtocol.prototype.GetFeedState = null;
LDDeviceToClusterInboxRequestProtocol.prototype.SetFeedAcceptance = null;
LDDeviceToClusterInboxRequestProtocol.prototype.GetDirtyFeeds = null;
LDDeviceToClusterInboxRequestProtocol.prototype.SubscribeAccount = null;
LDDeviceToClusterInboxRequestProtocol.prototype.UnsubscribeAccount = null;
LDDeviceToClusterInboxRequestProtocol.prototype.RegisterPushNotificationKey = null;
LDDeviceToClusterInboxRequestProtocol.prototype.MessagePush = null;
LDDeviceToClusterInboxRequestProtocol.prototype.TerminatedPush = null;
LDDeviceToClusterInboxRequestProtocol.prototype.SetAppleBadgeCount = null;
function LDClusterOrDeviceToClusterBlobRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['ut'] !== null && e['ut'] !== undefined))
        this.GetUploadTicket = new LDGetUploadTicketRequest(e['ut']);
    if(e && (e['vc'] !== null && e['vc'] !== undefined))
        this.VerifyUploadCompleted = new LDVerifyUploadCompletedRequest(e['vc']);
    if(e && (e['dt'] !== null && e['dt'] !== undefined))
        this.GetDownloadTicket = new LDGetDownloadTicketRequest(e['dt']);
    if(e && (e['ve'] !== null && e['ve'] !== undefined))
        this.VerifyExistsAndPermanence = new LDVerifyExistsAndPermanenceRequest(e['ve']);
}
LDClusterOrDeviceToClusterBlobRequestProtocol.prototype = new LDRequestProtocolBase();
LDClusterOrDeviceToClusterBlobRequestProtocol.prototype.constructor = LDClusterOrDeviceToClusterBlobRequestProtocol;
LDClusterOrDeviceToClusterBlobRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.GetUploadTicket !== null) o['ut'] = this.GetUploadTicket.encode();
    if(this.VerifyUploadCompleted !== null) o['vc'] = this.VerifyUploadCompleted.encode();
    if(this.GetDownloadTicket !== null) o['dt'] = this.GetDownloadTicket.encode();
    if(this.VerifyExistsAndPermanence !== null) o['ve'] = this.VerifyExistsAndPermanence.encode();
    return o;
}
LDClusterOrDeviceToClusterBlobRequestProtocol.prototype.GetUploadTicket = null;
LDClusterOrDeviceToClusterBlobRequestProtocol.prototype.VerifyUploadCompleted = null;
LDClusterOrDeviceToClusterBlobRequestProtocol.prototype.GetDownloadTicket = null;
LDClusterOrDeviceToClusterBlobRequestProtocol.prototype.VerifyExistsAndPermanence = null;
function LDDeviceToClusterContactRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.OverwriteContactsRequest = new LDOverwriteContactRequest(e['o']);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.RemoveContactRequest = new LDRemoveContactRequest(e['r']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.BlockContactRequest = new LDBlockContactRequest(e['b']);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.UnblockContactRequest = new LDUnblockContactRequest(e['u']);
}
LDDeviceToClusterContactRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterContactRequestProtocol.prototype.constructor = LDDeviceToClusterContactRequestProtocol;
LDDeviceToClusterContactRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.OverwriteContactsRequest !== null) o['o'] = this.OverwriteContactsRequest.encode();
    if(this.RemoveContactRequest !== null) o['r'] = this.RemoveContactRequest.encode();
    if(this.BlockContactRequest !== null) o['b'] = this.BlockContactRequest.encode();
    if(this.UnblockContactRequest !== null) o['u'] = this.UnblockContactRequest.encode();
    return o;
}
LDDeviceToClusterContactRequestProtocol.prototype.OverwriteContactsRequest = null;
LDDeviceToClusterContactRequestProtocol.prototype.RemoveContactRequest = null;
LDDeviceToClusterContactRequestProtocol.prototype.BlockContactRequest = null;
LDDeviceToClusterContactRequestProtocol.prototype.UnblockContactRequest = null;
function LDDeviceToClusterProfileRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.GetProfileDetailsRequest = new LDGetProfileDetailsRequest(e['p']);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.SetNameRequest = new LDSetProfileNameRequest(e['n']);
    if(e && (e['sp'] !== null && e['sp'] !== undefined))
        this.SetProfilePictureRequest = new LDSetProfilePictureRequest(e['sp']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.GetContactProfileRequest = new LDGetOmletContactProfileRequest(e['c']);
    if(e && (e['aip'] !== null && e['aip'] !== undefined))
        this.AddItemsToProfileRequest = new LDAddItemsToProfileRequest(e['aip']);
    if(e && (e['rip'] !== null && e['rip'] !== undefined))
        this.RemoveItemsFromProfileRequest = new LDRemoveItemsFromProfileRequest(e['rip']);
    if(e && (e['afp'] !== null && e['afp'] !== undefined))
        this.AddFeaturesToProfileRequest = new LDAddFeaturesToProfileRequest(e['afp']);
    if(e && (e['rfp'] !== null && e['rfp'] !== undefined))
        this.RemoveFeaturesFromProfileRequest = new LDRemoveFeaturesFromProfileRequest(e['rfp']);
    if(e && (e['pps'] !== null && e['pps'] !== undefined))
        this.GetProfilePublicStateRequest = new LDGetProfilePublicStateRequest(e['pps']);
    if(e && (e['ppp'] !== null && e['ppp'] !== undefined))
        this.GetProfileDetailsAndPublicStateRequest = new LDGetContactProfileAndPublicStateRequest(e['ppp']);
}
LDDeviceToClusterProfileRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterProfileRequestProtocol.prototype.constructor = LDDeviceToClusterProfileRequestProtocol;
LDDeviceToClusterProfileRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.GetProfileDetailsRequest !== null) o['p'] = this.GetProfileDetailsRequest.encode();
    if(this.SetNameRequest !== null) o['n'] = this.SetNameRequest.encode();
    if(this.SetProfilePictureRequest !== null) o['sp'] = this.SetProfilePictureRequest.encode();
    if(this.GetContactProfileRequest !== null) o['c'] = this.GetContactProfileRequest.encode();
    if(this.AddItemsToProfileRequest !== null) o['aip'] = this.AddItemsToProfileRequest.encode();
    if(this.RemoveItemsFromProfileRequest !== null) o['rip'] = this.RemoveItemsFromProfileRequest.encode();
    if(this.AddFeaturesToProfileRequest !== null) o['afp'] = this.AddFeaturesToProfileRequest.encode();
    if(this.RemoveFeaturesFromProfileRequest !== null) o['rfp'] = this.RemoveFeaturesFromProfileRequest.encode();
    if(this.GetProfilePublicStateRequest !== null) o['pps'] = this.GetProfilePublicStateRequest.encode();
    if(this.GetProfileDetailsAndPublicStateRequest !== null) o['ppp'] = this.GetProfileDetailsAndPublicStateRequest.encode();
    return o;
}
LDDeviceToClusterProfileRequestProtocol.prototype.GetProfileDetailsRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.SetNameRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.SetProfilePictureRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.GetContactProfileRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.AddItemsToProfileRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.RemoveItemsFromProfileRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.AddFeaturesToProfileRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.RemoveFeaturesFromProfileRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.GetProfilePublicStateRequest = null;
LDDeviceToClusterProfileRequestProtocol.prototype.GetProfileDetailsAndPublicStateRequest = null;
function LDDeviceToClusterAddressBookRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.UploadEntriesRequest = new LDUploadAddressBookEntriesRequest(e['u']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.GetContactProfileRequest = new LDGetContactProfileRequest(e['c']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.GetAddMeLinkRequest = new LDGetAddMeLinkRequest(e['a']);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.MutualAddContact = new LDMutualAddContactByTokenRequest(e['m']);
}
LDDeviceToClusterAddressBookRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterAddressBookRequestProtocol.prototype.constructor = LDDeviceToClusterAddressBookRequestProtocol;
LDDeviceToClusterAddressBookRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.UploadEntriesRequest !== null) o['u'] = this.UploadEntriesRequest.encode();
    if(this.GetContactProfileRequest !== null) o['c'] = this.GetContactProfileRequest.encode();
    if(this.GetAddMeLinkRequest !== null) o['a'] = this.GetAddMeLinkRequest.encode();
    if(this.MutualAddContact !== null) o['m'] = this.MutualAddContact.encode();
    return o;
}
LDDeviceToClusterAddressBookRequestProtocol.prototype.UploadEntriesRequest = null;
LDDeviceToClusterAddressBookRequestProtocol.prototype.GetContactProfileRequest = null;
LDDeviceToClusterAddressBookRequestProtocol.prototype.GetAddMeLinkRequest = null;
LDDeviceToClusterAddressBookRequestProtocol.prototype.MutualAddContact = null;
function LDDeviceToClusterOmletItemStoreRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['cr'] !== null && e['cr'] !== undefined))
        this.CreateItemInfoRequest = new LDCreateItemInfoRequest(e['cr']);
    if(e && (e['uu'] !== null && e['uu'] !== undefined))
        this.UserUpdateItemInfoRequest = new LDUserUpdateItemInfoRequest(e['uu']);
    if(e && (e['su'] !== null && e['su'] !== undefined))
        this.SystemUpdateItemInfoRequest = new LDSystemUpdateItemInfoRequest(e['su']);
    if(e && (e['ga'] !== null && e['ga'] !== undefined))
        this.GetItemInfoRequest = new LDGetItemInfoRequest(e['ga']);
    if(e && (e['re'] !== null && e['re'] !== undefined))
        this.ReviewItemRequest = new LDReviewItemRequest(e['re']);
    if(e && (e['pu'] !== null && e['pu'] !== undefined))
        this.PublishItemRequest = new LDPublishItemRequest(e['pu']);
    if(e && (e['un'] !== null && e['un'] !== undefined))
        this.UnpublishItemRequest = new LDUnpublishItemRequest(e['un']);
    if(e && (e['de'] !== null && e['de'] !== undefined))
        this.DeleteItemRequest = new LDDeleteItemRequest(e['de']);
    if(e && (e['lc'] !== null && e['lc'] !== undefined))
        this.ListItemsForAccountRequest = new LDListItemsForAccountRequest(e['lc']);
    if(e && (e['la'] !== null && e['la'] !== undefined))
        this.ListAllItemsRequest = new LDListAllItemsRequest(e['la']);
    if(e && (e['lp'] !== null && e['lp'] !== undefined))
        this.ListPublishedItemsRequest = new LDListPublishedItemsRequest(e['lp']);
    if(e && (e['gg'] !== null && e['gg'] !== undefined))
        this.GenerateGrantForItemRequest = new LDGenerateGrantForItemRequest(e['gg']);
    if(e && (e['gig'] !== null && e['gig'] !== undefined))
        this.GetItemUsingGrantRequest = new LDGetItemUsingGrantRequest(e['gig']);
    if(e && (e['dihg'] !== null && e['dihg'] !== undefined))
        this.DoesItemHaveGrantRequest = new LDDoesItemHaveGrantRequest(e['dihg']);
    if(e && (e['dgfi'] !== null && e['dgfi'] !== undefined))
        this.DeleteGrantForItemRequest = new LDDeleteGrantForItemRequest(e['dgfi']);
    if(e && (e['gk'] !== null && e['gk'] !== undefined))
        this.GenerateApiKeyRequest = new LDGenerateApiKeyRequest(e['gk']);
    if(e && (e['dk'] !== null && e['dk'] !== undefined))
        this.DeactivateApiKeyRequest = new LDDeactivateApiKeyRequest(e['dk']);
    if(e && (e['lk'] !== null && e['lk'] !== undefined))
        this.ListApiKeysRequest = new LDListApiKeysRequest(e['lk']);
}
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.constructor = LDDeviceToClusterOmletItemStoreRequestProtocol;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.CreateItemInfoRequest !== null) o['cr'] = this.CreateItemInfoRequest.encode();
    if(this.UserUpdateItemInfoRequest !== null) o['uu'] = this.UserUpdateItemInfoRequest.encode();
    if(this.SystemUpdateItemInfoRequest !== null) o['su'] = this.SystemUpdateItemInfoRequest.encode();
    if(this.GetItemInfoRequest !== null) o['ga'] = this.GetItemInfoRequest.encode();
    if(this.ReviewItemRequest !== null) o['re'] = this.ReviewItemRequest.encode();
    if(this.PublishItemRequest !== null) o['pu'] = this.PublishItemRequest.encode();
    if(this.UnpublishItemRequest !== null) o['un'] = this.UnpublishItemRequest.encode();
    if(this.DeleteItemRequest !== null) o['de'] = this.DeleteItemRequest.encode();
    if(this.ListItemsForAccountRequest !== null) o['lc'] = this.ListItemsForAccountRequest.encode();
    if(this.ListAllItemsRequest !== null) o['la'] = this.ListAllItemsRequest.encode();
    if(this.ListPublishedItemsRequest !== null) o['lp'] = this.ListPublishedItemsRequest.encode();
    if(this.GenerateGrantForItemRequest !== null) o['gg'] = this.GenerateGrantForItemRequest.encode();
    if(this.GetItemUsingGrantRequest !== null) o['gig'] = this.GetItemUsingGrantRequest.encode();
    if(this.DoesItemHaveGrantRequest !== null) o['dihg'] = this.DoesItemHaveGrantRequest.encode();
    if(this.DeleteGrantForItemRequest !== null) o['dgfi'] = this.DeleteGrantForItemRequest.encode();
    if(this.GenerateApiKeyRequest !== null) o['gk'] = this.GenerateApiKeyRequest.encode();
    if(this.DeactivateApiKeyRequest !== null) o['dk'] = this.DeactivateApiKeyRequest.encode();
    if(this.ListApiKeysRequest !== null) o['lk'] = this.ListApiKeysRequest.encode();
    return o;
}
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.CreateItemInfoRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.UserUpdateItemInfoRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.SystemUpdateItemInfoRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.GetItemInfoRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.ReviewItemRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.PublishItemRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.UnpublishItemRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.DeleteItemRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.ListItemsForAccountRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.ListAllItemsRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.ListPublishedItemsRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.GenerateGrantForItemRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.GetItemUsingGrantRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.DoesItemHaveGrantRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.DeleteGrantForItemRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.GenerateApiKeyRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.DeactivateApiKeyRequest = null;
LDDeviceToClusterOmletItemStoreRequestProtocol.prototype.ListApiKeysRequest = null;
function LDDeviceToClusterDeviceRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.DeleteDeviceRequest = new LDDeleteDeviceRequest(e['d']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.AddDeviceRequest = new LDAddDeviceRequest(e['c']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.SetDingTimeoutRequest = new LDSetDingTimeoutRequest(e['t']);
}
LDDeviceToClusterDeviceRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterDeviceRequestProtocol.prototype.constructor = LDDeviceToClusterDeviceRequestProtocol;
LDDeviceToClusterDeviceRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.DeleteDeviceRequest !== null) o['d'] = this.DeleteDeviceRequest.encode();
    if(this.AddDeviceRequest !== null) o['c'] = this.AddDeviceRequest.encode();
    if(this.SetDingTimeoutRequest !== null) o['t'] = this.SetDingTimeoutRequest.encode();
    return o;
}
LDDeviceToClusterDeviceRequestProtocol.prototype.DeleteDeviceRequest = null;
LDDeviceToClusterDeviceRequestProtocol.prototype.AddDeviceRequest = null;
LDDeviceToClusterDeviceRequestProtocol.prototype.SetDingTimeoutRequest = null;
function LDDeviceToClusterCloudSyncRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.GetCloudConfigRequest = new LDGetCloudConfigRequest(e['g']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.SetCloudConfigRequest = new LDSetCloudConfigRequest(e['s']);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.RefreshCloudConfigRequest = new LDRefreshCloudConfigRequest(e['r']);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.DisconnectCloudSyncRequest = new LDDisconnectCloudSyncRequest(e['d']);
}
LDDeviceToClusterCloudSyncRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterCloudSyncRequestProtocol.prototype.constructor = LDDeviceToClusterCloudSyncRequestProtocol;
LDDeviceToClusterCloudSyncRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.GetCloudConfigRequest !== null) o['g'] = this.GetCloudConfigRequest.encode();
    if(this.SetCloudConfigRequest !== null) o['s'] = this.SetCloudConfigRequest.encode();
    if(this.RefreshCloudConfigRequest !== null) o['r'] = this.RefreshCloudConfigRequest.encode();
    if(this.DisconnectCloudSyncRequest !== null) o['d'] = this.DisconnectCloudSyncRequest.encode();
    return o;
}
LDDeviceToClusterCloudSyncRequestProtocol.prototype.GetCloudConfigRequest = null;
LDDeviceToClusterCloudSyncRequestProtocol.prototype.SetCloudConfigRequest = null;
LDDeviceToClusterCloudSyncRequestProtocol.prototype.RefreshCloudConfigRequest = null;
LDDeviceToClusterCloudSyncRequestProtocol.prototype.DisconnectCloudSyncRequest = null;
function LDDeviceToClusterGameChallengeRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.OptIn = new LDOptInForGamingRequest(e['o']);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.FindGamers = new LDFindGamersRequest(e['f']);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.UpdateChallengeLocation = new LDUpdateChallengeLocationRequest(e['u']);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.GameChallengeComplete = new LDGameChallengeCompleteRequest(e['d']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.GameChallenge = new LDGameChallengeRequest(e['c']);
    if(e && (e['co'] !== null && e['co'] !== undefined))
        this.CheckAccountOptedIn = new LDCheckAccountOptedInRequest(e['co']);
}
LDDeviceToClusterGameChallengeRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterGameChallengeRequestProtocol.prototype.constructor = LDDeviceToClusterGameChallengeRequestProtocol;
LDDeviceToClusterGameChallengeRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.OptIn !== null) o['o'] = this.OptIn.encode();
    if(this.FindGamers !== null) o['f'] = this.FindGamers.encode();
    if(this.UpdateChallengeLocation !== null) o['u'] = this.UpdateChallengeLocation.encode();
    if(this.GameChallengeComplete !== null) o['d'] = this.GameChallengeComplete.encode();
    if(this.GameChallenge !== null) o['c'] = this.GameChallenge.encode();
    if(this.CheckAccountOptedIn !== null) o['co'] = this.CheckAccountOptedIn.encode();
    return o;
}
LDDeviceToClusterGameChallengeRequestProtocol.prototype.OptIn = null;
LDDeviceToClusterGameChallengeRequestProtocol.prototype.FindGamers = null;
LDDeviceToClusterGameChallengeRequestProtocol.prototype.UpdateChallengeLocation = null;
LDDeviceToClusterGameChallengeRequestProtocol.prototype.GameChallengeComplete = null;
LDDeviceToClusterGameChallengeRequestProtocol.prototype.GameChallenge = null;
LDDeviceToClusterGameChallengeRequestProtocol.prototype.CheckAccountOptedIn = null;
function LDDeviceToClusterSubscriptionRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.GetSubscriptionUrl = new LDCreateSubscriptionRequest(e['u']);
}
LDDeviceToClusterSubscriptionRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterSubscriptionRequestProtocol.prototype.constructor = LDDeviceToClusterSubscriptionRequestProtocol;
LDDeviceToClusterSubscriptionRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.GetSubscriptionUrl !== null) o['u'] = this.GetSubscriptionUrl.encode();
    return o;
}
LDDeviceToClusterSubscriptionRequestProtocol.prototype.GetSubscriptionUrl = null;
function LDDeviceToClusterHighScoreRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['hs'] !== null && e['hs'] !== undefined))
        this.GetHighScoreRequest = new LDGetHighScoreRequest(e['hs']);
    if(e && (e['rs'] !== null && e['rs'] !== undefined))
        this.ReportScoreRequest = new LDReportScoreRequest(e['rs']);
    if(e && (e['ts'] !== null && e['ts'] !== undefined))
        this.GetTopScoresRequest = new LDGetTopScoresRequest(e['ts']);
}
LDDeviceToClusterHighScoreRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterHighScoreRequestProtocol.prototype.constructor = LDDeviceToClusterHighScoreRequestProtocol;
LDDeviceToClusterHighScoreRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.GetHighScoreRequest !== null) o['hs'] = this.GetHighScoreRequest.encode();
    if(this.ReportScoreRequest !== null) o['rs'] = this.ReportScoreRequest.encode();
    if(this.GetTopScoresRequest !== null) o['ts'] = this.GetTopScoresRequest.encode();
    return o;
}
LDDeviceToClusterHighScoreRequestProtocol.prototype.GetHighScoreRequest = null;
LDDeviceToClusterHighScoreRequestProtocol.prototype.ReportScoreRequest = null;
LDDeviceToClusterHighScoreRequestProtocol.prototype.GetTopScoresRequest = null;
function LDDeviceToClusterNearbyItemRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.BroadcastItemRequest = new LDBroadcastItemRequest(e['b']);
    if(e && (e['ub'] !== null && e['ub'] !== undefined))
        this.UnbroadcastItemRequest = new LDUnbroadcastItemRequest(e['ub']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.SubscribeForNearbyItemsRequest = new LDSubscribeForNearbyItemsRequest(e['s']);
    if(e && (e['us'] !== null && e['us'] !== undefined))
        this.UnsubscribeForNearbyItemsRequest = new LDUnsubscribeForNearbyItemsRequest(e['us']);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.FetchNearbyItemsRequest = new LDFetchNearbyItemsRequest(e['f']);
    if(e && (e['bp'] !== null && e['bp'] !== undefined))
        this.ItemBroadcastStateChangedPush = new LDItemBroadcastStateChangedPush(e['bp']);
    if(e && (e['st'] !== null && e['st'] !== undefined))
        this.SubscriptionTerminatedPush = new LDSubscriptionTerminatedPush(e['st']);
}
LDDeviceToClusterNearbyItemRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterNearbyItemRequestProtocol.prototype.constructor = LDDeviceToClusterNearbyItemRequestProtocol;
LDDeviceToClusterNearbyItemRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.BroadcastItemRequest !== null) o['b'] = this.BroadcastItemRequest.encode();
    if(this.UnbroadcastItemRequest !== null) o['ub'] = this.UnbroadcastItemRequest.encode();
    if(this.SubscribeForNearbyItemsRequest !== null) o['s'] = this.SubscribeForNearbyItemsRequest.encode();
    if(this.UnsubscribeForNearbyItemsRequest !== null) o['us'] = this.UnsubscribeForNearbyItemsRequest.encode();
    if(this.FetchNearbyItemsRequest !== null) o['f'] = this.FetchNearbyItemsRequest.encode();
    if(this.ItemBroadcastStateChangedPush !== null) o['bp'] = this.ItemBroadcastStateChangedPush.encode();
    if(this.SubscriptionTerminatedPush !== null) o['st'] = this.SubscriptionTerminatedPush.encode();
    return o;
}
LDDeviceToClusterNearbyItemRequestProtocol.prototype.BroadcastItemRequest = null;
LDDeviceToClusterNearbyItemRequestProtocol.prototype.UnbroadcastItemRequest = null;
LDDeviceToClusterNearbyItemRequestProtocol.prototype.SubscribeForNearbyItemsRequest = null;
LDDeviceToClusterNearbyItemRequestProtocol.prototype.UnsubscribeForNearbyItemsRequest = null;
LDDeviceToClusterNearbyItemRequestProtocol.prototype.FetchNearbyItemsRequest = null;
LDDeviceToClusterNearbyItemRequestProtocol.prototype.ItemBroadcastStateChangedPush = null;
LDDeviceToClusterNearbyItemRequestProtocol.prototype.SubscriptionTerminatedPush = null;
function LDDeviceToClusterMiscellaneousRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['wl'] !== null && e['wl'] !== undefined))
        this.UrlToStoryRequest = new LDUrlToStoryRequest(e['wl']);
    if(e && (e['is'] !== null && e['is'] !== undefined))
        this.ImageSearchRequest = new LDImageSearchRequest(e['is']);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.FailureReport = new LDFailureReportRequest(e['f']);
    if(e && (e['F'] !== null && e['F'] !== undefined))
        this.FlagUser = new LDFlagUserRequest(e['F']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.CreatePlaygroundRequest = new LDCreatePlaygroundRequest(e['p']);
}
LDDeviceToClusterMiscellaneousRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterMiscellaneousRequestProtocol.prototype.constructor = LDDeviceToClusterMiscellaneousRequestProtocol;
LDDeviceToClusterMiscellaneousRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.UrlToStoryRequest !== null) o['wl'] = this.UrlToStoryRequest.encode();
    if(this.ImageSearchRequest !== null) o['is'] = this.ImageSearchRequest.encode();
    if(this.FailureReport !== null) o['f'] = this.FailureReport.encode();
    if(this.FlagUser !== null) o['F'] = this.FlagUser.encode();
    if(this.CreatePlaygroundRequest !== null) o['p'] = this.CreatePlaygroundRequest.encode();
    return o;
}
LDDeviceToClusterMiscellaneousRequestProtocol.prototype.UrlToStoryRequest = null;
LDDeviceToClusterMiscellaneousRequestProtocol.prototype.ImageSearchRequest = null;
LDDeviceToClusterMiscellaneousRequestProtocol.prototype.FailureReport = null;
LDDeviceToClusterMiscellaneousRequestProtocol.prototype.FlagUser = null;
LDDeviceToClusterMiscellaneousRequestProtocol.prototype.CreatePlaygroundRequest = null;
function LDDeviceToClusterDirectMessagingRequestProtocol(e) { 
    LDRequestProtocolBase.call(this, e);
    if(e && (e['sf'] !== null && e['sf'] !== undefined))
        this.GetSmsFeedRequest = new LDGetDirectFeedRequest(e['sf']);
    if(e && (e['sm'] !== null && e['sm'] !== undefined))
        this.SendSmsMessageRequest = new LDSendDirectMessageRequest(e['sm']);
    if(e && (e['sp'] !== null && e['sp'] !== undefined))
        this.SetSmsParticipationRequest = new LDSetSmsParticipationRequest(e['sp']);
}
LDDeviceToClusterDirectMessagingRequestProtocol.prototype = new LDRequestProtocolBase();
LDDeviceToClusterDirectMessagingRequestProtocol.prototype.constructor = LDDeviceToClusterDirectMessagingRequestProtocol;
LDDeviceToClusterDirectMessagingRequestProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDRequestProtocolBase.prototype.encode.call(this, o);
    if(this.GetSmsFeedRequest !== null) o['sf'] = this.GetSmsFeedRequest.encode();
    if(this.SendSmsMessageRequest !== null) o['sm'] = this.SendSmsMessageRequest.encode();
    if(this.SetSmsParticipationRequest !== null) o['sp'] = this.SetSmsParticipationRequest.encode();
    return o;
}
LDDeviceToClusterDirectMessagingRequestProtocol.prototype.GetSmsFeedRequest = null;
LDDeviceToClusterDirectMessagingRequestProtocol.prototype.SendSmsMessageRequest = null;
LDDeviceToClusterDirectMessagingRequestProtocol.prototype.SetSmsParticipationRequest = null;
function LDDeviceToClusterMessageResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.GetMessageResponse = new LDGetMessageResponse(e['m']);
    if(e && (e['M'] !== null && e['M'] !== undefined))
        this.GetMessagesResponse = new LDGetMessagesResponse(e['M']);
    if(e && (e['C'] !== null && e['C'] !== undefined))
        this.GetMessagesWithContinuationResponse = new LDGetMessagesWithContinuationResponse(e['C']);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.GetJoinFeedLinkResponse = new LDGetJoinFeedLinkResponse(e['l']);
    if(e && (e['gf'] !== null && e['gf'] !== undefined))
        this.GetFeedDetails = new LDGetPublicFeedDetailsResponse(e['gf']);
}
LDDeviceToClusterMessageResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterMessageResponseProtocol.prototype.constructor = LDDeviceToClusterMessageResponseProtocol;
LDDeviceToClusterMessageResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.GetMessageResponse !== null) o['m'] = this.GetMessageResponse.encode();
    if(this.GetMessagesResponse !== null) o['M'] = this.GetMessagesResponse.encode();
    if(this.GetMessagesWithContinuationResponse !== null) o['C'] = this.GetMessagesWithContinuationResponse.encode();
    if(this.GetJoinFeedLinkResponse !== null) o['l'] = this.GetJoinFeedLinkResponse.encode();
    if(this.GetFeedDetails !== null) o['gf'] = this.GetFeedDetails.encode();
    return o;
}
LDDeviceToClusterMessageResponseProtocol.prototype.GetMessageResponse = null;
LDDeviceToClusterMessageResponseProtocol.prototype.GetMessagesResponse = null;
LDDeviceToClusterMessageResponseProtocol.prototype.GetMessagesWithContinuationResponse = null;
LDDeviceToClusterMessageResponseProtocol.prototype.GetJoinFeedLinkResponse = null;
LDDeviceToClusterMessageResponseProtocol.prototype.GetFeedDetails = null;
function LDDeviceToClusterInboxResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.DirtyFeeds = new LDDirtyFeedsResponse(e['d']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.FeedState = new LDFeedStateResponse(e['s']);
}
LDDeviceToClusterInboxResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterInboxResponseProtocol.prototype.constructor = LDDeviceToClusterInboxResponseProtocol;
LDDeviceToClusterInboxResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.DirtyFeeds !== null) o['d'] = this.DirtyFeeds.encode();
    if(this.FeedState !== null) o['s'] = this.FeedState.encode();
    return o;
}
LDDeviceToClusterInboxResponseProtocol.prototype.DirtyFeeds = null;
LDDeviceToClusterInboxResponseProtocol.prototype.FeedState = null;
function LDClusterOrDeviceToClusterBlobResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['ut'] !== null && e['ut'] !== undefined))
        this.GetUploadTicketResponse = new LDGetUploadTicketResponse(e['ut']);
    if(e && (e['dt'] !== null && e['dt'] !== undefined))
        this.GetDownloadTicketResponse = new LDGetDownloadTicketResponse(e['dt']);
}
LDClusterOrDeviceToClusterBlobResponseProtocol.prototype = new LDResponseProtocolBase();
LDClusterOrDeviceToClusterBlobResponseProtocol.prototype.constructor = LDClusterOrDeviceToClusterBlobResponseProtocol;
LDClusterOrDeviceToClusterBlobResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.GetUploadTicketResponse !== null) o['ut'] = this.GetUploadTicketResponse.encode();
    if(this.GetDownloadTicketResponse !== null) o['dt'] = this.GetDownloadTicketResponse.encode();
    return o;
}
LDClusterOrDeviceToClusterBlobResponseProtocol.prototype.GetUploadTicketResponse = null;
LDClusterOrDeviceToClusterBlobResponseProtocol.prototype.GetDownloadTicketResponse = null;
function LDDeviceToClusterContactResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactDetailsResponse = new LDGetContactDetailsResponse(e['c']);
}
LDDeviceToClusterContactResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterContactResponseProtocol.prototype.constructor = LDDeviceToClusterContactResponseProtocol;
LDDeviceToClusterContactResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.ContactDetailsResponse !== null) o['c'] = this.ContactDetailsResponse.encode();
    return o;
}
LDDeviceToClusterContactResponseProtocol.prototype.ContactDetailsResponse = null;
function LDDeviceToClusterProfileResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfileDetailsResponse = new LDGetProfileDetailsResponse(e['p']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactProfileResponse = new LDGetOmletContactProfileResponse(e['c']);
    if(e && (e['pps'] !== null && e['pps'] !== undefined))
        this.GetProfilePublicStateResponse = new LDGetProfilePublicStateResponse(e['pps']);
    if(e && (e['ppp'] !== null && e['ppp'] !== undefined))
        this.GetProfileDetailsAndPublicStateResponse = new LDGetContactProfileAndPublicStateResponse(e['ppp']);
}
LDDeviceToClusterProfileResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterProfileResponseProtocol.prototype.constructor = LDDeviceToClusterProfileResponseProtocol;
LDDeviceToClusterProfileResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.ProfileDetailsResponse !== null) o['p'] = this.ProfileDetailsResponse.encode();
    if(this.ContactProfileResponse !== null) o['c'] = this.ContactProfileResponse.encode();
    if(this.GetProfilePublicStateResponse !== null) o['pps'] = this.GetProfilePublicStateResponse.encode();
    if(this.GetProfileDetailsAndPublicStateResponse !== null) o['ppp'] = this.GetProfileDetailsAndPublicStateResponse.encode();
    return o;
}
LDDeviceToClusterProfileResponseProtocol.prototype.ProfileDetailsResponse = null;
LDDeviceToClusterProfileResponseProtocol.prototype.ContactProfileResponse = null;
LDDeviceToClusterProfileResponseProtocol.prototype.GetProfilePublicStateResponse = null;
LDDeviceToClusterProfileResponseProtocol.prototype.GetProfileDetailsAndPublicStateResponse = null;
function LDDeviceToClusterAddressBookResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactProfileResponse = new LDGetContactProfileResponse(e['c']);
}
LDDeviceToClusterAddressBookResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterAddressBookResponseProtocol.prototype.constructor = LDDeviceToClusterAddressBookResponseProtocol;
LDDeviceToClusterAddressBookResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.ContactProfileResponse !== null) o['c'] = this.ContactProfileResponse.encode();
    return o;
}
LDDeviceToClusterAddressBookResponseProtocol.prototype.ContactProfileResponse = null;
function LDDeviceToClusterOmletItemStoreResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.GetItemInfoResponse = new LDGetItemInfoResponse(e['g']);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.ListItemsResponse = new LDListItemsResponse(e['l']);
    if(e && (e['gg'] !== null && e['gg'] !== undefined))
        this.GenerateGrantForItemResponse = new LDGenerateGrantForItemResponse(e['gg']);
    if(e && (e['gk'] !== null && e['gk'] !== undefined))
        this.GenerateApiKeyResponse = new LDGenerateApiKeyResponse(e['gk']);
    if(e && (e['lk'] !== null && e['lk'] !== undefined))
        this.ListApiKeysResponse = new LDListApiKeysResponse(e['lk']);
}
LDDeviceToClusterOmletItemStoreResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterOmletItemStoreResponseProtocol.prototype.constructor = LDDeviceToClusterOmletItemStoreResponseProtocol;
LDDeviceToClusterOmletItemStoreResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.GetItemInfoResponse !== null) o['g'] = this.GetItemInfoResponse.encode();
    if(this.ListItemsResponse !== null) o['l'] = this.ListItemsResponse.encode();
    if(this.GenerateGrantForItemResponse !== null) o['gg'] = this.GenerateGrantForItemResponse.encode();
    if(this.GenerateApiKeyResponse !== null) o['gk'] = this.GenerateApiKeyResponse.encode();
    if(this.ListApiKeysResponse !== null) o['lk'] = this.ListApiKeysResponse.encode();
    return o;
}
LDDeviceToClusterOmletItemStoreResponseProtocol.prototype.GetItemInfoResponse = null;
LDDeviceToClusterOmletItemStoreResponseProtocol.prototype.ListItemsResponse = null;
LDDeviceToClusterOmletItemStoreResponseProtocol.prototype.GenerateGrantForItemResponse = null;
LDDeviceToClusterOmletItemStoreResponseProtocol.prototype.GenerateApiKeyResponse = null;
LDDeviceToClusterOmletItemStoreResponseProtocol.prototype.ListApiKeysResponse = null;
function LDDeviceToClusterDeviceResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
}
LDDeviceToClusterDeviceResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterDeviceResponseProtocol.prototype.constructor = LDDeviceToClusterDeviceResponseProtocol;
LDDeviceToClusterDeviceResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    return o;
}
function LDDeviceToClusterCloudSyncResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.GetClientCloudConfigResponse = new LDGetCloudConfigResponse(e['g']);
}
LDDeviceToClusterCloudSyncResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterCloudSyncResponseProtocol.prototype.constructor = LDDeviceToClusterCloudSyncResponseProtocol;
LDDeviceToClusterCloudSyncResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.GetClientCloudConfigResponse !== null) o['g'] = this.GetClientCloudConfigResponse.encode();
    return o;
}
LDDeviceToClusterCloudSyncResponseProtocol.prototype.GetClientCloudConfigResponse = null;
function LDClusterOrDeviceToClusterGameChallengeResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.FindGamers = new LDFindGamersResponse(e['f']);
}
LDClusterOrDeviceToClusterGameChallengeResponseProtocol.prototype = new LDResponseProtocolBase();
LDClusterOrDeviceToClusterGameChallengeResponseProtocol.prototype.constructor = LDClusterOrDeviceToClusterGameChallengeResponseProtocol;
LDClusterOrDeviceToClusterGameChallengeResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.FindGamers !== null) o['f'] = this.FindGamers.encode();
    return o;
}
LDClusterOrDeviceToClusterGameChallengeResponseProtocol.prototype.FindGamers = null;
function LDDeviceToClusterSubscriptionResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.GetSubscriptionUrl = new LDCreateSubscriptionResponse(e['u']);
}
LDDeviceToClusterSubscriptionResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterSubscriptionResponseProtocol.prototype.constructor = LDDeviceToClusterSubscriptionResponseProtocol;
LDDeviceToClusterSubscriptionResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.GetSubscriptionUrl !== null) o['u'] = this.GetSubscriptionUrl.encode();
    return o;
}
LDDeviceToClusterSubscriptionResponseProtocol.prototype.GetSubscriptionUrl = null;
function LDDeviceToClusterHighScoreResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.ScoreResponse = new LDScoreResponse(e['s']);
    if(e && (e['ss'] !== null && e['ss'] !== undefined))
        this.ScoresResponse = new LDScoresResponse(e['ss']);
}
LDDeviceToClusterHighScoreResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterHighScoreResponseProtocol.prototype.constructor = LDDeviceToClusterHighScoreResponseProtocol;
LDDeviceToClusterHighScoreResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.ScoreResponse !== null) o['s'] = this.ScoreResponse.encode();
    if(this.ScoresResponse !== null) o['ss'] = this.ScoresResponse.encode();
    return o;
}
LDDeviceToClusterHighScoreResponseProtocol.prototype.ScoreResponse = null;
LDDeviceToClusterHighScoreResponseProtocol.prototype.ScoresResponse = null;
function LDDeviceToClusterNearbyItemResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.BroadcastItemResponse = new LDBroadcastItemResponse(e['b']);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.FetchNearbyItemsResponse = new LDFetchNearbyItemsResponse(e['f']);
}
LDDeviceToClusterNearbyItemResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterNearbyItemResponseProtocol.prototype.constructor = LDDeviceToClusterNearbyItemResponseProtocol;
LDDeviceToClusterNearbyItemResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.BroadcastItemResponse !== null) o['b'] = this.BroadcastItemResponse.encode();
    if(this.FetchNearbyItemsResponse !== null) o['f'] = this.FetchNearbyItemsResponse.encode();
    return o;
}
LDDeviceToClusterNearbyItemResponseProtocol.prototype.BroadcastItemResponse = null;
LDDeviceToClusterNearbyItemResponseProtocol.prototype.FetchNearbyItemsResponse = null;
function LDDeviceToClusterMiscellaneousResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['wl'] !== null && e['wl'] !== undefined))
        this.UrlToStoryResponse = new LDUrlToStoryResponse(e['wl']);
    if(e && (e['is'] !== null && e['is'] !== undefined))
        this.ImageSearchResponse = new LDImageSearchResponse(e['is']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.CreatePlaygroundResponse = new LDCreatePlaygroundResponse(e['p']);
}
LDDeviceToClusterMiscellaneousResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterMiscellaneousResponseProtocol.prototype.constructor = LDDeviceToClusterMiscellaneousResponseProtocol;
LDDeviceToClusterMiscellaneousResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.UrlToStoryResponse !== null) o['wl'] = this.UrlToStoryResponse.encode();
    if(this.ImageSearchResponse !== null) o['is'] = this.ImageSearchResponse.encode();
    if(this.CreatePlaygroundResponse !== null) o['p'] = this.CreatePlaygroundResponse.encode();
    return o;
}
LDDeviceToClusterMiscellaneousResponseProtocol.prototype.UrlToStoryResponse = null;
LDDeviceToClusterMiscellaneousResponseProtocol.prototype.ImageSearchResponse = null;
LDDeviceToClusterMiscellaneousResponseProtocol.prototype.CreatePlaygroundResponse = null;
function LDDeviceToClusterDirectMessagingResponseProtocol(e) { 
    LDResponseProtocolBase.call(this, e);
    if(e && (e['gs'] !== null && e['gs'] !== undefined))
        this.GetSmsFeedResponse = new LDGetDirectFeedResponse(e['gs']);
    if(e && (e['sm'] !== null && e['sm'] !== undefined))
        this.SendSmsMessageResponse = new LDSendDirectMessageResponse(e['sm']);
}
LDDeviceToClusterDirectMessagingResponseProtocol.prototype = new LDResponseProtocolBase();
LDDeviceToClusterDirectMessagingResponseProtocol.prototype.constructor = LDDeviceToClusterDirectMessagingResponseProtocol;
LDDeviceToClusterDirectMessagingResponseProtocol.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDResponseProtocolBase.prototype.encode.call(this, o);
    if(this.GetSmsFeedResponse !== null) o['gs'] = this.GetSmsFeedResponse.encode();
    if(this.SendSmsMessageResponse !== null) o['sm'] = this.SendSmsMessageResponse.encode();
    return o;
}
LDDeviceToClusterDirectMessagingResponseProtocol.prototype.GetSmsFeedResponse = null;
LDDeviceToClusterDirectMessagingResponseProtocol.prototype.SendSmsMessageResponse = null;
function LDURI(e) { 
}
LDURI.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    return o;
}
function LDContactProfile(e) { 
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfilePictureLink = e['p'];
    else
        this.ProfilePictureLink = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.ProfileDecryptedHash = new Buffer(e['d'], 'base64');
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Version = e['v'];
    else
        this.Version = null;
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.Identities = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.Identities.push(new LDIdentity(d[k]));
    }
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.HasAppTime = e['t'];
    else
        this.HasAppTime = null;
}
LDContactProfile.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Name !== null) o['n'] = this.Name;
    if(this.ProfilePictureLink !== null) o['p'] = this.ProfilePictureLink;
    if(this.ProfileDecryptedHash !== null) o['d'] = this.ProfileDecryptedHash.toString('base64');
    if(this.Version !== null) o['v'] = this.Version;
    if(this.Identities !== null) { 
        o['i'] = [];
        var d = this.Identities;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['Identities'] = null;
    }
    if(this.HasAppTime !== null) o['t'] = this.HasAppTime;
    return o;
}
LDContactProfile.prototype.Name = null;
LDContactProfile.prototype.ProfilePictureLink = null;
LDContactProfile.prototype.ProfileDecryptedHash = null;
LDContactProfile.prototype.Version = null;
LDContactProfile.prototype.Identities = null;
LDContactProfile.prototype.HasAppTime = null;
function LDRegisterWithTokenRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.Locale = e['l'];
    else
        this.Locale = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.IpAddress = e['p'];
    else
        this.IpAddress = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.RequestedCluster = e['c'];
    else
        this.RequestedCluster = null;
}
LDRegisterWithTokenRequest.prototype = new LDJSONLoggable();
LDRegisterWithTokenRequest.prototype.constructor = LDRegisterWithTokenRequest;
LDRegisterWithTokenRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Locale !== null) o['l'] = this.Locale;
    if(this.IpAddress !== null) o['p'] = this.IpAddress;
    if(this.RequestedCluster !== null) o['c'] = this.RequestedCluster;
    return o;
}
LDRegisterWithTokenRequest.prototype.Identity = null;
LDRegisterWithTokenRequest.prototype.Account = null;
LDRegisterWithTokenRequest.prototype.Locale = null;
LDRegisterWithTokenRequest.prototype.IpAddress = null;
LDRegisterWithTokenRequest.prototype.RequestedCluster = null;
function LDConfirmTokenRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Token = e['t'];
    else
        this.Token = null;
}
LDConfirmTokenRequest.prototype = new LDJSONLoggable();
LDConfirmTokenRequest.prototype.constructor = LDConfirmTokenRequest;
LDConfirmTokenRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    if(this.Token !== null) o['t'] = this.Token;
    return o;
}
LDConfirmTokenRequest.prototype.Identity = null;
LDConfirmTokenRequest.prototype.Token = null;
function LDRegisterWithOAuthRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.ServiceType = e['s'];
    else
        this.ServiceType = null;
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.Key = e['k'];
    else
        this.Key = null;
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.IpAddress = e['p'];
    else
        this.IpAddress = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.RequestedCluster = e['c'];
    else
        this.RequestedCluster = null;
}
LDRegisterWithOAuthRequest.prototype = new LDJSONLoggable();
LDRegisterWithOAuthRequest.prototype.constructor = LDRegisterWithOAuthRequest;
LDRegisterWithOAuthRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ServiceType !== null) o['s'] = this.ServiceType;
    if(this.Key !== null) o['k'] = this.Key;
    if(this.Account !== null) o['a'] = this.Account;
    if(this.IpAddress !== null) o['p'] = this.IpAddress;
    if(this.RequestedCluster !== null) o['c'] = this.RequestedCluster;
    return o;
}
LDRegisterWithOAuthRequest.prototype.ServiceType = null;
LDRegisterWithOAuthRequest.prototype.Key = null;
LDRegisterWithOAuthRequest.prototype.Account = null;
LDRegisterWithOAuthRequest.prototype.IpAddress = null;
LDRegisterWithOAuthRequest.prototype.RequestedCluster = null;
function LDGetLinkedIdentitiesRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
}
LDGetLinkedIdentitiesRequest.prototype = new LDJSONLoggable();
LDGetLinkedIdentitiesRequest.prototype.constructor = LDGetLinkedIdentitiesRequest;
LDGetLinkedIdentitiesRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Account !== null) o['a'] = this.Account;
    return o;
}
LDGetLinkedIdentitiesRequest.prototype.Account = null;
function LDCheckIdentityLinkedRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.IpAddress = e['p'];
    else
        this.IpAddress = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.RequestedCluster = e['c'];
    else
        this.RequestedCluster = null;
}
LDCheckIdentityLinkedRequest.prototype = new LDJSONLoggable();
LDCheckIdentityLinkedRequest.prototype.constructor = LDCheckIdentityLinkedRequest;
LDCheckIdentityLinkedRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.IpAddress !== null) o['p'] = this.IpAddress;
    if(this.RequestedCluster !== null) o['c'] = this.RequestedCluster;
    return o;
}
LDCheckIdentityLinkedRequest.prototype.IpAddress = null;
LDCheckIdentityLinkedRequest.prototype.RequestedCluster = null;
function LDUnlinkIdentityRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
}
LDUnlinkIdentityRequest.prototype = new LDJSONLoggable();
LDUnlinkIdentityRequest.prototype.constructor = LDUnlinkIdentityRequest;
LDUnlinkIdentityRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    if(this.Account !== null) o['a'] = this.Account;
    return o;
}
LDUnlinkIdentityRequest.prototype.Identity = null;
LDUnlinkIdentityRequest.prototype.Account = null;
function LDLinkOmletIdentityRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
}
LDLinkOmletIdentityRequest.prototype = new LDJSONLoggable();
LDLinkOmletIdentityRequest.prototype.constructor = LDLinkOmletIdentityRequest;
LDLinkOmletIdentityRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    if(this.Account !== null) o['a'] = this.Account;
    return o;
}
LDLinkOmletIdentityRequest.prototype.Identity = null;
LDLinkOmletIdentityRequest.prototype.Account = null;
function LDGetAppSigninLinkRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.RedirectPage = e['r'];
    else
        this.RedirectPage = null;
}
LDGetAppSigninLinkRequest.prototype = new LDJSONLoggable();
LDGetAppSigninLinkRequest.prototype.constructor = LDGetAppSigninLinkRequest;
LDGetAppSigninLinkRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.RedirectPage !== null) o['r'] = this.RedirectPage;
    return o;
}
LDGetAppSigninLinkRequest.prototype.RedirectPage = null;
function LDConfirmAuthCodeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AuthCode = e['a'];
    else
        this.AuthCode = null;
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.QueryKey = e['k'];
    else
        this.QueryKey = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.IpAddress = e['p'];
    else
        this.IpAddress = null;
}
LDConfirmAuthCodeRequest.prototype = new LDJSONLoggable();
LDConfirmAuthCodeRequest.prototype.constructor = LDConfirmAuthCodeRequest;
LDConfirmAuthCodeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.AuthCode !== null) o['a'] = this.AuthCode;
    if(this.QueryKey !== null) o['k'] = this.QueryKey;
    if(this.IpAddress !== null) o['p'] = this.IpAddress;
    return o;
}
LDConfirmAuthCodeRequest.prototype.AuthCode = null;
LDConfirmAuthCodeRequest.prototype.QueryKey = null;
LDConfirmAuthCodeRequest.prototype.IpAddress = null;
function LDDeviceRegistrationStateChangedPush(e) { 
    LDJSONLoggable.call(this, e);
}
LDDeviceRegistrationStateChangedPush.prototype = new LDJSONLoggable();
LDDeviceRegistrationStateChangedPush.prototype.constructor = LDDeviceRegistrationStateChangedPush;
LDDeviceRegistrationStateChangedPush.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDUnblockIdentityRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
}
LDUnblockIdentityRequest.prototype = new LDJSONLoggable();
LDUnblockIdentityRequest.prototype.constructor = LDUnblockIdentityRequest;
LDUnblockIdentityRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    return o;
}
LDUnblockIdentityRequest.prototype.Identity = null;
LDUnblockIdentityRequest.prototype.AdminAccount = null;
function LDGetEmailLoginLinkRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
}
LDGetEmailLoginLinkRequest.prototype = new LDJSONLoggable();
LDGetEmailLoginLinkRequest.prototype.constructor = LDGetEmailLoginLinkRequest;
LDGetEmailLoginLinkRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    return o;
}
LDGetEmailLoginLinkRequest.prototype.Identity = null;
LDGetEmailLoginLinkRequest.prototype.AdminAccount = null;
function LDGetAccountDetailsByAccountRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
    if(e && (e['A'] !== null && e['A'] !== undefined))
        this.AccountToLookup = e['A'];
    else
        this.AccountToLookup = null;
}
LDGetAccountDetailsByAccountRequest.prototype = new LDJSONLoggable();
LDGetAccountDetailsByAccountRequest.prototype.constructor = LDGetAccountDetailsByAccountRequest;
LDGetAccountDetailsByAccountRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    if(this.AccountToLookup !== null) o['A'] = this.AccountToLookup;
    return o;
}
LDGetAccountDetailsByAccountRequest.prototype.AdminAccount = null;
LDGetAccountDetailsByAccountRequest.prototype.AccountToLookup = null;
function LDGetAccountDetailsByIdentityRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
}
LDGetAccountDetailsByIdentityRequest.prototype = new LDJSONLoggable();
LDGetAccountDetailsByIdentityRequest.prototype.constructor = LDGetAccountDetailsByIdentityRequest;
LDGetAccountDetailsByIdentityRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    return o;
}
LDGetAccountDetailsByIdentityRequest.prototype.Identity = null;
LDGetAccountDetailsByIdentityRequest.prototype.AdminAccount = null;
function LDGetIdentityRecordsRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
}
LDGetIdentityRecordsRequest.prototype = new LDJSONLoggable();
LDGetIdentityRecordsRequest.prototype.constructor = LDGetIdentityRecordsRequest;
LDGetIdentityRecordsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    return o;
}
LDGetIdentityRecordsRequest.prototype.Identity = null;
LDGetIdentityRecordsRequest.prototype.AdminAccount = null;
function LDListFlaggedUsersRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.End = e['e'];
    else
        this.End = null;
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Start = e['s'];
    else
        this.Start = null;
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.ContinuationKey = new Buffer(e['k'], 'base64');
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
}
LDListFlaggedUsersRequest.prototype = new LDJSONLoggable();
LDListFlaggedUsersRequest.prototype.constructor = LDListFlaggedUsersRequest;
LDListFlaggedUsersRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.End !== null) o['e'] = this.End;
    if(this.Start !== null) o['s'] = this.Start;
    if(this.ContinuationKey !== null) o['k'] = this.ContinuationKey.toString('base64');
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    return o;
}
LDListFlaggedUsersRequest.prototype.End = null;
LDListFlaggedUsersRequest.prototype.Start = null;
LDListFlaggedUsersRequest.prototype.ContinuationKey = null;
LDListFlaggedUsersRequest.prototype.AdminAccount = null;
function LDChangeUserNameRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
    if(e && (e['A'] !== null && e['A'] !== undefined))
        this.Account = e['A'];
    else
        this.Account = null;
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
}
LDChangeUserNameRequest.prototype = new LDJSONLoggable();
LDChangeUserNameRequest.prototype.constructor = LDChangeUserNameRequest;
LDChangeUserNameRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    if(this.Account !== null) o['A'] = this.Account;
    if(this.Name !== null) o['n'] = this.Name;
    return o;
}
LDChangeUserNameRequest.prototype.AdminAccount = null;
LDChangeUserNameRequest.prototype.Account = null;
LDChangeUserNameRequest.prototype.Name = null;
function LDChangeUserProfilePictureRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
    if(e && (e['A'] !== null && e['A'] !== undefined))
        this.Account = e['A'];
    else
        this.Account = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.BlobLinkString = e['p'];
    else
        this.BlobLinkString = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.DecryptedHash = new Buffer(e['d'], 'base64');
}
LDChangeUserProfilePictureRequest.prototype = new LDJSONLoggable();
LDChangeUserProfilePictureRequest.prototype.constructor = LDChangeUserProfilePictureRequest;
LDChangeUserProfilePictureRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    if(this.Account !== null) o['A'] = this.Account;
    if(this.BlobLinkString !== null) o['p'] = this.BlobLinkString;
    if(this.DecryptedHash !== null) o['d'] = this.DecryptedHash.toString('base64');
    return o;
}
LDChangeUserProfilePictureRequest.prototype.AdminAccount = null;
LDChangeUserProfilePictureRequest.prototype.Account = null;
LDChangeUserProfilePictureRequest.prototype.BlobLinkString = null;
LDChangeUserProfilePictureRequest.prototype.DecryptedHash = null;
function LDDisableUserGameChallengeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
    if(e && (e['A'] !== null && e['A'] !== undefined))
        this.Account = e['A'];
    else
        this.Account = null;
}
LDDisableUserGameChallengeRequest.prototype = new LDJSONLoggable();
LDDisableUserGameChallengeRequest.prototype.constructor = LDDisableUserGameChallengeRequest;
LDDisableUserGameChallengeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    if(this.Account !== null) o['A'] = this.Account;
    return o;
}
LDDisableUserGameChallengeRequest.prototype.AdminAccount = null;
LDDisableUserGameChallengeRequest.prototype.Account = null;
function LDLogUserOutRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AdminAccount = e['a'];
    else
        this.AdminAccount = null;
    if(e && (e['A'] !== null && e['A'] !== undefined))
        this.Account = e['A'];
    else
        this.Account = null;
}
LDLogUserOutRequest.prototype = new LDJSONLoggable();
LDLogUserOutRequest.prototype.constructor = LDLogUserOutRequest;
LDLogUserOutRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.AdminAccount !== null) o['a'] = this.AdminAccount;
    if(this.Account !== null) o['A'] = this.Account;
    return o;
}
LDLogUserOutRequest.prototype.AdminAccount = null;
LDLogUserOutRequest.prototype.Account = null;
function LDAccountDetailsResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AccountDetails = new LDAccountDetails(e['a']);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.WasLegacy = e['l'];
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.AppId = new Buffer(e['i'], 'base64');
}
LDAccountDetailsResponse.prototype = new LDJSONLoggable();
LDAccountDetailsResponse.prototype.constructor = LDAccountDetailsResponse;
LDAccountDetailsResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.AccountDetails !== null) o['a'] = this.AccountDetails.encode();
    if(this.WasLegacy !== null) o['l'] = this.WasLegacy;
    if(this.AppId !== null) o['i'] = this.AppId.toString('base64');
    return o;
}
LDAccountDetailsResponse.prototype.AccountDetails = null;
LDAccountDetailsResponse.prototype.WasLegacy = null;
LDAccountDetailsResponse.prototype.AppId = null;
function LDGetLinkedIdentitiesResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['I'] !== null && e['I'] !== undefined)) { 
        this.Identities = [];
        var d = e['I'];
        for(var k = 0; k < d.length; ++k) this.Identities.push(new LDIdentity(d[k]));
    }
}
LDGetLinkedIdentitiesResponse.prototype = new LDJSONLoggable();
LDGetLinkedIdentitiesResponse.prototype.constructor = LDGetLinkedIdentitiesResponse;
LDGetLinkedIdentitiesResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Identities !== null) { 
        o['I'] = [];
        var d = this.Identities;
        for(var k = 0; k < d.length; ++k) o['I'].push(d[k].encode());
    } else {
        o['Identities'] = null;
    }
    return o;
}
LDGetLinkedIdentitiesResponse.prototype.Identities = null;
function LDGetIdentityRecordsResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['r'] !== null && e['r'] !== undefined)) { 
        this.Records = [];
        var d = e['r'];
        for(var k = 0; k < d.length; ++k) this.Records.push(d[k]);
    }
}
LDGetIdentityRecordsResponse.prototype = new LDJSONLoggable();
LDGetIdentityRecordsResponse.prototype.constructor = LDGetIdentityRecordsResponse;
LDGetIdentityRecordsResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Records !== null) { 
        o['r'] = [];
        var d = this.Records;
        for(var k = 0; k < d.length; ++k) o['r'].push(d[k]);
    } else {
        o['Records'] = null;
    }
    return o;
}
LDGetIdentityRecordsResponse.prototype.Records = null;
function LDListFlaggedUsersResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['d'] !== null && e['d'] !== undefined)) { 
        this.Details = [];
        var d = e['d'];
        for(var k = 0; k < d.length; ++k) this.Details.push(new LDFlaggedDetails(d[k]));
    }
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.ContinuationKey = new Buffer(e['k'], 'base64');
}
LDListFlaggedUsersResponse.prototype = new LDJSONLoggable();
LDListFlaggedUsersResponse.prototype.constructor = LDListFlaggedUsersResponse;
LDListFlaggedUsersResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Details !== null) { 
        o['d'] = [];
        var d = this.Details;
        for(var k = 0; k < d.length; ++k) o['d'].push(d[k].encode());
    } else {
        o['Details'] = null;
    }
    if(this.ContinuationKey !== null) o['k'] = this.ContinuationKey.toString('base64');
    return o;
}
LDListFlaggedUsersResponse.prototype.Details = null;
LDListFlaggedUsersResponse.prototype.ContinuationKey = null;
function LDCreateFeedRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDCreateFeedRequest.prototype = new LDJSONLoggable();
LDCreateFeedRequest.prototype.constructor = LDCreateFeedRequest;
LDCreateFeedRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDCreateFeedRequest.prototype.Feed = null;
function LDGetMessagesSinceRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Timestamp = e['t'];
    else
        this.Timestamp = null;
}
LDGetMessagesSinceRequest.prototype = new LDJSONLoggable();
LDGetMessagesSinceRequest.prototype.constructor = LDGetMessagesSinceRequest;
LDGetMessagesSinceRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Timestamp !== null) o['t'] = this.Timestamp;
    return o;
}
LDGetMessagesSinceRequest.prototype.Feed = null;
LDGetMessagesSinceRequest.prototype.Timestamp = null;
function LDGetMessagesBeforeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Timestamp = e['t'];
    else
        this.Timestamp = null;
}
LDGetMessagesBeforeRequest.prototype = new LDJSONLoggable();
LDGetMessagesBeforeRequest.prototype.constructor = LDGetMessagesBeforeRequest;
LDGetMessagesBeforeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Timestamp !== null) o['t'] = this.Timestamp;
    return o;
}
LDGetMessagesBeforeRequest.prototype.Feed = null;
LDGetMessagesBeforeRequest.prototype.Timestamp = null;
function LDGetMessagesByTypeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Type = e['t'];
    else
        this.Type = null;
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.NextResult = new Buffer(e['n'], 'base64');
}
LDGetMessagesByTypeRequest.prototype = new LDJSONLoggable();
LDGetMessagesByTypeRequest.prototype.constructor = LDGetMessagesByTypeRequest;
LDGetMessagesByTypeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Type !== null) o['t'] = this.Type;
    if(this.NextResult !== null) o['n'] = this.NextResult.toString('base64');
    return o;
}
LDGetMessagesByTypeRequest.prototype.Feed = null;
LDGetMessagesByTypeRequest.prototype.Type = null;
LDGetMessagesByTypeRequest.prototype.NextResult = null;
function LDGetMessageByIdRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDTypedId(e['i']);
}
LDGetMessageByIdRequest.prototype = new LDJSONLoggable();
LDGetMessageByIdRequest.prototype.constructor = LDGetMessageByIdRequest;
LDGetMessageByIdRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Id !== null) o['i'] = this.Id.encode();
    return o;
}
LDGetMessageByIdRequest.prototype.Feed = null;
LDGetMessageByIdRequest.prototype.Id = null;
function LDAddMessageRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDTypedId(e['i']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Body = new Buffer(e['b'], 'base64');
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Version = e['v'];
    else
        this.Version = null;
    if(e && (e['w'] !== null && e['w'] !== undefined))
        this.AnyMemberWritable = e['w'];
    else
        this.AnyMemberWritable = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.FromDevice = e['d'];
}
LDAddMessageRequest.prototype = new LDJSONLoggable();
LDAddMessageRequest.prototype.constructor = LDAddMessageRequest;
LDAddMessageRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Id !== null) o['i'] = this.Id.encode();
    if(this.Body !== null) o['b'] = this.Body.toString('base64');
    if(this.Version !== null) o['v'] = this.Version;
    if(this.AnyMemberWritable !== null) o['w'] = this.AnyMemberWritable;
    if(this.FromDevice !== null) o['d'] = this.FromDevice;
    return o;
}
LDAddMessageRequest.prototype.Feed = null;
LDAddMessageRequest.prototype.Id = null;
LDAddMessageRequest.prototype.Body = null;
LDAddMessageRequest.prototype.Version = null;
LDAddMessageRequest.prototype.AnyMemberWritable = null;
LDAddMessageRequest.prototype.FromDevice = null;
function LDUpdateMessageRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDTypedId(e['i']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Body = new Buffer(e['b'], 'base64');
    if(e && (e['w'] !== null && e['w'] !== undefined))
        this.AnyMemberWritable = e['w'];
    else
        this.AnyMemberWritable = null;
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.OldVersion = e['o'];
    else
        this.OldVersion = null;
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.NewVersion = e['n'];
    else
        this.NewVersion = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.FromDevice = e['d'];
}
LDUpdateMessageRequest.prototype = new LDJSONLoggable();
LDUpdateMessageRequest.prototype.constructor = LDUpdateMessageRequest;
LDUpdateMessageRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Id !== null) o['i'] = this.Id.encode();
    if(this.Body !== null) o['b'] = this.Body.toString('base64');
    if(this.AnyMemberWritable !== null) o['w'] = this.AnyMemberWritable;
    if(this.OldVersion !== null) o['o'] = this.OldVersion;
    if(this.NewVersion !== null) o['n'] = this.NewVersion;
    if(this.FromDevice !== null) o['d'] = this.FromDevice;
    return o;
}
LDUpdateMessageRequest.prototype.Feed = null;
LDUpdateMessageRequest.prototype.Id = null;
LDUpdateMessageRequest.prototype.Body = null;
LDUpdateMessageRequest.prototype.AnyMemberWritable = null;
LDUpdateMessageRequest.prototype.OldVersion = null;
LDUpdateMessageRequest.prototype.NewVersion = null;
LDUpdateMessageRequest.prototype.FromDevice = null;
function LDOverwriteMessageRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDTypedId(e['i']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Body = new Buffer(e['b'], 'base64');
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Version = e['v'];
    else
        this.Version = null;
    if(e && (e['w'] !== null && e['w'] !== undefined))
        this.AnyMemberWritable = e['w'];
    else
        this.AnyMemberWritable = null;
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Metadata = new Buffer(e['m'], 'base64');
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.FromDevice = e['d'];
}
LDOverwriteMessageRequest.prototype = new LDJSONLoggable();
LDOverwriteMessageRequest.prototype.constructor = LDOverwriteMessageRequest;
LDOverwriteMessageRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Id !== null) o['i'] = this.Id.encode();
    if(this.Body !== null) o['b'] = this.Body.toString('base64');
    if(this.Version !== null) o['v'] = this.Version;
    if(this.AnyMemberWritable !== null) o['w'] = this.AnyMemberWritable;
    if(this.Metadata !== null) o['m'] = this.Metadata.toString('base64');
    if(this.FromDevice !== null) o['d'] = this.FromDevice;
    return o;
}
LDOverwriteMessageRequest.prototype.Feed = null;
LDOverwriteMessageRequest.prototype.Id = null;
LDOverwriteMessageRequest.prototype.Body = null;
LDOverwriteMessageRequest.prototype.Version = null;
LDOverwriteMessageRequest.prototype.AnyMemberWritable = null;
LDOverwriteMessageRequest.prototype.Metadata = null;
LDOverwriteMessageRequest.prototype.FromDevice = null;
function LDDeleteMessageRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDTypedId(e['i']);
}
LDDeleteMessageRequest.prototype = new LDJSONLoggable();
LDDeleteMessageRequest.prototype.constructor = LDDeleteMessageRequest;
LDDeleteMessageRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Id !== null) o['i'] = this.Id.encode();
    return o;
}
LDDeleteMessageRequest.prototype.Feed = null;
LDDeleteMessageRequest.prototype.Id = null;
function LDSubscribeFeedRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDSubscribeFeedRequest.prototype = new LDJSONLoggable();
LDSubscribeFeedRequest.prototype.constructor = LDSubscribeFeedRequest;
LDSubscribeFeedRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDSubscribeFeedRequest.prototype.Feed = null;
function LDUnsubscribeFeedRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDUnsubscribeFeedRequest.prototype = new LDJSONLoggable();
LDUnsubscribeFeedRequest.prototype.constructor = LDUnsubscribeFeedRequest;
LDUnsubscribeFeedRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDUnsubscribeFeedRequest.prototype.Feed = null;
function LDSubscribeFeedRealtimeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDSubscribeFeedRealtimeRequest.prototype = new LDJSONLoggable();
LDSubscribeFeedRealtimeRequest.prototype.constructor = LDSubscribeFeedRealtimeRequest;
LDSubscribeFeedRealtimeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDSubscribeFeedRealtimeRequest.prototype.Feed = null;
function LDUnsubscribeFeedRealtimeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDUnsubscribeFeedRealtimeRequest.prototype = new LDJSONLoggable();
LDUnsubscribeFeedRealtimeRequest.prototype.constructor = LDUnsubscribeFeedRealtimeRequest;
LDUnsubscribeFeedRealtimeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDUnsubscribeFeedRealtimeRequest.prototype.Feed = null;
function LDAddMemberRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Member = e['m'];
    else
        this.Member = null;
}
LDAddMemberRequest.prototype = new LDJSONLoggable();
LDAddMemberRequest.prototype.constructor = LDAddMemberRequest;
LDAddMemberRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Member !== null) o['m'] = this.Member;
    return o;
}
LDAddMemberRequest.prototype.Feed = null;
LDAddMemberRequest.prototype.Member = null;
function LDRemoveMemberRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Member = e['m'];
    else
        this.Member = null;
}
LDRemoveMemberRequest.prototype = new LDJSONLoggable();
LDRemoveMemberRequest.prototype.constructor = LDRemoveMemberRequest;
LDRemoveMemberRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Member !== null) o['m'] = this.Member;
    return o;
}
LDRemoveMemberRequest.prototype.Feed = null;
LDRemoveMemberRequest.prototype.Member = null;
function LDSetFeedNameRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
}
LDSetFeedNameRequest.prototype = new LDJSONLoggable();
LDSetFeedNameRequest.prototype.constructor = LDSetFeedNameRequest;
LDSetFeedNameRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Name !== null) o['n'] = this.Name;
    return o;
}
LDSetFeedNameRequest.prototype.Feed = null;
LDSetFeedNameRequest.prototype.Name = null;
function LDSetFeedThumbnailRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.BlobLinkString = e['p'];
    else
        this.BlobLinkString = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.DecryptedHash = new Buffer(e['d'], 'base64');
}
LDSetFeedThumbnailRequest.prototype = new LDJSONLoggable();
LDSetFeedThumbnailRequest.prototype.constructor = LDSetFeedThumbnailRequest;
LDSetFeedThumbnailRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.BlobLinkString !== null) o['p'] = this.BlobLinkString;
    if(this.DecryptedHash !== null) o['d'] = this.DecryptedHash.toString('base64');
    return o;
}
LDSetFeedThumbnailRequest.prototype.Feed = null;
LDSetFeedThumbnailRequest.prototype.BlobLinkString = null;
LDSetFeedThumbnailRequest.prototype.DecryptedHash = null;
function LDSendRealtimeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Type = e['t'];
    else
        this.Type = null;
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Body = new Buffer(e['b'], 'base64');
}
LDSendRealtimeRequest.prototype = new LDJSONLoggable();
LDSendRealtimeRequest.prototype.constructor = LDSendRealtimeRequest;
LDSendRealtimeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Type !== null) o['t'] = this.Type;
    if(this.Body !== null) o['b'] = this.Body.toString('base64');
    return o;
}
LDSendRealtimeRequest.prototype.Feed = null;
LDSendRealtimeRequest.prototype.Type = null;
LDSendRealtimeRequest.prototype.Body = null;
function LDAddPendingInvitationRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.IdentityHash = new LDIdentityHash(e['i']);
    if(e && (e['I'] !== null && e['I'] !== undefined))
        this.Identity = new LDIdentity(e['I']);
}
LDAddPendingInvitationRequest.prototype = new LDJSONLoggable();
LDAddPendingInvitationRequest.prototype.constructor = LDAddPendingInvitationRequest;
LDAddPendingInvitationRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.IdentityHash !== null) o['i'] = this.IdentityHash.encode();
    if(this.Identity !== null) o['I'] = this.Identity.encode();
    return o;
}
LDAddPendingInvitationRequest.prototype.Feed = null;
LDAddPendingInvitationRequest.prototype.IdentityHash = null;
LDAddPendingInvitationRequest.prototype.Identity = null;
function LDRemovePendingInvitationRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.IdentityHash = new LDIdentityHash(e['i']);
}
LDRemovePendingInvitationRequest.prototype = new LDJSONLoggable();
LDRemovePendingInvitationRequest.prototype.constructor = LDRemovePendingInvitationRequest;
LDRemovePendingInvitationRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.IdentityHash !== null) o['i'] = this.IdentityHash.encode();
    return o;
}
LDRemovePendingInvitationRequest.prototype.Feed = null;
LDRemovePendingInvitationRequest.prototype.IdentityHash = null;
function LDGetJoinFeedLinkRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDGetJoinFeedLinkRequest.prototype = new LDJSONLoggable();
LDGetJoinFeedLinkRequest.prototype.constructor = LDGetJoinFeedLinkRequest;
LDGetJoinFeedLinkRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDGetJoinFeedLinkRequest.prototype.Feed = null;
function LDJoinFeedRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Pin = e['p'];
    else
        this.Pin = null;
}
LDJoinFeedRequest.prototype = new LDJSONLoggable();
LDJoinFeedRequest.prototype.constructor = LDJoinFeedRequest;
LDJoinFeedRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Pin !== null) o['p'] = this.Pin;
    return o;
}
LDJoinFeedRequest.prototype.Feed = null;
LDJoinFeedRequest.prototype.Pin = null;
function LDJoinBroadcastRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Pin = e['p'];
    else
        this.Pin = null;
}
LDJoinBroadcastRequest.prototype = new LDJSONLoggable();
LDJoinBroadcastRequest.prototype.constructor = LDJoinBroadcastRequest;
LDJoinBroadcastRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Pin !== null) o['p'] = this.Pin;
    return o;
}
LDJoinBroadcastRequest.prototype.Feed = null;
LDJoinBroadcastRequest.prototype.Pin = null;
function LDSetDefaultAccessRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Readable = e['r'];
    if(e && (e['x'] !== null && e['x'] !== undefined))
        this.FixedMembership = e['x'];
}
LDSetDefaultAccessRequest.prototype = new LDJSONLoggable();
LDSetDefaultAccessRequest.prototype.constructor = LDSetDefaultAccessRequest;
LDSetDefaultAccessRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Readable !== null) o['r'] = this.Readable;
    if(this.FixedMembership !== null) o['x'] = this.FixedMembership;
    return o;
}
LDSetDefaultAccessRequest.prototype.Feed = null;
LDSetDefaultAccessRequest.prototype.Readable = null;
LDSetDefaultAccessRequest.prototype.FixedMembership = null;
function LDGetPublicFeedDetailsRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDGetPublicFeedDetailsRequest.prototype = new LDJSONLoggable();
LDGetPublicFeedDetailsRequest.prototype.constructor = LDGetPublicFeedDetailsRequest;
LDGetPublicFeedDetailsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDGetPublicFeedDetailsRequest.prototype.Feed = null;
function LDApplyDocumentTransformRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDTypedId(e['i']);
    if(e && (e['j'] !== null && e['j'] !== undefined))
        this.Javascript = e['j'];
    else
        this.Javascript = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Parameters = e['p'];
    else
        this.Parameters = null;
}
LDApplyDocumentTransformRequest.prototype = new LDJSONLoggable();
LDApplyDocumentTransformRequest.prototype.constructor = LDApplyDocumentTransformRequest;
LDApplyDocumentTransformRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Id !== null) o['i'] = this.Id.encode();
    if(this.Javascript !== null) o['j'] = this.Javascript;
    if(this.Parameters !== null) o['p'] = this.Parameters;
    return o;
}
LDApplyDocumentTransformRequest.prototype.Feed = null;
LDApplyDocumentTransformRequest.prototype.Id = null;
LDApplyDocumentTransformRequest.prototype.Javascript = null;
LDApplyDocumentTransformRequest.prototype.Parameters = null;
function LDMessageDeliveryPush(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Message = new LDMessage(e['m']);
}
LDMessageDeliveryPush.prototype = new LDJSONLoggable();
LDMessageDeliveryPush.prototype.constructor = LDMessageDeliveryPush;
LDMessageDeliveryPush.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Message !== null) o['m'] = this.Message.encode();
    return o;
}
LDMessageDeliveryPush.prototype.Message = null;
function LDRealtimeMessageDeliveryPush(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Message = new LDRealtimeMessage(e['m']);
}
LDRealtimeMessageDeliveryPush.prototype = new LDJSONLoggable();
LDRealtimeMessageDeliveryPush.prototype.constructor = LDRealtimeMessageDeliveryPush;
LDRealtimeMessageDeliveryPush.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Message !== null) o['m'] = this.Message.encode();
    return o;
}
LDRealtimeMessageDeliveryPush.prototype.Message = null;
function LDMessageTerminatedPush(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDMessageTerminatedPush.prototype = new LDJSONLoggable();
LDMessageTerminatedPush.prototype.constructor = LDMessageTerminatedPush;
LDMessageTerminatedPush.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDMessageTerminatedPush.prototype.Feed = null;
function LDGetFeedStateRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDGetFeedStateRequest.prototype = new LDJSONLoggable();
LDGetFeedStateRequest.prototype.constructor = LDGetFeedStateRequest;
LDGetFeedStateRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDGetFeedStateRequest.prototype.Feed = null;
function LDSetFeedAcceptanceRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Acceptance = e['s'];
    else
        this.Acceptance = null;
}
LDSetFeedAcceptanceRequest.prototype = new LDJSONLoggable();
LDSetFeedAcceptanceRequest.prototype.constructor = LDSetFeedAcceptanceRequest;
LDSetFeedAcceptanceRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Acceptance !== null) o['s'] = this.Acceptance;
    return o;
}
LDSetFeedAcceptanceRequest.prototype.Feed = null;
LDSetFeedAcceptanceRequest.prototype.Acceptance = null;
function LDGetDirtyFeedsRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Since = e['s'];
    else
        this.Since = null;
}
LDGetDirtyFeedsRequest.prototype = new LDJSONLoggable();
LDGetDirtyFeedsRequest.prototype.constructor = LDGetDirtyFeedsRequest;
LDGetDirtyFeedsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Since !== null) o['s'] = this.Since;
    return o;
}
LDGetDirtyFeedsRequest.prototype.Since = null;
function LDSubscribeForAccountInboxRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDSubscribeForAccountInboxRequest.prototype = new LDJSONLoggable();
LDSubscribeForAccountInboxRequest.prototype.constructor = LDSubscribeForAccountInboxRequest;
LDSubscribeForAccountInboxRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDUnsubscribeForAccountInboxRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDUnsubscribeForAccountInboxRequest.prototype = new LDJSONLoggable();
LDUnsubscribeForAccountInboxRequest.prototype.constructor = LDUnsubscribeForAccountInboxRequest;
LDUnsubscribeForAccountInboxRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDRegisterPushNotificationKeyRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.PushKey = new LDPushKey(e['p']);
}
LDRegisterPushNotificationKeyRequest.prototype = new LDJSONLoggable();
LDRegisterPushNotificationKeyRequest.prototype.constructor = LDRegisterPushNotificationKeyRequest;
LDRegisterPushNotificationKeyRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.PushKey !== null) o['p'] = this.PushKey.encode();
    return o;
}
LDRegisterPushNotificationKeyRequest.prototype.PushKey = null;
function LDInboxDeliveryMessagePush(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Message = new LDMessage(e['m']);
}
LDInboxDeliveryMessagePush.prototype = new LDJSONLoggable();
LDInboxDeliveryMessagePush.prototype.constructor = LDInboxDeliveryMessagePush;
LDInboxDeliveryMessagePush.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Message !== null) o['m'] = this.Message.encode();
    return o;
}
LDInboxDeliveryMessagePush.prototype.Message = null;
function LDInboxDeliveryTerminatedPush(e) { 
    LDJSONLoggable.call(this, e);
}
LDInboxDeliveryTerminatedPush.prototype = new LDJSONLoggable();
LDInboxDeliveryTerminatedPush.prototype.constructor = LDInboxDeliveryTerminatedPush;
LDInboxDeliveryTerminatedPush.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDSetAppleBadgeCountRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.BadgeCount = e['b'];
    else
        this.BadgeCount = null;
}
LDSetAppleBadgeCountRequest.prototype = new LDJSONLoggable();
LDSetAppleBadgeCountRequest.prototype.constructor = LDSetAppleBadgeCountRequest;
LDSetAppleBadgeCountRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.BadgeCount !== null) o['b'] = this.BadgeCount;
    return o;
}
LDSetAppleBadgeCountRequest.prototype.BadgeCount = null;
function LDGetUploadTicketRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Cluster = e['c'];
    else
        this.Cluster = null;
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Metadata = new LDBlobMetadata(e['m']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.IsPermanent = e['p'];
    else
        this.IsPermanent = null;
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.AlreadyEncrypted = e['e'];
    else
        this.AlreadyEncrypted = null;
}
LDGetUploadTicketRequest.prototype = new LDJSONLoggable();
LDGetUploadTicketRequest.prototype.constructor = LDGetUploadTicketRequest;
LDGetUploadTicketRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Cluster !== null) o['c'] = this.Cluster;
    if(this.Metadata !== null) o['m'] = this.Metadata.encode();
    if(this.IsPermanent !== null) o['p'] = this.IsPermanent;
    if(this.AlreadyEncrypted !== null) o['e'] = this.AlreadyEncrypted;
    return o;
}
LDGetUploadTicketRequest.prototype.Account = null;
LDGetUploadTicketRequest.prototype.Cluster = null;
LDGetUploadTicketRequest.prototype.Metadata = null;
LDGetUploadTicketRequest.prototype.IsPermanent = null;
LDGetUploadTicketRequest.prototype.AlreadyEncrypted = null;
function LDVerifyUploadCompletedRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['ut'] !== null && e['ut'] !== undefined))
        this.BlobUploadTicket = new LDBlobUploadTicket(e['ut']);
}
LDVerifyUploadCompletedRequest.prototype = new LDJSONLoggable();
LDVerifyUploadCompletedRequest.prototype.constructor = LDVerifyUploadCompletedRequest;
LDVerifyUploadCompletedRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.BlobUploadTicket !== null) o['ut'] = this.BlobUploadTicket.encode();
    return o;
}
LDVerifyUploadCompletedRequest.prototype.BlobUploadTicket = null;
function LDGetDownloadTicketRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.BlobLinkString = e['l'];
    else
        this.BlobLinkString = null;
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.AlreadyEncrypted = e['e'];
    else
        this.AlreadyEncrypted = null;
}
LDGetDownloadTicketRequest.prototype = new LDJSONLoggable();
LDGetDownloadTicketRequest.prototype.constructor = LDGetDownloadTicketRequest;
LDGetDownloadTicketRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.BlobLinkString !== null) o['l'] = this.BlobLinkString;
    if(this.AlreadyEncrypted !== null) o['e'] = this.AlreadyEncrypted;
    return o;
}
LDGetDownloadTicketRequest.prototype.BlobLinkString = null;
LDGetDownloadTicketRequest.prototype.AlreadyEncrypted = null;
function LDVerifyExistsAndPermanenceRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.BlobLinkString = e['l'];
    else
        this.BlobLinkString = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.IsPermanent = e['p'];
    else
        this.IsPermanent = null;
}
LDVerifyExistsAndPermanenceRequest.prototype = new LDJSONLoggable();
LDVerifyExistsAndPermanenceRequest.prototype.constructor = LDVerifyExistsAndPermanenceRequest;
LDVerifyExistsAndPermanenceRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.BlobLinkString !== null) o['l'] = this.BlobLinkString;
    if(this.IsPermanent !== null) o['p'] = this.IsPermanent;
    return o;
}
LDVerifyExistsAndPermanenceRequest.prototype.BlobLinkString = null;
LDVerifyExistsAndPermanenceRequest.prototype.IsPermanent = null;
function LDOverwriteContactRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactAccount = e['c'];
    else
        this.ContactAccount = null;
}
LDOverwriteContactRequest.prototype = new LDJSONLoggable();
LDOverwriteContactRequest.prototype.constructor = LDOverwriteContactRequest;
LDOverwriteContactRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ContactAccount !== null) o['c'] = this.ContactAccount;
    return o;
}
LDOverwriteContactRequest.prototype.ContactAccount = null;
function LDRemoveContactRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactAccount = e['c'];
    else
        this.ContactAccount = null;
}
LDRemoveContactRequest.prototype = new LDJSONLoggable();
LDRemoveContactRequest.prototype.constructor = LDRemoveContactRequest;
LDRemoveContactRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ContactAccount !== null) o['c'] = this.ContactAccount;
    return o;
}
LDRemoveContactRequest.prototype.ContactAccount = null;
function LDBlockContactRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactDetails = new LDContactDetails(e['c']);
}
LDBlockContactRequest.prototype = new LDJSONLoggable();
LDBlockContactRequest.prototype.constructor = LDBlockContactRequest;
LDBlockContactRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ContactDetails !== null) o['c'] = this.ContactDetails.encode();
    return o;
}
LDBlockContactRequest.prototype.ContactDetails = null;
function LDUnblockContactRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactAccount = e['c'];
    else
        this.ContactAccount = null;
}
LDUnblockContactRequest.prototype = new LDJSONLoggable();
LDUnblockContactRequest.prototype.constructor = LDUnblockContactRequest;
LDUnblockContactRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ContactAccount !== null) o['c'] = this.ContactAccount;
    return o;
}
LDUnblockContactRequest.prototype.ContactAccount = null;
function LDGetProfileDetailsRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDGetProfileDetailsRequest.prototype = new LDJSONLoggable();
LDGetProfileDetailsRequest.prototype.constructor = LDGetProfileDetailsRequest;
LDGetProfileDetailsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDSetProfileNameRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
}
LDSetProfileNameRequest.prototype = new LDJSONLoggable();
LDSetProfileNameRequest.prototype.constructor = LDSetProfileNameRequest;
LDSetProfileNameRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Name !== null) o['n'] = this.Name;
    return o;
}
LDSetProfileNameRequest.prototype.Name = null;
function LDSetProfilePictureRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.BlobLinkString = e['p'];
    else
        this.BlobLinkString = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.DecryptedHash = new Buffer(e['d'], 'base64');
}
LDSetProfilePictureRequest.prototype = new LDJSONLoggable();
LDSetProfilePictureRequest.prototype.constructor = LDSetProfilePictureRequest;
LDSetProfilePictureRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.BlobLinkString !== null) o['p'] = this.BlobLinkString;
    if(this.DecryptedHash !== null) o['d'] = this.DecryptedHash.toString('base64');
    return o;
}
LDSetProfilePictureRequest.prototype.BlobLinkString = null;
LDSetProfilePictureRequest.prototype.DecryptedHash = null;
function LDGetOmletContactProfileRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.RequestedAccount = e['c'];
    else
        this.RequestedAccount = null;
}
LDGetOmletContactProfileRequest.prototype = new LDJSONLoggable();
LDGetOmletContactProfileRequest.prototype.constructor = LDGetOmletContactProfileRequest;
LDGetOmletContactProfileRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.RequestedAccount !== null) o['c'] = this.RequestedAccount;
    return o;
}
LDGetOmletContactProfileRequest.prototype.RequestedAccount = null;
function LDAddItemsToProfileRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.Items = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.Items.push(new LDItemId(d[k]));
    }
    if(e && (e['pd'] !== null && e['pd'] !== undefined))
        this.PurchaseData = new LDPurchaseData(e['pd']);
}
LDAddItemsToProfileRequest.prototype = new LDJSONLoggable();
LDAddItemsToProfileRequest.prototype.constructor = LDAddItemsToProfileRequest;
LDAddItemsToProfileRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.Items !== null) { 
        o['i'] = [];
        var d = this.Items;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['Items'] = null;
    }
    if(this.PurchaseData !== null) o['pd'] = this.PurchaseData.encode();
    return o;
}
LDAddItemsToProfileRequest.prototype.ItemType = null;
LDAddItemsToProfileRequest.prototype.Items = null;
LDAddItemsToProfileRequest.prototype.PurchaseData = null;
function LDRemoveItemsFromProfileRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.Items = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.Items.push(new LDItemId(d[k]));
    }
}
LDRemoveItemsFromProfileRequest.prototype = new LDJSONLoggable();
LDRemoveItemsFromProfileRequest.prototype.constructor = LDRemoveItemsFromProfileRequest;
LDRemoveItemsFromProfileRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.Items !== null) { 
        o['i'] = [];
        var d = this.Items;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['Items'] = null;
    }
    return o;
}
LDRemoveItemsFromProfileRequest.prototype.ItemType = null;
LDRemoveItemsFromProfileRequest.prototype.Items = null;
function LDAddFeaturesToProfileRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined)) { 
        this.Features = [];
        var d = e['f'];
        for(var k = 0; k < d.length; ++k) this.Features.push(d[k]);
    }
}
LDAddFeaturesToProfileRequest.prototype = new LDJSONLoggable();
LDAddFeaturesToProfileRequest.prototype.constructor = LDAddFeaturesToProfileRequest;
LDAddFeaturesToProfileRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Features !== null) { 
        o['f'] = [];
        var d = this.Features;
        for(var k = 0; k < d.length; ++k) o['f'].push(d[k]);
    } else {
        o['Features'] = null;
    }
    return o;
}
LDAddFeaturesToProfileRequest.prototype.Features = null;
function LDRemoveFeaturesFromProfileRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined)) { 
        this.Features = [];
        var d = e['f'];
        for(var k = 0; k < d.length; ++k) this.Features.push(d[k]);
    }
}
LDRemoveFeaturesFromProfileRequest.prototype = new LDJSONLoggable();
LDRemoveFeaturesFromProfileRequest.prototype.constructor = LDRemoveFeaturesFromProfileRequest;
LDRemoveFeaturesFromProfileRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Features !== null) { 
        o['f'] = [];
        var d = this.Features;
        for(var k = 0; k < d.length; ++k) o['f'].push(d[k]);
    } else {
        o['Features'] = null;
    }
    return o;
}
LDRemoveFeaturesFromProfileRequest.prototype.Features = null;
function LDGetProfilePublicStateRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.RequestedAccount = e['c'];
    else
        this.RequestedAccount = null;
}
LDGetProfilePublicStateRequest.prototype = new LDJSONLoggable();
LDGetProfilePublicStateRequest.prototype.constructor = LDGetProfilePublicStateRequest;
LDGetProfilePublicStateRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.RequestedAccount !== null) o['c'] = this.RequestedAccount;
    return o;
}
LDGetProfilePublicStateRequest.prototype.RequestedAccount = null;
function LDGetContactProfileAndPublicStateRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.RequestedAccount = e['c'];
    else
        this.RequestedAccount = null;
}
LDGetContactProfileAndPublicStateRequest.prototype = new LDJSONLoggable();
LDGetContactProfileAndPublicStateRequest.prototype.constructor = LDGetContactProfileAndPublicStateRequest;
LDGetContactProfileAndPublicStateRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.RequestedAccount !== null) o['c'] = this.RequestedAccount;
    return o;
}
LDGetContactProfileAndPublicStateRequest.prototype.RequestedAccount = null;
function LDUploadAddressBookEntriesRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.IdentityHashes = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.IdentityHashes.push(new LDIdentityHash(d[k]));
    }
}
LDUploadAddressBookEntriesRequest.prototype = new LDJSONLoggable();
LDUploadAddressBookEntriesRequest.prototype.constructor = LDUploadAddressBookEntriesRequest;
LDUploadAddressBookEntriesRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.IdentityHashes !== null) { 
        o['i'] = [];
        var d = this.IdentityHashes;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['IdentityHashes'] = null;
    }
    return o;
}
LDUploadAddressBookEntriesRequest.prototype.IdentityHashes = null;
function LDGetContactProfileRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.IdentityHash = new LDIdentityHash(e['i']);
}
LDGetContactProfileRequest.prototype = new LDJSONLoggable();
LDGetContactProfileRequest.prototype.constructor = LDGetContactProfileRequest;
LDGetContactProfileRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.IdentityHash !== null) o['i'] = this.IdentityHash.encode();
    return o;
}
LDGetContactProfileRequest.prototype.IdentityHash = null;
function LDGetAddMeLinkRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDGetAddMeLinkRequest.prototype = new LDJSONLoggable();
LDGetAddMeLinkRequest.prototype.constructor = LDGetAddMeLinkRequest;
LDGetAddMeLinkRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDMutualAddContactByTokenRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Token = e['t'];
    else
        this.Token = null;
}
LDMutualAddContactByTokenRequest.prototype = new LDJSONLoggable();
LDMutualAddContactByTokenRequest.prototype.constructor = LDMutualAddContactByTokenRequest;
LDMutualAddContactByTokenRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Token !== null) o['t'] = this.Token;
    return o;
}
LDMutualAddContactByTokenRequest.prototype.Account = null;
LDMutualAddContactByTokenRequest.prototype.Token = null;
function LDCreateItemInfoRequest(e) { 
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['ac'] !== null && e['ac'] !== undefined))
        this.Account = e['ac'];
    else
        this.Account = null;
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.ItemId = e['id'];
    else
        this.ItemId = null;
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.ItemInfoUserMutableContainer = new LDItemInfoUserMutableContainer(e['u']);
}
LDCreateItemInfoRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.Account !== null) o['ac'] = this.Account;
    if(this.ItemId !== null) o['id'] = this.ItemId;
    if(this.ItemInfoUserMutableContainer !== null) o['u'] = this.ItemInfoUserMutableContainer.encode();
    return o;
}
LDCreateItemInfoRequest.prototype.ItemType = null;
LDCreateItemInfoRequest.prototype.Account = null;
LDCreateItemInfoRequest.prototype.ItemId = null;
LDCreateItemInfoRequest.prototype.ItemInfoUserMutableContainer = null;
function LDUserUpdateItemInfoRequest(e) { 
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['ac'] !== null && e['ac'] !== undefined))
        this.Account = e['ac'];
    else
        this.Account = null;
    if(e && (e['ai'] !== null && e['ai'] !== undefined))
        this.ItemId = e['ai'];
    else
        this.ItemId = null;
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.ItemInfoUserMutableContainer = new LDItemInfoUserMutableContainer(e['u']);
}
LDUserUpdateItemInfoRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.Account !== null) o['ac'] = this.Account;
    if(this.ItemId !== null) o['ai'] = this.ItemId;
    if(this.ItemInfoUserMutableContainer !== null) o['u'] = this.ItemInfoUserMutableContainer.encode();
    return o;
}
LDUserUpdateItemInfoRequest.prototype.ItemType = null;
LDUserUpdateItemInfoRequest.prototype.Account = null;
LDUserUpdateItemInfoRequest.prototype.ItemId = null;
LDUserUpdateItemInfoRequest.prototype.ItemInfoUserMutableContainer = null;
function LDSystemUpdateItemInfoRequest(e) { 
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['ac'] !== null && e['ac'] !== undefined))
        this.Account = e['ac'];
    else
        this.Account = null;
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.ItemId = e['id'];
    else
        this.ItemId = null;
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.ItemInfoSystemMutableContainer = new LDItemInfoSystemMutableContainer(e['u']);
}
LDSystemUpdateItemInfoRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.Account !== null) o['ac'] = this.Account;
    if(this.ItemId !== null) o['id'] = this.ItemId;
    if(this.ItemInfoSystemMutableContainer !== null) o['u'] = this.ItemInfoSystemMutableContainer.encode();
    return o;
}
LDSystemUpdateItemInfoRequest.prototype.ItemType = null;
LDSystemUpdateItemInfoRequest.prototype.Account = null;
LDSystemUpdateItemInfoRequest.prototype.ItemId = null;
LDSystemUpdateItemInfoRequest.prototype.ItemInfoSystemMutableContainer = null;
function LDGetItemInfoRequest(e) { 
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.ItemId = new LDItemId(e['id']);
}
LDGetItemInfoRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['id'] = this.ItemId.encode();
    return o;
}
LDGetItemInfoRequest.prototype.ItemId = null;
function LDReviewItemRequest(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.ItemId = new LDItemId(e['i']);
}
LDReviewItemRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['i'] = this.ItemId.encode();
    return o;
}
LDReviewItemRequest.prototype.ItemId = null;
function LDPublishItemRequest(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.ItemId = new LDItemId(e['i']);
}
LDPublishItemRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['i'] = this.ItemId.encode();
    return o;
}
LDPublishItemRequest.prototype.ItemId = null;
function LDUnpublishItemRequest(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.ItemId = new LDItemId(e['i']);
}
LDUnpublishItemRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['i'] = this.ItemId.encode();
    return o;
}
LDUnpublishItemRequest.prototype.ItemId = null;
function LDDeleteItemRequest(e) { 
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['ac'] !== null && e['ac'] !== undefined))
        this.Account = e['ac'];
    else
        this.Account = null;
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.ItemId = e['id'];
    else
        this.ItemId = null;
}
LDDeleteItemRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.Account !== null) o['ac'] = this.Account;
    if(this.ItemId !== null) o['id'] = this.ItemId;
    return o;
}
LDDeleteItemRequest.prototype.ItemType = null;
LDDeleteItemRequest.prototype.Account = null;
LDDeleteItemRequest.prototype.ItemId = null;
function LDListItemsForAccountRequest(e) { 
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['ac'] !== null && e['ac'] !== undefined))
        this.Account = e['ac'];
    else
        this.Account = null;
}
LDListItemsForAccountRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.Account !== null) o['ac'] = this.Account;
    return o;
}
LDListItemsForAccountRequest.prototype.ItemType = null;
LDListItemsForAccountRequest.prototype.Account = null;
function LDListAllItemsRequest(e) { 
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContinuationKey = new Buffer(e['c'], 'base64');
}
LDListAllItemsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.ContinuationKey !== null) o['c'] = this.ContinuationKey.toString('base64');
    return o;
}
LDListAllItemsRequest.prototype.ItemType = null;
LDListAllItemsRequest.prototype.ContinuationKey = null;
function LDListPublishedItemsRequest(e) { 
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContinuationKey = new Buffer(e['c'], 'base64');
    if(e && (e['lm'] !== null && e['lm'] !== undefined))
        this.LastModified = e['lm'];
}
LDListPublishedItemsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.ContinuationKey !== null) o['c'] = this.ContinuationKey.toString('base64');
    if(this.LastModified !== null) o['lm'] = this.LastModified;
    return o;
}
LDListPublishedItemsRequest.prototype.ItemType = null;
LDListPublishedItemsRequest.prototype.ContinuationKey = null;
LDListPublishedItemsRequest.prototype.LastModified = null;
function LDGenerateGrantForItemRequest(e) { 
    if(e && (e['ii'] !== null && e['ii'] !== undefined))
        this.ItemId = new LDItemId(e['ii']);
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.ExpirationTime = e['e'];
    else
        this.ExpirationTime = null;
}
LDGenerateGrantForItemRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['ii'] = this.ItemId.encode();
    if(this.ExpirationTime !== null) o['e'] = this.ExpirationTime;
    return o;
}
LDGenerateGrantForItemRequest.prototype.ItemId = null;
LDGenerateGrantForItemRequest.prototype.ExpirationTime = null;
function LDGetItemUsingGrantRequest(e) { 
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.Grant = e['g'];
    else
        this.Grant = null;
}
LDGetItemUsingGrantRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Grant !== null) o['g'] = this.Grant;
    return o;
}
LDGetItemUsingGrantRequest.prototype.Grant = null;
function LDDoesItemHaveGrantRequest(e) { 
    if(e && (e['ii'] !== null && e['ii'] !== undefined))
        this.ItemId = new LDItemId(e['ii']);
}
LDDoesItemHaveGrantRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['ii'] = this.ItemId.encode();
    return o;
}
LDDoesItemHaveGrantRequest.prototype.ItemId = null;
function LDDeleteGrantForItemRequest(e) { 
    if(e && (e['ii'] !== null && e['ii'] !== undefined))
        this.ItemId = new LDItemId(e['ii']);
}
LDDeleteGrantForItemRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['ii'] = this.ItemId.encode();
    return o;
}
LDDeleteGrantForItemRequest.prototype.ItemId = null;
function LDGenerateApiKeyRequest(e) { 
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.ItemId = new LDItemId(e['id']);
}
LDGenerateApiKeyRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['id'] = this.ItemId.encode();
    return o;
}
LDGenerateApiKeyRequest.prototype.ItemId = null;
function LDDeactivateApiKeyRequest(e) { 
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.ClientApiKeyId = new Buffer(e['id'], 'base64');
}
LDDeactivateApiKeyRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ClientApiKeyId !== null) o['id'] = this.ClientApiKeyId.toString('base64');
    return o;
}
LDDeactivateApiKeyRequest.prototype.ClientApiKeyId = null;
function LDListApiKeysRequest(e) { 
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.ItemId = new LDItemId(e['id']);
}
LDListApiKeysRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['id'] = this.ItemId.encode();
    return o;
}
LDListApiKeysRequest.prototype.ItemId = null;
function LDDeleteDeviceRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.PublicKey = new Buffer(e['k'], 'base64');
}
LDDeleteDeviceRequest.prototype = new LDJSONLoggable();
LDDeleteDeviceRequest.prototype.constructor = LDDeleteDeviceRequest;
LDDeleteDeviceRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.PublicKey !== null) o['k'] = this.PublicKey.toString('base64');
    return o;
}
LDDeleteDeviceRequest.prototype.PublicKey = null;
function LDAddDeviceRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.PublicKey = new Buffer(e['k'], 'base64');
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Version = e['v'];
    else
        this.Version = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Description = e['d'];
    else
        this.Description = null;
}
LDAddDeviceRequest.prototype = new LDJSONLoggable();
LDAddDeviceRequest.prototype.constructor = LDAddDeviceRequest;
LDAddDeviceRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.PublicKey !== null) o['k'] = this.PublicKey.toString('base64');
    if(this.Version !== null) o['v'] = this.Version;
    if(this.Description !== null) o['d'] = this.Description;
    return o;
}
LDAddDeviceRequest.prototype.PublicKey = null;
LDAddDeviceRequest.prototype.Version = null;
LDAddDeviceRequest.prototype.Description = null;
function LDSetDingTimeoutRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.DingTimeoutMillis = e['t'];
    else
        this.DingTimeoutMillis = null;
}
LDSetDingTimeoutRequest.prototype = new LDJSONLoggable();
LDSetDingTimeoutRequest.prototype.constructor = LDSetDingTimeoutRequest;
LDSetDingTimeoutRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.DingTimeoutMillis !== null) o['t'] = this.DingTimeoutMillis;
    return o;
}
LDSetDingTimeoutRequest.prototype.DingTimeoutMillis = null;
function LDGetCloudConfigRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDGetCloudConfigRequest.prototype = new LDJSONLoggable();
LDGetCloudConfigRequest.prototype.constructor = LDGetCloudConfigRequest;
LDGetCloudConfigRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDSetCloudConfigRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Config = new LDCloudConfig(e['c']);
}
LDSetCloudConfigRequest.prototype = new LDJSONLoggable();
LDSetCloudConfigRequest.prototype.constructor = LDSetCloudConfigRequest;
LDSetCloudConfigRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Config !== null) o['c'] = this.Config.encode();
    return o;
}
LDSetCloudConfigRequest.prototype.Config = null;
function LDRefreshCloudConfigRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDRefreshCloudConfigRequest.prototype = new LDJSONLoggable();
LDRefreshCloudConfigRequest.prototype.constructor = LDRefreshCloudConfigRequest;
LDRefreshCloudConfigRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDDisconnectCloudSyncRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDDisconnectCloudSyncRequest.prototype = new LDJSONLoggable();
LDDisconnectCloudSyncRequest.prototype.constructor = LDDisconnectCloudSyncRequest;
LDDisconnectCloudSyncRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDOptInForGamingRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.OptIn = e['o'];
    else
        this.OptIn = null;
}
LDOptInForGamingRequest.prototype = new LDJSONLoggable();
LDOptInForGamingRequest.prototype.constructor = LDOptInForGamingRequest;
LDOptInForGamingRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.OptIn !== null) o['o'] = this.OptIn;
    return o;
}
LDOptInForGamingRequest.prototype.OptIn = null;
function LDFindGamersRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.GameId = new LDItemId(e['g']);
    if(e && (e['x'] !== null && e['x'] !== undefined))
        this.Latitude = e['x'];
    else
        this.Latitude = null;
    if(e && (e['y'] !== null && e['y'] !== undefined))
        this.Longitude = e['y'];
    else
        this.Longitude = null;
}
LDFindGamersRequest.prototype = new LDJSONLoggable();
LDFindGamersRequest.prototype.constructor = LDFindGamersRequest;
LDFindGamersRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.GameId !== null) o['g'] = this.GameId.encode();
    if(this.Latitude !== null) o['x'] = this.Latitude;
    if(this.Longitude !== null) o['y'] = this.Longitude;
    return o;
}
LDFindGamersRequest.prototype.GameId = null;
LDFindGamersRequest.prototype.Latitude = null;
LDFindGamersRequest.prototype.Longitude = null;
function LDUpdateChallengeLocationRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['x'] !== null && e['x'] !== undefined))
        this.Latitude = e['x'];
    else
        this.Latitude = null;
    if(e && (e['y'] !== null && e['y'] !== undefined))
        this.Longitude = e['y'];
    else
        this.Longitude = null;
}
LDUpdateChallengeLocationRequest.prototype = new LDJSONLoggable();
LDUpdateChallengeLocationRequest.prototype.constructor = LDUpdateChallengeLocationRequest;
LDUpdateChallengeLocationRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Latitude !== null) o['x'] = this.Latitude;
    if(this.Longitude !== null) o['y'] = this.Longitude;
    return o;
}
LDUpdateChallengeLocationRequest.prototype.Latitude = null;
LDUpdateChallengeLocationRequest.prototype.Longitude = null;
function LDGameChallengeCompleteRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDGameChallengeId(e['i']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Score = e['s'];
    else
        this.Score = null;
    if(e && (e['x'] !== null && e['x'] !== undefined))
        this.ChallengeRejected = e['x'];
    else
        this.ChallengeRejected = null;
}
LDGameChallengeCompleteRequest.prototype = new LDJSONLoggable();
LDGameChallengeCompleteRequest.prototype.constructor = LDGameChallengeCompleteRequest;
LDGameChallengeCompleteRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Id !== null) o['i'] = this.Id.encode();
    if(this.Score !== null) o['s'] = this.Score;
    if(this.ChallengeRejected !== null) o['x'] = this.ChallengeRejected;
    return o;
}
LDGameChallengeCompleteRequest.prototype.Id = null;
LDGameChallengeCompleteRequest.prototype.Score = null;
LDGameChallengeCompleteRequest.prototype.ChallengeRejected = null;
function LDGameChallengeRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDGameChallengeId(e['i']);
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.ReceiverAccount = e['r'];
    else
        this.ReceiverAccount = null;
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.GameId = new LDItemId(e['g']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Score = e['s'];
    else
        this.Score = null;
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.GameState = e['t'];
    else
        this.GameState = null;
}
LDGameChallengeRequest.prototype = new LDJSONLoggable();
LDGameChallengeRequest.prototype.constructor = LDGameChallengeRequest;
LDGameChallengeRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Id !== null) o['i'] = this.Id.encode();
    if(this.ReceiverAccount !== null) o['r'] = this.ReceiverAccount;
    if(this.GameId !== null) o['g'] = this.GameId.encode();
    if(this.Score !== null) o['s'] = this.Score;
    if(this.GameState !== null) o['t'] = this.GameState;
    return o;
}
LDGameChallengeRequest.prototype.Id = null;
LDGameChallengeRequest.prototype.ReceiverAccount = null;
LDGameChallengeRequest.prototype.GameId = null;
LDGameChallengeRequest.prototype.Score = null;
LDGameChallengeRequest.prototype.GameState = null;
function LDCheckAccountOptedInRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
}
LDCheckAccountOptedInRequest.prototype = new LDJSONLoggable();
LDCheckAccountOptedInRequest.prototype.constructor = LDCheckAccountOptedInRequest;
LDCheckAccountOptedInRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Account !== null) o['a'] = this.Account;
    return o;
}
LDCheckAccountOptedInRequest.prototype.Account = null;
function LDCreateSubscriptionRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfilePictureLinkString = e['p'];
    else
        this.ProfilePictureLinkString = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.ProfileDecryptedHash = new Buffer(e['d'], 'base64');
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Type = e['t'];
    else
        this.Type = null;
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.CanRead = e['r'];
    else
        this.CanRead = null;
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDCreateSubscriptionRequest.prototype = new LDJSONLoggable();
LDCreateSubscriptionRequest.prototype.constructor = LDCreateSubscriptionRequest;
LDCreateSubscriptionRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Name !== null) o['n'] = this.Name;
    if(this.ProfilePictureLinkString !== null) o['p'] = this.ProfilePictureLinkString;
    if(this.ProfileDecryptedHash !== null) o['d'] = this.ProfileDecryptedHash.toString('base64');
    if(this.Type !== null) o['t'] = this.Type;
    if(this.CanRead !== null) o['r'] = this.CanRead;
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDCreateSubscriptionRequest.prototype.Name = null;
LDCreateSubscriptionRequest.prototype.ProfilePictureLinkString = null;
LDCreateSubscriptionRequest.prototype.ProfileDecryptedHash = null;
LDCreateSubscriptionRequest.prototype.Type = null;
LDCreateSubscriptionRequest.prototype.CanRead = null;
LDCreateSubscriptionRequest.prototype.Feed = null;
function LDGetHighScoreRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.GameId = new LDItemId(e['id']);
    if(e && (e['sb'] !== null && e['sb'] !== undefined))
        this.GameScoreboard = e['sb'];
    else
        this.GameScoreboard = null;
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['la'] !== null && e['la'] !== undefined))
        this.Latitude = e['la'];
    if(e && (e['lo'] !== null && e['lo'] !== undefined))
        this.Longitude = e['lo'];
    if(e && (e['sc'] !== null && e['sc'] !== undefined))
        this.SimilarScoresInCity = e['sc'];
    else
        this.SimilarScoresInCity = null;
    if(e && (e['su'] !== null && e['su'] !== undefined))
        this.SimilarScoresInCountry = e['su'];
    else
        this.SimilarScoresInCountry = null;
    if(e && (e['st'] !== null && e['st'] !== undefined))
        this.SimilarScoresInContinent = e['st'];
    else
        this.SimilarScoresInContinent = null;
    if(e && (e['sg'] !== null && e['sg'] !== undefined))
        this.SimilarScoresGlobal = e['sg'];
    else
        this.SimilarScoresGlobal = null;
    if(e && (e['sl'] !== null && e['sl'] !== undefined))
        this.SimilarScoresLocal = e['sl'];
    else
        this.SimilarScoresLocal = null;
}
LDGetHighScoreRequest.prototype = new LDJSONLoggable();
LDGetHighScoreRequest.prototype.constructor = LDGetHighScoreRequest;
LDGetHighScoreRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.GameId !== null) o['id'] = this.GameId.encode();
    if(this.GameScoreboard !== null) o['sb'] = this.GameScoreboard;
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Latitude !== null) o['la'] = this.Latitude;
    if(this.Longitude !== null) o['lo'] = this.Longitude;
    if(this.SimilarScoresInCity !== null) o['sc'] = this.SimilarScoresInCity;
    if(this.SimilarScoresInCountry !== null) o['su'] = this.SimilarScoresInCountry;
    if(this.SimilarScoresInContinent !== null) o['st'] = this.SimilarScoresInContinent;
    if(this.SimilarScoresGlobal !== null) o['sg'] = this.SimilarScoresGlobal;
    if(this.SimilarScoresLocal !== null) o['sl'] = this.SimilarScoresLocal;
    return o;
}
LDGetHighScoreRequest.prototype.GameId = null;
LDGetHighScoreRequest.prototype.GameScoreboard = null;
LDGetHighScoreRequest.prototype.Account = null;
LDGetHighScoreRequest.prototype.Latitude = null;
LDGetHighScoreRequest.prototype.Longitude = null;
LDGetHighScoreRequest.prototype.SimilarScoresInCity = null;
LDGetHighScoreRequest.prototype.SimilarScoresInCountry = null;
LDGetHighScoreRequest.prototype.SimilarScoresInContinent = null;
LDGetHighScoreRequest.prototype.SimilarScoresGlobal = null;
LDGetHighScoreRequest.prototype.SimilarScoresLocal = null;
function LDReportScoreRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.GameId = new LDItemId(e['id']);
    if(e && (e['sb'] !== null && e['sb'] !== undefined))
        this.GameScoreboard = e['sb'];
    else
        this.GameScoreboard = null;
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Score = e['s'];
    if(e && (e['la'] !== null && e['la'] !== undefined))
        this.Latitude = e['la'];
    if(e && (e['lo'] !== null && e['lo'] !== undefined))
        this.Longitude = e['lo'];
    if(e && (e['sc'] !== null && e['sc'] !== undefined))
        this.SimilarScoresInCity = e['sc'];
    else
        this.SimilarScoresInCity = null;
    if(e && (e['su'] !== null && e['su'] !== undefined))
        this.SimilarScoresInCountry = e['su'];
    else
        this.SimilarScoresInCountry = null;
    if(e && (e['st'] !== null && e['st'] !== undefined))
        this.SimilarScoresInContinent = e['st'];
    else
        this.SimilarScoresInContinent = null;
    if(e && (e['sg'] !== null && e['sg'] !== undefined))
        this.SimilarScoresGlobal = e['sg'];
    else
        this.SimilarScoresGlobal = null;
    if(e && (e['sl'] !== null && e['sl'] !== undefined))
        this.SimilarScoresLocal = e['sl'];
    else
        this.SimilarScoresLocal = null;
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
}
LDReportScoreRequest.prototype = new LDJSONLoggable();
LDReportScoreRequest.prototype.constructor = LDReportScoreRequest;
LDReportScoreRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.GameId !== null) o['id'] = this.GameId.encode();
    if(this.GameScoreboard !== null) o['sb'] = this.GameScoreboard;
    if(this.Score !== null) o['s'] = this.Score;
    if(this.Latitude !== null) o['la'] = this.Latitude;
    if(this.Longitude !== null) o['lo'] = this.Longitude;
    if(this.SimilarScoresInCity !== null) o['sc'] = this.SimilarScoresInCity;
    if(this.SimilarScoresInCountry !== null) o['su'] = this.SimilarScoresInCountry;
    if(this.SimilarScoresInContinent !== null) o['st'] = this.SimilarScoresInContinent;
    if(this.SimilarScoresGlobal !== null) o['sg'] = this.SimilarScoresGlobal;
    if(this.SimilarScoresLocal !== null) o['sl'] = this.SimilarScoresLocal;
    if(this.Account !== null) o['a'] = this.Account;
    return o;
}
LDReportScoreRequest.prototype.GameId = null;
LDReportScoreRequest.prototype.GameScoreboard = null;
LDReportScoreRequest.prototype.Score = null;
LDReportScoreRequest.prototype.Latitude = null;
LDReportScoreRequest.prototype.Longitude = null;
LDReportScoreRequest.prototype.SimilarScoresInCity = null;
LDReportScoreRequest.prototype.SimilarScoresInCountry = null;
LDReportScoreRequest.prototype.SimilarScoresInContinent = null;
LDReportScoreRequest.prototype.SimilarScoresGlobal = null;
LDReportScoreRequest.prototype.SimilarScoresLocal = null;
LDReportScoreRequest.prototype.Account = null;
function LDGetTopScoresRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.GameId = new LDItemId(e['id']);
    if(e && (e['sb'] !== null && e['sb'] !== undefined))
        this.GameScoreboard = e['sb'];
    else
        this.GameScoreboard = null;
    if(e && (e['la'] !== null && e['la'] !== undefined))
        this.Latitude = e['la'];
    if(e && (e['lo'] !== null && e['lo'] !== undefined))
        this.Longitude = e['lo'];
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.NumScores = e['n'];
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.LocationType = e['l'];
    else
        this.LocationType = null;
}
LDGetTopScoresRequest.prototype = new LDJSONLoggable();
LDGetTopScoresRequest.prototype.constructor = LDGetTopScoresRequest;
LDGetTopScoresRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.GameId !== null) o['id'] = this.GameId.encode();
    if(this.GameScoreboard !== null) o['sb'] = this.GameScoreboard;
    if(this.Latitude !== null) o['la'] = this.Latitude;
    if(this.Longitude !== null) o['lo'] = this.Longitude;
    if(this.NumScores !== null) o['n'] = this.NumScores;
    if(this.LocationType !== null) o['l'] = this.LocationType;
    return o;
}
LDGetTopScoresRequest.prototype.GameId = null;
LDGetTopScoresRequest.prototype.GameScoreboard = null;
LDGetTopScoresRequest.prototype.Latitude = null;
LDGetTopScoresRequest.prototype.Longitude = null;
LDGetTopScoresRequest.prototype.NumScores = null;
LDGetTopScoresRequest.prototype.LocationType = null;
function LDBroadcastItemRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Item = new LDNearbyItemContainer(e['i']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Pin = e['p'];
    else
        this.Pin = null;
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.Ttl = e['e'];
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Latitude = e['a'];
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.Longitude = e['g'];
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Radius = e['r'];
}
LDBroadcastItemRequest.prototype = new LDJSONLoggable();
LDBroadcastItemRequest.prototype.constructor = LDBroadcastItemRequest;
LDBroadcastItemRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Item !== null) o['i'] = this.Item.encode();
    if(this.Pin !== null) o['p'] = this.Pin;
    if(this.Ttl !== null) o['e'] = this.Ttl;
    if(this.Latitude !== null) o['a'] = this.Latitude;
    if(this.Longitude !== null) o['g'] = this.Longitude;
    if(this.Radius !== null) o['r'] = this.Radius;
    return o;
}
LDBroadcastItemRequest.prototype.Item = null;
LDBroadcastItemRequest.prototype.Pin = null;
LDBroadcastItemRequest.prototype.Ttl = null;
LDBroadcastItemRequest.prototype.Latitude = null;
LDBroadcastItemRequest.prototype.Longitude = null;
LDBroadcastItemRequest.prototype.Radius = null;
function LDUnbroadcastItemRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Item = new LDNearbyItemContainer(e['i']);
}
LDUnbroadcastItemRequest.prototype = new LDJSONLoggable();
LDUnbroadcastItemRequest.prototype.constructor = LDUnbroadcastItemRequest;
LDUnbroadcastItemRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Item !== null) o['i'] = this.Item.encode();
    return o;
}
LDUnbroadcastItemRequest.prototype.Item = null;
function LDSubscribeForNearbyItemsRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.ItemType = e['t'];
    else
        this.ItemType = null;
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.Ttl = e['e'];
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Latitude = e['a'];
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.Longitude = e['g'];
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Radius = e['r'];
}
LDSubscribeForNearbyItemsRequest.prototype = new LDJSONLoggable();
LDSubscribeForNearbyItemsRequest.prototype.constructor = LDSubscribeForNearbyItemsRequest;
LDSubscribeForNearbyItemsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ItemType !== null) o['t'] = this.ItemType;
    if(this.Ttl !== null) o['e'] = this.Ttl;
    if(this.Latitude !== null) o['a'] = this.Latitude;
    if(this.Longitude !== null) o['g'] = this.Longitude;
    if(this.Radius !== null) o['r'] = this.Radius;
    return o;
}
LDSubscribeForNearbyItemsRequest.prototype.ItemType = null;
LDSubscribeForNearbyItemsRequest.prototype.Ttl = null;
LDSubscribeForNearbyItemsRequest.prototype.Latitude = null;
LDSubscribeForNearbyItemsRequest.prototype.Longitude = null;
LDSubscribeForNearbyItemsRequest.prototype.Radius = null;
function LDUnsubscribeForNearbyItemsRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDUnsubscribeForNearbyItemsRequest.prototype = new LDJSONLoggable();
LDUnsubscribeForNearbyItemsRequest.prototype.constructor = LDUnsubscribeForNearbyItemsRequest;
LDUnsubscribeForNearbyItemsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDFetchNearbyItemsRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.ItemType = e['t'];
    else
        this.ItemType = null;
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Latitude = e['a'];
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.Longitude = e['g'];
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Radius = e['r'];
}
LDFetchNearbyItemsRequest.prototype = new LDJSONLoggable();
LDFetchNearbyItemsRequest.prototype.constructor = LDFetchNearbyItemsRequest;
LDFetchNearbyItemsRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ItemType !== null) o['t'] = this.ItemType;
    if(this.Latitude !== null) o['a'] = this.Latitude;
    if(this.Longitude !== null) o['g'] = this.Longitude;
    if(this.Radius !== null) o['r'] = this.Radius;
    return o;
}
LDFetchNearbyItemsRequest.prototype.ItemType = null;
LDFetchNearbyItemsRequest.prototype.Latitude = null;
LDFetchNearbyItemsRequest.prototype.Longitude = null;
LDFetchNearbyItemsRequest.prototype.Radius = null;
function LDItemBroadcastStateChangedPush(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Item = new LDNearbyItemContainer(e['i']);
}
LDItemBroadcastStateChangedPush.prototype = new LDJSONLoggable();
LDItemBroadcastStateChangedPush.prototype.constructor = LDItemBroadcastStateChangedPush;
LDItemBroadcastStateChangedPush.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Item !== null) o['i'] = this.Item.encode();
    return o;
}
LDItemBroadcastStateChangedPush.prototype.Item = null;
function LDSubscriptionTerminatedPush(e) { 
    LDJSONLoggable.call(this, e);
}
LDSubscriptionTerminatedPush.prototype = new LDJSONLoggable();
LDSubscriptionTerminatedPush.prototype.constructor = LDSubscriptionTerminatedPush;
LDSubscriptionTerminatedPush.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDUrlToStoryRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.Url = e['l'];
    else
        this.Url = null;
}
LDUrlToStoryRequest.prototype = new LDJSONLoggable();
LDUrlToStoryRequest.prototype.constructor = LDUrlToStoryRequest;
LDUrlToStoryRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Url !== null) o['l'] = this.Url;
    return o;
}
LDUrlToStoryRequest.prototype.Url = null;
function LDImageSearchRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Term = e['t'];
    else
        this.Term = null;
}
LDImageSearchRequest.prototype = new LDJSONLoggable();
LDImageSearchRequest.prototype.constructor = LDImageSearchRequest;
LDImageSearchRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Term !== null) o['t'] = this.Term;
    return o;
}
LDImageSearchRequest.prototype.Term = null;
function LDFailureReportRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Failure = e['t'];
    else
        this.Failure = null;
}
LDFailureReportRequest.prototype = new LDJSONLoggable();
LDFailureReportRequest.prototype.constructor = LDFailureReportRequest;
LDFailureReportRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Failure !== null) o['t'] = this.Failure;
    return o;
}
LDFailureReportRequest.prototype.Failure = null;
function LDFlagUserRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Reason = e['r'];
    else
        this.Reason = null;
}
LDFlagUserRequest.prototype = new LDJSONLoggable();
LDFlagUserRequest.prototype.constructor = LDFlagUserRequest;
LDFlagUserRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Reason !== null) o['r'] = this.Reason;
    return o;
}
LDFlagUserRequest.prototype.Account = null;
LDFlagUserRequest.prototype.Reason = null;
function LDCreatePlaygroundRequest(e) { 
    LDJSONLoggable.call(this, e);
}
LDCreatePlaygroundRequest.prototype = new LDJSONLoggable();
LDCreatePlaygroundRequest.prototype.constructor = LDCreatePlaygroundRequest;
LDCreatePlaygroundRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    return o;
}
function LDGetDirectFeedRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Sender = new LDIdentity(e['s']);
    if(e && (e['r'] !== null && e['r'] !== undefined)) { 
        this.Recipients = [];
        var d = e['r'];
        for(var k = 0; k < d.length; ++k) this.Recipients.push(new LDIdentity(d[k]));
    }
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.FeedKind = e['k'];
    else
        this.FeedKind = null;
}
LDGetDirectFeedRequest.prototype = new LDJSONLoggable();
LDGetDirectFeedRequest.prototype.constructor = LDGetDirectFeedRequest;
LDGetDirectFeedRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Sender !== null) o['s'] = this.Sender.encode();
    if(this.Recipients !== null) { 
        o['r'] = [];
        var d = this.Recipients;
        for(var k = 0; k < d.length; ++k) o['r'].push(d[k].encode());
    } else {
        o['Recipients'] = null;
    }
    if(this.FeedKind !== null) o['k'] = this.FeedKind;
    return o;
}
LDGetDirectFeedRequest.prototype.Sender = null;
LDGetDirectFeedRequest.prototype.Recipients = null;
LDGetDirectFeedRequest.prototype.FeedKind = null;
function LDSendDirectMessageRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['_f'] !== null && e['_f'] !== undefined))
        this.Feed = new LDFeed(e['_f']);
    if(e && (e['_a'] !== null && e['_a'] !== undefined)) { 
        this.Accounts = [];
        var d = e['_a'];
        for(var k = 0; k < d.length; ++k) this.Accounts.push(d[k]);
    }
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Sender = new LDIdentity(e['s']);
    if(e && (e['r'] !== null && e['r'] !== undefined)) { 
        this.Recipients = [];
        var d = e['r'];
        for(var k = 0; k < d.length; ++k) this.Recipients.push(new LDIdentity(d[k]));
    }
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.FeedKind = e['k'];
    else
        this.FeedKind = null;
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDTypedId(e['i']);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Body = new Buffer(e['b'], 'base64');
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Version = e['v'];
    else
        this.Version = null;
    if(e && (e['w'] !== null && e['w'] !== undefined))
        this.AnyMemberWritable = e['w'];
    else
        this.AnyMemberWritable = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.SmsId = e['d'];
    else
        this.SmsId = null;
}
LDSendDirectMessageRequest.prototype = new LDJSONLoggable();
LDSendDirectMessageRequest.prototype.constructor = LDSendDirectMessageRequest;
LDSendDirectMessageRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['_f'] = this.Feed.encode();
    if(this.Accounts !== null) { 
        o['_a'] = [];
        var d = this.Accounts;
        for(var k = 0; k < d.length; ++k) o['_a'].push(d[k]);
    } else {
        o['Accounts'] = null;
    }
    if(this.Sender !== null) o['s'] = this.Sender.encode();
    if(this.Recipients !== null) { 
        o['r'] = [];
        var d = this.Recipients;
        for(var k = 0; k < d.length; ++k) o['r'].push(d[k].encode());
    } else {
        o['Recipients'] = null;
    }
    if(this.FeedKind !== null) o['k'] = this.FeedKind;
    if(this.Id !== null) o['i'] = this.Id.encode();
    if(this.Body !== null) o['b'] = this.Body.toString('base64');
    if(this.Version !== null) o['v'] = this.Version;
    if(this.AnyMemberWritable !== null) o['w'] = this.AnyMemberWritable;
    if(this.SmsId !== null) o['d'] = this.SmsId;
    return o;
}
LDSendDirectMessageRequest.prototype.Feed = null;
LDSendDirectMessageRequest.prototype.Accounts = null;
LDSendDirectMessageRequest.prototype.Sender = null;
LDSendDirectMessageRequest.prototype.Recipients = null;
LDSendDirectMessageRequest.prototype.FeedKind = null;
LDSendDirectMessageRequest.prototype.Id = null;
LDSendDirectMessageRequest.prototype.Body = null;
LDSendDirectMessageRequest.prototype.Version = null;
LDSendDirectMessageRequest.prototype.AnyMemberWritable = null;
LDSendDirectMessageRequest.prototype.SmsId = null;
function LDSetSmsParticipationRequest(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['o'] !== null && e['o'] !== undefined))
        this.OptOut = e['o'];
    else
        this.OptOut = null;
}
LDSetSmsParticipationRequest.prototype = new LDJSONLoggable();
LDSetSmsParticipationRequest.prototype.constructor = LDSetSmsParticipationRequest;
LDSetSmsParticipationRequest.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.OptOut !== null) o['o'] = this.OptOut;
    return o;
}
LDSetSmsParticipationRequest.prototype.OptOut = null;
function LDGetMessageResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Message = new LDMessage(e['m']);
}
LDGetMessageResponse.prototype = new LDJSONLoggable();
LDGetMessageResponse.prototype.constructor = LDGetMessageResponse;
LDGetMessageResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Message !== null) o['m'] = this.Message.encode();
    return o;
}
LDGetMessageResponse.prototype.Message = null;
function LDGetMessagesResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined)) { 
        this.Messages = [];
        var d = e['m'];
        for(var k = 0; k < d.length; ++k) this.Messages.push(new LDMessage(d[k]));
    }
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Partial = e['p'];
    else
        this.Partial = null;
}
LDGetMessagesResponse.prototype = new LDJSONLoggable();
LDGetMessagesResponse.prototype.constructor = LDGetMessagesResponse;
LDGetMessagesResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Messages !== null) { 
        o['m'] = [];
        var d = this.Messages;
        for(var k = 0; k < d.length; ++k) o['m'].push(d[k].encode());
    } else {
        o['Messages'] = null;
    }
    if(this.Partial !== null) o['p'] = this.Partial;
    return o;
}
LDGetMessagesResponse.prototype.Messages = null;
LDGetMessagesResponse.prototype.Partial = null;
function LDGetMessagesWithContinuationResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['m'] !== null && e['m'] !== undefined)) { 
        this.Messages = [];
        var d = e['m'];
        for(var k = 0; k < d.length; ++k) this.Messages.push(new LDMessage(d[k]));
    }
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContinuationKey = new Buffer(e['c'], 'base64');
}
LDGetMessagesWithContinuationResponse.prototype = new LDJSONLoggable();
LDGetMessagesWithContinuationResponse.prototype.constructor = LDGetMessagesWithContinuationResponse;
LDGetMessagesWithContinuationResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Messages !== null) { 
        o['m'] = [];
        var d = this.Messages;
        for(var k = 0; k < d.length; ++k) o['m'].push(d[k].encode());
    } else {
        o['Messages'] = null;
    }
    if(this.ContinuationKey !== null) o['c'] = this.ContinuationKey.toString('base64');
    return o;
}
LDGetMessagesWithContinuationResponse.prototype.Messages = null;
LDGetMessagesWithContinuationResponse.prototype.ContinuationKey = null;
function LDGetJoinFeedLinkResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.JoinLink = new LDJoinFeedLink(e['l']);
}
LDGetJoinFeedLinkResponse.prototype = new LDJSONLoggable();
LDGetJoinFeedLinkResponse.prototype.constructor = LDGetJoinFeedLinkResponse;
LDGetJoinFeedLinkResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.JoinLink !== null) o['l'] = this.JoinLink.encode();
    return o;
}
LDGetJoinFeedLinkResponse.prototype.JoinLink = null;
function LDGetPublicFeedDetailsResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
    if(e && (e['td'] !== null && e['td'] !== undefined))
        this.ThumbnailLink = e['td'];
    else
        this.ThumbnailLink = null;
}
LDGetPublicFeedDetailsResponse.prototype = new LDJSONLoggable();
LDGetPublicFeedDetailsResponse.prototype.constructor = LDGetPublicFeedDetailsResponse;
LDGetPublicFeedDetailsResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Name !== null) o['n'] = this.Name;
    if(this.ThumbnailLink !== null) o['td'] = this.ThumbnailLink;
    return o;
}
LDGetPublicFeedDetailsResponse.prototype.Name = null;
LDGetPublicFeedDetailsResponse.prototype.ThumbnailLink = null;
function LDDirtyFeedsResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['d'] !== null && e['d'] !== undefined)) { 
        this.Dirty = [];
        var d = e['d'];
        for(var k = 0; k < d.length; ++k) this.Dirty.push(new LDDirtyFeed(d[k]));
    }
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Partial = e['p'];
    if(e && (e['w'] !== null && e['w'] !== undefined))
        this.Window = e['w'];
    else
        this.Window = null;
}
LDDirtyFeedsResponse.prototype = new LDJSONLoggable();
LDDirtyFeedsResponse.prototype.constructor = LDDirtyFeedsResponse;
LDDirtyFeedsResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Dirty !== null) { 
        o['d'] = [];
        var d = this.Dirty;
        for(var k = 0; k < d.length; ++k) o['d'].push(d[k].encode());
    } else {
        o['Dirty'] = null;
    }
    if(this.Partial !== null) o['p'] = this.Partial;
    if(this.Window !== null) o['w'] = this.Window;
    return o;
}
LDDirtyFeedsResponse.prototype.Dirty = null;
LDDirtyFeedsResponse.prototype.Partial = null;
LDDirtyFeedsResponse.prototype.Window = null;
function LDFeedStateResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.LastWriteTime = e['t'];
    else
        this.LastWriteTime = null;
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AcceptanceState = e['a'];
    else
        this.AcceptanceState = null;
}
LDFeedStateResponse.prototype = new LDJSONLoggable();
LDFeedStateResponse.prototype.constructor = LDFeedStateResponse;
LDFeedStateResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.LastWriteTime !== null) o['t'] = this.LastWriteTime;
    if(this.AcceptanceState !== null) o['a'] = this.AcceptanceState;
    return o;
}
LDFeedStateResponse.prototype.LastWriteTime = null;
LDFeedStateResponse.prototype.AcceptanceState = null;
function LDGetUploadTicketResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['ut'] !== null && e['ut'] !== undefined))
        this.BlobUploadTicket = new LDBlobUploadTicket(e['ut']);
}
LDGetUploadTicketResponse.prototype = new LDJSONLoggable();
LDGetUploadTicketResponse.prototype.constructor = LDGetUploadTicketResponse;
LDGetUploadTicketResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.BlobUploadTicket !== null) o['ut'] = this.BlobUploadTicket.encode();
    return o;
}
LDGetUploadTicketResponse.prototype.BlobUploadTicket = null;
function LDGetDownloadTicketResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['dt'] !== null && e['dt'] !== undefined))
        this.BlobDownloadTicket = new LDBlobDownloadTicket(e['dt']);
}
LDGetDownloadTicketResponse.prototype = new LDJSONLoggable();
LDGetDownloadTicketResponse.prototype.constructor = LDGetDownloadTicketResponse;
LDGetDownloadTicketResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.BlobDownloadTicket !== null) o['dt'] = this.BlobDownloadTicket.encode();
    return o;
}
LDGetDownloadTicketResponse.prototype.BlobDownloadTicket = null;
function LDGetContactDetailsResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactDetails = new LDContactDetails(e['c']);
}
LDGetContactDetailsResponse.prototype = new LDJSONLoggable();
LDGetContactDetailsResponse.prototype.constructor = LDGetContactDetailsResponse;
LDGetContactDetailsResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ContactDetails !== null) o['c'] = this.ContactDetails.encode();
    return o;
}
LDGetContactDetailsResponse.prototype.ContactDetails = null;
function LDGetProfileDetailsResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfileDetails = new LDProfileDetails(e['p']);
}
LDGetProfileDetailsResponse.prototype = new LDJSONLoggable();
LDGetProfileDetailsResponse.prototype.constructor = LDGetProfileDetailsResponse;
LDGetProfileDetailsResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ProfileDetails !== null) o['p'] = this.ProfileDetails.encode();
    return o;
}
LDGetProfileDetailsResponse.prototype.ProfileDetails = null;
function LDGetOmletContactProfileResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ContactProfile = new LDContactProfile(e['p']);
}
LDGetOmletContactProfileResponse.prototype = new LDJSONLoggable();
LDGetOmletContactProfileResponse.prototype.constructor = LDGetOmletContactProfileResponse;
LDGetOmletContactProfileResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ContactProfile !== null) o['p'] = this.ContactProfile.encode();
    return o;
}
LDGetOmletContactProfileResponse.prototype.ContactProfile = null;
function LDGetProfilePublicStateResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfilePublicState = new LDProfilePublicState(e['p']);
}
LDGetProfilePublicStateResponse.prototype = new LDJSONLoggable();
LDGetProfilePublicStateResponse.prototype.constructor = LDGetProfilePublicStateResponse;
LDGetProfilePublicStateResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ProfilePublicState !== null) o['p'] = this.ProfilePublicState.encode();
    return o;
}
LDGetProfilePublicStateResponse.prototype.ProfilePublicState = null;
function LDGetContactProfileAndPublicStateResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContactProfile = new LDContactProfile(e['c']);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfilePublicState = new LDProfilePublicState(e['p']);
}
LDGetContactProfileAndPublicStateResponse.prototype = new LDJSONLoggable();
LDGetContactProfileAndPublicStateResponse.prototype.constructor = LDGetContactProfileAndPublicStateResponse;
LDGetContactProfileAndPublicStateResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ContactProfile !== null) o['c'] = this.ContactProfile.encode();
    if(this.ProfilePublicState !== null) o['p'] = this.ProfilePublicState.encode();
    return o;
}
LDGetContactProfileAndPublicStateResponse.prototype.ContactProfile = null;
LDGetContactProfileAndPublicStateResponse.prototype.ProfilePublicState = null;
function LDGetContactProfileResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ContactProfile = new LDContactProfile(e['p']);
}
LDGetContactProfileResponse.prototype = new LDJSONLoggable();
LDGetContactProfileResponse.prototype.constructor = LDGetContactProfileResponse;
LDGetContactProfileResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Account !== null) o['a'] = this.Account;
    if(this.ContactProfile !== null) o['p'] = this.ContactProfile.encode();
    return o;
}
LDGetContactProfileResponse.prototype.Account = null;
LDGetContactProfileResponse.prototype.ContactProfile = null;
function LDGetItemInfoResponse(e) { 
    if(e && (e['ii'] !== null && e['ii'] !== undefined))
        this.ItemInfoContainer = new LDItemInfoContainer(e['ii']);
}
LDGetItemInfoResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemInfoContainer !== null) o['ii'] = this.ItemInfoContainer.encode();
    return o;
}
LDGetItemInfoResponse.prototype.ItemInfoContainer = null;
function LDListItemsResponse(e) { 
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.ItemInfoListingContainer = new LDItemInfoListingContainer(e['l']);
}
LDListItemsResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemInfoListingContainer !== null) o['l'] = this.ItemInfoListingContainer.encode();
    return o;
}
LDListItemsResponse.prototype.ItemInfoListingContainer = null;
function LDGenerateGrantForItemResponse(e) { 
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.ShareLink = e['s'];
    else
        this.ShareLink = null;
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.RawKey = new Buffer(e['r'], 'base64');
}
LDGenerateGrantForItemResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ShareLink !== null) o['s'] = this.ShareLink;
    if(this.RawKey !== null) o['r'] = this.RawKey.toString('base64');
    return o;
}
LDGenerateGrantForItemResponse.prototype.ShareLink = null;
LDGenerateGrantForItemResponse.prototype.RawKey = null;
function LDGenerateApiKeyResponse(e) { 
    if(e && (e['ak'] !== null && e['ak'] !== undefined))
        this.ApiKey = new LDApiKey(e['ak']);
}
LDGenerateApiKeyResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ApiKey !== null) o['ak'] = this.ApiKey.encode();
    return o;
}
LDGenerateApiKeyResponse.prototype.ApiKey = null;
function LDListApiKeysResponse(e) { 
    if(e && (e['ak'] !== null && e['ak'] !== undefined)) { 
        this.ApiKeys = [];
        var d = e['ak'];
        for(var k = 0; k < d.length; ++k) this.ApiKeys.push(new LDApiKey(d[k]));
    }
}
LDListApiKeysResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ApiKeys !== null) { 
        o['ak'] = [];
        var d = this.ApiKeys;
        for(var k = 0; k < d.length; ++k) o['ak'].push(d[k].encode());
    } else {
        o['ApiKeys'] = null;
    }
    return o;
}
LDListApiKeysResponse.prototype.ApiKeys = null;
function LDGetCloudConfigResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Config = new LDCloudConfig(e['c']);
}
LDGetCloudConfigResponse.prototype = new LDJSONLoggable();
LDGetCloudConfigResponse.prototype.constructor = LDGetCloudConfigResponse;
LDGetCloudConfigResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Config !== null) o['c'] = this.Config.encode();
    return o;
}
LDGetCloudConfigResponse.prototype.Config = null;
function LDFindGamersResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined)) { 
        this.Candidates = [];
        var d = e['c'];
        for(var k = 0; k < d.length; ++k) this.Candidates.push(d[k]);
    }
    if(e && (e['lt'] !== null && e['lt'] !== undefined))
        this.LocationType = e['lt'];
    else
        this.LocationType = null;
    if(e && (e['ln'] !== null && e['ln'] !== undefined))
        this.LocationName = e['ln'];
    else
        this.LocationName = null;
}
LDFindGamersResponse.prototype = new LDJSONLoggable();
LDFindGamersResponse.prototype.constructor = LDFindGamersResponse;
LDFindGamersResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Candidates !== null) { 
        o['c'] = [];
        var d = this.Candidates;
        for(var k = 0; k < d.length; ++k) o['c'].push(d[k]);
    } else {
        o['Candidates'] = null;
    }
    if(this.LocationType !== null) o['lt'] = this.LocationType;
    if(this.LocationName !== null) o['ln'] = this.LocationName;
    return o;
}
LDFindGamersResponse.prototype.Candidates = null;
LDFindGamersResponse.prototype.LocationType = null;
LDFindGamersResponse.prototype.LocationName = null;
function LDCreateSubscriptionResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.PublishingUrl = e['u'];
    else
        this.PublishingUrl = null;
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.DevicePrivateKey = new Buffer(e['k'], 'base64');
}
LDCreateSubscriptionResponse.prototype = new LDJSONLoggable();
LDCreateSubscriptionResponse.prototype.constructor = LDCreateSubscriptionResponse;
LDCreateSubscriptionResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.PublishingUrl !== null) o['u'] = this.PublishingUrl;
    if(this.Account !== null) o['a'] = this.Account;
    if(this.DevicePrivateKey !== null) o['k'] = this.DevicePrivateKey.toString('base64');
    return o;
}
LDCreateSubscriptionResponse.prototype.PublishingUrl = null;
LDCreateSubscriptionResponse.prototype.Account = null;
LDCreateSubscriptionResponse.prototype.DevicePrivateKey = null;
function LDScoreResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.City = e['c'];
    else
        this.City = null;
    if(e && (e['cs'] !== null && e['cs'] !== undefined))
        this.CityScore = e['cs'];
    if(e && (e['cr'] !== null && e['cr'] !== undefined))
        this.CityRank = e['cr'];
    if(e && (e['cp'] !== null && e['cp'] !== undefined))
        this.CityPercentile = e['cp'];
    if(e && (e['css'] !== null && e['css'] !== undefined)) { 
        this.CitySimilarScores = [];
        var d = e['css'];
        for(var k = 0; k < d.length; ++k) this.CitySimilarScores.push(new LDScoreBoardEntry(d[k]));
    }
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.Country = e['u'];
    else
        this.Country = null;
    if(e && (e['us'] !== null && e['us'] !== undefined))
        this.CountryScore = e['us'];
    if(e && (e['ur'] !== null && e['ur'] !== undefined))
        this.CountryRank = e['ur'];
    if(e && (e['up'] !== null && e['up'] !== undefined))
        this.CountryPercentile = e['up'];
    if(e && (e['uss'] !== null && e['uss'] !== undefined)) { 
        this.CountrySimilarScores = [];
        var d = e['uss'];
        for(var k = 0; k < d.length; ++k) this.CountrySimilarScores.push(new LDScoreBoardEntry(d[k]));
    }
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Continent = e['t'];
    else
        this.Continent = null;
    if(e && (e['ts'] !== null && e['ts'] !== undefined))
        this.ContinentScore = e['ts'];
    if(e && (e['tr'] !== null && e['tr'] !== undefined))
        this.ContinentRank = e['tr'];
    if(e && (e['tp'] !== null && e['tp'] !== undefined))
        this.ContinentPercentile = e['tp'];
    if(e && (e['tss'] !== null && e['tss'] !== undefined)) { 
        this.ContinentSimilarScores = [];
        var d = e['tss'];
        for(var k = 0; k < d.length; ++k) this.ContinentSimilarScores.push(new LDScoreBoardEntry(d[k]));
    }
    if(e && (e['gs'] !== null && e['gs'] !== undefined))
        this.GlobalScore = e['gs'];
    if(e && (e['gr'] !== null && e['gr'] !== undefined))
        this.GlobalRank = e['gr'];
    if(e && (e['gp'] !== null && e['gp'] !== undefined))
        this.GlobalPercentile = e['gp'];
    if(e && (e['gss'] !== null && e['gss'] !== undefined)) { 
        this.GlobalSimilarScores = [];
        var d = e['gss'];
        for(var k = 0; k < d.length; ++k) this.GlobalSimilarScores.push(new LDScoreBoardEntry(d[k]));
    }
    if(e && (e['ll'] !== null && e['ll'] !== undefined))
        this.LocalLevel = e['ll'];
    else
        this.LocalLevel = null;
    if(e && (e['ln'] !== null && e['ln'] !== undefined))
        this.LocalLocationName = e['ln'];
    else
        this.LocalLocationName = null;
    if(e && (e['ls'] !== null && e['ls'] !== undefined))
        this.LocalScore = e['ls'];
    if(e && (e['lr'] !== null && e['lr'] !== undefined))
        this.LocalRank = e['lr'];
    if(e && (e['lp'] !== null && e['lp'] !== undefined))
        this.LocalPercentile = e['lp'];
    if(e && (e['lss'] !== null && e['lss'] !== undefined)) { 
        this.LocalSimilarScores = [];
        var d = e['lss'];
        for(var k = 0; k < d.length; ++k) this.LocalSimilarScores.push(new LDScoreBoardEntry(d[k]));
    }
    if(e && (e['dbf'] !== null && e['dbf'] !== undefined))
        this.DistanceBestFor = e['dbf'];
}
LDScoreResponse.prototype = new LDJSONLoggable();
LDScoreResponse.prototype.constructor = LDScoreResponse;
LDScoreResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.City !== null) o['c'] = this.City;
    if(this.CityScore !== null) o['cs'] = this.CityScore;
    if(this.CityRank !== null) o['cr'] = this.CityRank;
    if(this.CityPercentile !== null) o['cp'] = this.CityPercentile;
    if(this.CitySimilarScores !== null) { 
        o['css'] = [];
        var d = this.CitySimilarScores;
        for(var k = 0; k < d.length; ++k) o['css'].push(d[k].encode());
    } else {
        o['CitySimilarScores'] = null;
    }
    if(this.Country !== null) o['u'] = this.Country;
    if(this.CountryScore !== null) o['us'] = this.CountryScore;
    if(this.CountryRank !== null) o['ur'] = this.CountryRank;
    if(this.CountryPercentile !== null) o['up'] = this.CountryPercentile;
    if(this.CountrySimilarScores !== null) { 
        o['uss'] = [];
        var d = this.CountrySimilarScores;
        for(var k = 0; k < d.length; ++k) o['uss'].push(d[k].encode());
    } else {
        o['CountrySimilarScores'] = null;
    }
    if(this.Continent !== null) o['t'] = this.Continent;
    if(this.ContinentScore !== null) o['ts'] = this.ContinentScore;
    if(this.ContinentRank !== null) o['tr'] = this.ContinentRank;
    if(this.ContinentPercentile !== null) o['tp'] = this.ContinentPercentile;
    if(this.ContinentSimilarScores !== null) { 
        o['tss'] = [];
        var d = this.ContinentSimilarScores;
        for(var k = 0; k < d.length; ++k) o['tss'].push(d[k].encode());
    } else {
        o['ContinentSimilarScores'] = null;
    }
    if(this.GlobalScore !== null) o['gs'] = this.GlobalScore;
    if(this.GlobalRank !== null) o['gr'] = this.GlobalRank;
    if(this.GlobalPercentile !== null) o['gp'] = this.GlobalPercentile;
    if(this.GlobalSimilarScores !== null) { 
        o['gss'] = [];
        var d = this.GlobalSimilarScores;
        for(var k = 0; k < d.length; ++k) o['gss'].push(d[k].encode());
    } else {
        o['GlobalSimilarScores'] = null;
    }
    if(this.LocalLevel !== null) o['ll'] = this.LocalLevel;
    if(this.LocalLocationName !== null) o['ln'] = this.LocalLocationName;
    if(this.LocalScore !== null) o['ls'] = this.LocalScore;
    if(this.LocalRank !== null) o['lr'] = this.LocalRank;
    if(this.LocalPercentile !== null) o['lp'] = this.LocalPercentile;
    if(this.LocalSimilarScores !== null) { 
        o['lss'] = [];
        var d = this.LocalSimilarScores;
        for(var k = 0; k < d.length; ++k) o['lss'].push(d[k].encode());
    } else {
        o['LocalSimilarScores'] = null;
    }
    if(this.DistanceBestFor !== null) o['dbf'] = this.DistanceBestFor;
    return o;
}
LDScoreResponse.prototype.City = null;
LDScoreResponse.prototype.CityScore = null;
LDScoreResponse.prototype.CityRank = null;
LDScoreResponse.prototype.CityPercentile = null;
LDScoreResponse.prototype.CitySimilarScores = null;
LDScoreResponse.prototype.Country = null;
LDScoreResponse.prototype.CountryScore = null;
LDScoreResponse.prototype.CountryRank = null;
LDScoreResponse.prototype.CountryPercentile = null;
LDScoreResponse.prototype.CountrySimilarScores = null;
LDScoreResponse.prototype.Continent = null;
LDScoreResponse.prototype.ContinentScore = null;
LDScoreResponse.prototype.ContinentRank = null;
LDScoreResponse.prototype.ContinentPercentile = null;
LDScoreResponse.prototype.ContinentSimilarScores = null;
LDScoreResponse.prototype.GlobalScore = null;
LDScoreResponse.prototype.GlobalRank = null;
LDScoreResponse.prototype.GlobalPercentile = null;
LDScoreResponse.prototype.GlobalSimilarScores = null;
LDScoreResponse.prototype.LocalLevel = null;
LDScoreResponse.prototype.LocalLocationName = null;
LDScoreResponse.prototype.LocalScore = null;
LDScoreResponse.prototype.LocalRank = null;
LDScoreResponse.prototype.LocalPercentile = null;
LDScoreResponse.prototype.LocalSimilarScores = null;
LDScoreResponse.prototype.DistanceBestFor = null;
function LDScoresResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['lt'] !== null && e['lt'] !== undefined))
        this.LocationType = e['lt'];
    else
        this.LocationType = null;
    if(e && (e['ln'] !== null && e['ln'] !== undefined))
        this.LocationName = e['ln'];
    else
        this.LocationName = null;
    if(e && (e['s'] !== null && e['s'] !== undefined)) { 
        this.Scores = [];
        var d = e['s'];
        for(var k = 0; k < d.length; ++k) this.Scores.push(new LDScoreBoardEntry(d[k]));
    }
}
LDScoresResponse.prototype = new LDJSONLoggable();
LDScoresResponse.prototype.constructor = LDScoresResponse;
LDScoresResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.LocationType !== null) o['lt'] = this.LocationType;
    if(this.LocationName !== null) o['ln'] = this.LocationName;
    if(this.Scores !== null) { 
        o['s'] = [];
        var d = this.Scores;
        for(var k = 0; k < d.length; ++k) o['s'].push(d[k].encode());
    } else {
        o['Scores'] = null;
    }
    return o;
}
LDScoresResponse.prototype.LocationType = null;
LDScoresResponse.prototype.LocationName = null;
LDScoresResponse.prototype.Scores = null;
function LDBroadcastItemResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Pin = e['p'];
    else
        this.Pin = null;
}
LDBroadcastItemResponse.prototype = new LDJSONLoggable();
LDBroadcastItemResponse.prototype.constructor = LDBroadcastItemResponse;
LDBroadcastItemResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Pin !== null) o['p'] = this.Pin;
    return o;
}
LDBroadcastItemResponse.prototype.Pin = null;
function LDFetchNearbyItemsResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.Items = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.Items.push(new LDNearbyItemContainer(d[k]));
    }
}
LDFetchNearbyItemsResponse.prototype = new LDJSONLoggable();
LDFetchNearbyItemsResponse.prototype.constructor = LDFetchNearbyItemsResponse;
LDFetchNearbyItemsResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Items !== null) { 
        o['i'] = [];
        var d = this.Items;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['Items'] = null;
    }
    return o;
}
LDFetchNearbyItemsResponse.prototype.Items = null;
function LDUrlToStoryResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.ResponseType = e['t'];
    else
        this.ResponseType = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.ResponseData = new Buffer(e['d'], 'base64');
}
LDUrlToStoryResponse.prototype = new LDJSONLoggable();
LDUrlToStoryResponse.prototype.constructor = LDUrlToStoryResponse;
LDUrlToStoryResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ResponseType !== null) o['t'] = this.ResponseType;
    if(this.ResponseData !== null) o['d'] = this.ResponseData.toString('base64');
    return o;
}
LDUrlToStoryResponse.prototype.ResponseType = null;
LDUrlToStoryResponse.prototype.ResponseData = null;
function LDImageSearchResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['h'] !== null && e['h'] !== undefined)) { 
        this.Hits = [];
        var d = e['h'];
        for(var k = 0; k < d.length; ++k) this.Hits.push(new LDImageSearchResult(d[k]));
    }
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.ClientSearchVersion = e['v'];
    else
        this.ClientSearchVersion = null;
}
LDImageSearchResponse.prototype = new LDJSONLoggable();
LDImageSearchResponse.prototype.constructor = LDImageSearchResponse;
LDImageSearchResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Hits !== null) { 
        o['h'] = [];
        var d = this.Hits;
        for(var k = 0; k < d.length; ++k) o['h'].push(d[k].encode());
    } else {
        o['Hits'] = null;
    }
    if(this.ClientSearchVersion !== null) o['v'] = this.ClientSearchVersion;
    return o;
}
LDImageSearchResponse.prototype.Hits = null;
LDImageSearchResponse.prototype.ClientSearchVersion = null;
function LDCreatePlaygroundResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDCreatePlaygroundResponse.prototype = new LDJSONLoggable();
LDCreatePlaygroundResponse.prototype.constructor = LDCreatePlaygroundResponse;
LDCreatePlaygroundResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDCreatePlaygroundResponse.prototype.Feed = null;
function LDGetDirectFeedResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['u'] !== null && e['u'] !== undefined)) { 
        this.UnmappedIdentities = [];
        var d = e['u'];
        for(var k = 0; k < d.length; ++k) this.UnmappedIdentities.push(new LDIdentity(d[k]));
    }
    if(e && (e['o'] !== null && e['o'] !== undefined)) { 
        this.OptOutIdentities = [];
        var d = e['o'];
        for(var k = 0; k < d.length; ++k) this.OptOutIdentities.push(new LDIdentity(d[k]));
    }
    if(e && (e['a'] !== null && e['a'] !== undefined)) { 
        this.Accounts = [];
        var d = e['a'];
        for(var k = 0; k < d.length; ++k) this.Accounts.push(d[k]);
    }
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDGetDirectFeedResponse.prototype = new LDJSONLoggable();
LDGetDirectFeedResponse.prototype.constructor = LDGetDirectFeedResponse;
LDGetDirectFeedResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.UnmappedIdentities !== null) { 
        o['u'] = [];
        var d = this.UnmappedIdentities;
        for(var k = 0; k < d.length; ++k) o['u'].push(d[k].encode());
    } else {
        o['UnmappedIdentities'] = null;
    }
    if(this.OptOutIdentities !== null) { 
        o['o'] = [];
        var d = this.OptOutIdentities;
        for(var k = 0; k < d.length; ++k) o['o'].push(d[k].encode());
    } else {
        o['OptOutIdentities'] = null;
    }
    if(this.Accounts !== null) { 
        o['a'] = [];
        var d = this.Accounts;
        for(var k = 0; k < d.length; ++k) o['a'].push(d[k]);
    } else {
        o['Accounts'] = null;
    }
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDGetDirectFeedResponse.prototype.UnmappedIdentities = null;
LDGetDirectFeedResponse.prototype.OptOutIdentities = null;
LDGetDirectFeedResponse.prototype.Accounts = null;
LDGetDirectFeedResponse.prototype.Feed = null;
function LDSendDirectMessageResponse(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Timestamp = e['t'];
    else
        this.Timestamp = null;
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Metadata = new Buffer(e['m'], 'base64');
    if(e && (e['u'] !== null && e['u'] !== undefined)) { 
        this.UnmappedIdentities = [];
        var d = e['u'];
        for(var k = 0; k < d.length; ++k) this.UnmappedIdentities.push(new LDIdentity(d[k]));
    }
    if(e && (e['o'] !== null && e['o'] !== undefined)) { 
        this.OptOutIdentities = [];
        var d = e['o'];
        for(var k = 0; k < d.length; ++k) this.OptOutIdentities.push(new LDIdentity(d[k]));
    }
}
LDSendDirectMessageResponse.prototype = new LDJSONLoggable();
LDSendDirectMessageResponse.prototype.constructor = LDSendDirectMessageResponse;
LDSendDirectMessageResponse.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Timestamp !== null) o['t'] = this.Timestamp;
    if(this.Metadata !== null) o['m'] = this.Metadata.toString('base64');
    if(this.UnmappedIdentities !== null) { 
        o['u'] = [];
        var d = this.UnmappedIdentities;
        for(var k = 0; k < d.length; ++k) o['u'].push(d[k].encode());
    } else {
        o['UnmappedIdentities'] = null;
    }
    if(this.OptOutIdentities !== null) { 
        o['o'] = [];
        var d = this.OptOutIdentities;
        for(var k = 0; k < d.length; ++k) o['o'].push(d[k].encode());
    } else {
        o['OptOutIdentities'] = null;
    }
    return o;
}
LDSendDirectMessageResponse.prototype.Feed = null;
LDSendDirectMessageResponse.prototype.Timestamp = null;
LDSendDirectMessageResponse.prototype.Metadata = null;
LDSendDirectMessageResponse.prototype.UnmappedIdentities = null;
LDSendDirectMessageResponse.prototype.OptOutIdentities = null;
function LDIdentity(e) { 
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Type = e['t'];
    else
        this.Type = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Principal = e['p'];
    else
        this.Principal = null;
}
LDIdentity.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Type !== null) o['t'] = this.Type;
    if(this.Principal !== null) o['p'] = this.Principal;
    return o;
}
LDIdentity.prototype.Type = null;
LDIdentity.prototype.Principal = null;
function LDAccountDetails(e) { 
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Cluster = e['c'];
    else
        this.Cluster = null;
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.Identities = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.Identities.push(new LDIdentity(d[k]));
    }
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.MigratedName = e['n'];
    else
        this.MigratedName = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.MigratedPictureLink = e['p'];
    else
        this.MigratedPictureLink = null;
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.MigratedCloudConfig = new LDCloudConfig(e['m']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.CreationTime = e['s'];
    else
        this.CreationTime = null;
}
LDAccountDetails.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Cluster !== null) o['c'] = this.Cluster;
    if(this.Identities !== null) { 
        o['i'] = [];
        var d = this.Identities;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['Identities'] = null;
    }
    if(this.MigratedName !== null) o['n'] = this.MigratedName;
    if(this.MigratedPictureLink !== null) o['p'] = this.MigratedPictureLink;
    if(this.MigratedCloudConfig !== null) o['m'] = this.MigratedCloudConfig.encode();
    if(this.CreationTime !== null) o['s'] = this.CreationTime;
    return o;
}
LDAccountDetails.prototype.Account = null;
LDAccountDetails.prototype.Cluster = null;
LDAccountDetails.prototype.Identities = null;
LDAccountDetails.prototype.MigratedName = null;
LDAccountDetails.prototype.MigratedPictureLink = null;
LDAccountDetails.prototype.MigratedCloudConfig = null;
LDAccountDetails.prototype.CreationTime = null;
function LDString(e) { 
}
LDString.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    return o;
}
function LDFlaggedDetails(e) { 
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['l'] !== null && e['l'] !== undefined)) { 
        this.Records = [];
        var d = e['l'];
        for(var k = 0; k < d.length; ++k) this.Records.push(new LDFlaggedRecord(d[k]));
    }
}
LDFlaggedDetails.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Records !== null) { 
        o['l'] = [];
        var d = this.Records;
        for(var k = 0; k < d.length; ++k) o['l'].push(d[k].encode());
    } else {
        o['Records'] = null;
    }
    return o;
}
LDFlaggedDetails.prototype.Account = null;
LDFlaggedDetails.prototype.Records = null;
function LDFeed(e) { 
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Kind = e['t'];
    else
        this.Kind = null;
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.Key = new Buffer(e['k'], 'base64');
}
LDFeed.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Kind !== null) o['t'] = this.Kind;
    if(this.Key !== null) o['k'] = this.Key.toString('base64');
    return o;
}
LDFeed.prototype.Account = null;
LDFeed.prototype.Kind = null;
LDFeed.prototype.Key = null;
function LDTypedId(e) { 
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Type = e['t'];
    else
        this.Type = null;
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new Buffer(e['i'], 'base64');
}
LDTypedId.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Type !== null) o['t'] = this.Type;
    if(this.Id !== null) o['i'] = this.Id.toString('base64');
    return o;
}
LDTypedId.prototype.Type = null;
LDTypedId.prototype.Id = null;
function LDIdentityHash(e) { 
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Type = e['t'];
    else
        this.Type = null;
    if(e && (e['h'] !== null && e['h'] !== undefined))
        this.Hash = new Buffer(e['h'], 'base64');
}
LDIdentityHash.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Type !== null) o['t'] = this.Type;
    if(this.Hash !== null) o['h'] = this.Hash.toString('base64');
    return o;
}
LDIdentityHash.prototype.Type = null;
LDIdentityHash.prototype.Hash = null;
function LDMessage(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new LDTypedId(e['i']);
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Timestamp = e['t'];
    else
        this.Timestamp = null;
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Owner = e['s'];
    else
        this.Owner = null;
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Body = new Buffer(e['b'], 'base64');
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.Metadata = new Buffer(e['m'], 'base64');
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Version = e['v'];
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Deleted = e['d'];
    if(e && (e['di'] !== null && e['di'] !== undefined))
        this.DeviceId = new Buffer(e['di'], 'base64');
}
LDMessage.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Id !== null) o['i'] = this.Id.encode();
    if(this.Timestamp !== null) o['t'] = this.Timestamp;
    if(this.Owner !== null) o['s'] = this.Owner;
    if(this.Body !== null) o['b'] = this.Body.toString('base64');
    if(this.Metadata !== null) o['m'] = this.Metadata.toString('base64');
    if(this.Version !== null) o['v'] = this.Version;
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Deleted !== null) o['d'] = this.Deleted;
    if(this.DeviceId !== null) o['di'] = this.DeviceId.toString('base64');
    return o;
}
LDMessage.prototype.Id = null;
LDMessage.prototype.Timestamp = null;
LDMessage.prototype.Owner = null;
LDMessage.prototype.Body = null;
LDMessage.prototype.Metadata = null;
LDMessage.prototype.Version = null;
LDMessage.prototype.Feed = null;
LDMessage.prototype.Deleted = null;
LDMessage.prototype.DeviceId = null;
function LDRealtimeMessage(e) { 
    if(e && (e['T'] !== null && e['T'] !== undefined))
        this.Type = e['T'];
    else
        this.Type = null;
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Timestamp = e['t'];
    else
        this.Timestamp = null;
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Sender = e['s'];
    else
        this.Sender = null;
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Body = new Buffer(e['b'], 'base64');
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
}
LDRealtimeMessage.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Type !== null) o['T'] = this.Type;
    if(this.Timestamp !== null) o['t'] = this.Timestamp;
    if(this.Sender !== null) o['s'] = this.Sender;
    if(this.Body !== null) o['b'] = this.Body.toString('base64');
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    return o;
}
LDRealtimeMessage.prototype.Type = null;
LDRealtimeMessage.prototype.Timestamp = null;
LDRealtimeMessage.prototype.Sender = null;
LDRealtimeMessage.prototype.Body = null;
LDRealtimeMessage.prototype.Feed = null;
function LDPushKey(e) { 
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Type = e['t'];
    else
        this.Type = null;
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.Key = e['k'];
    else
        this.Key = null;
}
LDPushKey.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Type !== null) o['t'] = this.Type;
    if(this.Key !== null) o['k'] = this.Key;
    return o;
}
LDPushKey.prototype.Type = null;
LDPushKey.prototype.Key = null;
function LDBlobMetadata(e) { 
    if(e && (e['h'] !== null && e['h'] !== undefined))
        this.Hash = new Buffer(e['h'], 'base64');
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Size = e['s'];
    else
        this.Size = null;
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.MimeType = e['m'];
    else
        this.MimeType = null;
}
LDBlobMetadata.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Hash !== null) o['h'] = this.Hash.toString('base64');
    if(this.Size !== null) o['s'] = this.Size;
    if(this.MimeType !== null) o['m'] = this.MimeType;
    return o;
}
LDBlobMetadata.prototype.Hash = null;
LDBlobMetadata.prototype.Size = null;
LDBlobMetadata.prototype.MimeType = null;
function LDBlobUploadTicket(e) { 
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.UploadUrl = e['u'];
    else
        this.UploadUrl = null;
    if(e && (e['h'] !== null && e['h'] !== undefined)) { 
        this.UploadHeaders = {};
        var d = e['h'];
        for(var k in d) this.UploadHeaders[k] = d[k];
    }
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Cluster = e['c'];
    else
        this.Cluster = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.IsPermanent = e['p'];
    else
        this.IsPermanent = null;
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.AlreadyUploaded = e['a'];
    else
        this.AlreadyUploaded = null;
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.BlobLinkString = e['l'];
    else
        this.BlobLinkString = null;
}
LDBlobUploadTicket.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.UploadUrl !== null) o['u'] = this.UploadUrl;
    if(this.UploadHeaders !== null) { 
        o['h'] = {};
        var d = this.UploadHeaders;
        for(var k in d) o['h'][k] = d[k];
    } else {
        o['UploadHeaders'] = null;
    }
    if(this.Cluster !== null) o['c'] = this.Cluster;
    if(this.IsPermanent !== null) o['p'] = this.IsPermanent;
    if(this.AlreadyUploaded !== null) o['a'] = this.AlreadyUploaded;
    if(this.BlobLinkString !== null) o['l'] = this.BlobLinkString;
    return o;
}
LDBlobUploadTicket.prototype.UploadUrl = null;
LDBlobUploadTicket.prototype.UploadHeaders = null;
LDBlobUploadTicket.prototype.Cluster = null;
LDBlobUploadTicket.prototype.IsPermanent = null;
LDBlobUploadTicket.prototype.AlreadyUploaded = null;
LDBlobUploadTicket.prototype.BlobLinkString = null;
function LDContactDetails(e) { 
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfilePictureLink = e['p'];
    else
        this.ProfilePictureLink = null;
    if(e && (e['D'] !== null && e['D'] !== undefined))
        this.ProfileDecryptedHash = new Buffer(e['D'], 'base64');
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Version = e['v'];
    else
        this.Version = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Display = e['d'];
    else
        this.Display = null;
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Blocked = e['b'];
    else
        this.Blocked = null;
    if(e && (e['wc'] !== null && e['wc'] !== undefined))
        this.WasContact = e['wc'];
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.HasAppTime = e['t'];
    else
        this.HasAppTime = null;
    if(e && (e['h'] !== null && e['h'] !== undefined)) { 
        this.Hashidentities = [];
        var d = e['h'];
        for(var k = 0; k < d.length; ++k) this.Hashidentities.push(new LDIdentityHash(d[k]));
    }
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.Identities = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.Identities.push(new LDIdentity(d[k]));
    }
}
LDContactDetails.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Name !== null) o['n'] = this.Name;
    if(this.ProfilePictureLink !== null) o['p'] = this.ProfilePictureLink;
    if(this.ProfileDecryptedHash !== null) o['D'] = this.ProfileDecryptedHash.toString('base64');
    if(this.Version !== null) o['v'] = this.Version;
    if(this.Display !== null) o['d'] = this.Display;
    if(this.Blocked !== null) o['b'] = this.Blocked;
    if(this.WasContact !== null) o['wc'] = this.WasContact;
    if(this.HasAppTime !== null) o['t'] = this.HasAppTime;
    if(this.Hashidentities !== null) { 
        o['h'] = [];
        var d = this.Hashidentities;
        for(var k = 0; k < d.length; ++k) o['h'].push(d[k].encode());
    } else {
        o['Hashidentities'] = null;
    }
    if(this.Identities !== null) { 
        o['i'] = [];
        var d = this.Identities;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['Identities'] = null;
    }
    return o;
}
LDContactDetails.prototype.Account = null;
LDContactDetails.prototype.Name = null;
LDContactDetails.prototype.ProfilePictureLink = null;
LDContactDetails.prototype.ProfileDecryptedHash = null;
LDContactDetails.prototype.Version = null;
LDContactDetails.prototype.Display = null;
LDContactDetails.prototype.Blocked = null;
LDContactDetails.prototype.WasContact = null;
LDContactDetails.prototype.HasAppTime = null;
LDContactDetails.prototype.Hashidentities = null;
LDContactDetails.prototype.Identities = null;
function LDItemId(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['it'] !== null && e['it'] !== undefined))
        this.ItemType = e['it'];
    else
        this.ItemType = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Creator = e['c'];
    else
        this.Creator = null;
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.GivenId = e['a'];
    else
        this.GivenId = null;
}
LDItemId.prototype = new LDJSONLoggable();
LDItemId.prototype.constructor = LDItemId;
LDItemId.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ItemType !== null) o['it'] = this.ItemType;
    if(this.Creator !== null) o['c'] = this.Creator;
    if(this.GivenId !== null) o['a'] = this.GivenId;
    return o;
}
LDItemId.prototype.ItemType = null;
LDItemId.prototype.Creator = null;
LDItemId.prototype.GivenId = null;
function LDPurchaseData(e) { 
    if(e && (e['rc'] !== null && e['rc'] !== undefined))
        this.ReceiptContainer = new LDReceiptContainer(e['rc']);
    if(e && (e['bic'] !== null && e['bic'] !== undefined))
        this.BillingInfoContainer = new LDBillingInfoContainer(e['bic']);
}
LDPurchaseData.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ReceiptContainer !== null) o['rc'] = this.ReceiptContainer.encode();
    if(this.BillingInfoContainer !== null) o['bic'] = this.BillingInfoContainer.encode();
    return o;
}
LDPurchaseData.prototype.ReceiptContainer = null;
LDPurchaseData.prototype.BillingInfoContainer = null;
function LDEnum(e) { 
}
LDEnum.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    return o;
}
function LDFeature(e) { 
    LDEnum.call(this, e);
}
LDFeature.prototype = new LDEnum();
LDFeature.prototype.constructor = LDFeature;
LDFeature.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDEnum.prototype.encode.call(this, o);
    return o;
}
function LDItemInfoUserMutableContainer(e) { 
    if(e && (e['ai'] !== null && e['ai'] !== undefined))
        this.AppInfoUserMutable = new LDAppInfoUserMutable(e['ai']);
    if(e && (e['si'] !== null && e['si'] !== undefined))
        this.StickerPackInfoUserMutable = new LDStickerPackInfoUserMutable(e['si']);
}
LDItemInfoUserMutableContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.AppInfoUserMutable !== null) o['ai'] = this.AppInfoUserMutable.encode();
    if(this.StickerPackInfoUserMutable !== null) o['si'] = this.StickerPackInfoUserMutable.encode();
    return o;
}
LDItemInfoUserMutableContainer.prototype.AppInfoUserMutable = null;
LDItemInfoUserMutableContainer.prototype.StickerPackInfoUserMutable = null;
function LDItemInfoSystemMutableContainer(e) { 
    if(e && (e['ai'] !== null && e['ai'] !== undefined))
        this.AppInfoSystemMutable = new LDAppInfoSystemMutable(e['ai']);
    if(e && (e['ii'] !== null && e['ii'] !== undefined))
        this.StickerPackInfoSystemMutable = new LDStickerPackInfoSystemMutable(e['ii']);
}
LDItemInfoSystemMutableContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.AppInfoSystemMutable !== null) o['ai'] = this.AppInfoSystemMutable.encode();
    if(this.StickerPackInfoSystemMutable !== null) o['ii'] = this.StickerPackInfoSystemMutable.encode();
    return o;
}
LDItemInfoSystemMutableContainer.prototype.AppInfoSystemMutable = null;
LDItemInfoSystemMutableContainer.prototype.StickerPackInfoSystemMutable = null;
function LDCloudConfig(e) { 
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Provider = e['p'];
    else
        this.Provider = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.Certificate = e['c'];
    else
        this.Certificate = null;
    if(e && (e['ct'] !== null && e['ct'] !== undefined))
        this.ConsumerToken = e['ct'];
    else
        this.ConsumerToken = null;
    if(e && (e['cs'] !== null && e['cs'] !== undefined))
        this.ConsumerSecret = e['cs'];
    else
        this.ConsumerSecret = null;
    if(e && (e['at'] !== null && e['at'] !== undefined))
        this.AccessToken = e['at'];
    else
        this.AccessToken = null;
    if(e && (e['as'] !== null && e['as'] !== undefined))
        this.AccessSecret = e['as'];
    else
        this.AccessSecret = null;
    if(e && (e['rt'] !== null && e['rt'] !== undefined))
        this.RefreshToken = e['rt'];
    else
        this.RefreshToken = null;
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.Expiration = e['e'];
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.BlobsFolder = e['f'];
    else
        this.BlobsFolder = null;
}
LDCloudConfig.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Provider !== null) o['p'] = this.Provider;
    if(this.Certificate !== null) o['c'] = this.Certificate;
    if(this.ConsumerToken !== null) o['ct'] = this.ConsumerToken;
    if(this.ConsumerSecret !== null) o['cs'] = this.ConsumerSecret;
    if(this.AccessToken !== null) o['at'] = this.AccessToken;
    if(this.AccessSecret !== null) o['as'] = this.AccessSecret;
    if(this.RefreshToken !== null) o['rt'] = this.RefreshToken;
    if(this.Expiration !== null) o['e'] = this.Expiration;
    if(this.BlobsFolder !== null) o['f'] = this.BlobsFolder;
    return o;
}
LDCloudConfig.prototype.Provider = null;
LDCloudConfig.prototype.Certificate = null;
LDCloudConfig.prototype.ConsumerToken = null;
LDCloudConfig.prototype.ConsumerSecret = null;
LDCloudConfig.prototype.AccessToken = null;
LDCloudConfig.prototype.AccessSecret = null;
LDCloudConfig.prototype.RefreshToken = null;
LDCloudConfig.prototype.Expiration = null;
LDCloudConfig.prototype.BlobsFolder = null;
function LDGameChallengeId(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = new Buffer(e['i'], 'base64');
}
LDGameChallengeId.prototype = new LDJSONLoggable();
LDGameChallengeId.prototype.constructor = LDGameChallengeId;
LDGameChallengeId.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Account !== null) o['a'] = this.Account;
    if(this.Id !== null) o['i'] = this.Id.toString('base64');
    return o;
}
LDGameChallengeId.prototype.Account = null;
LDGameChallengeId.prototype.Id = null;
function LDNearbyItemContainer(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.Broadcasted = e['b'];
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.Expiration = e['e'];
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.ItemType = e['t'];
    else
        this.ItemType = null;
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['fm'] !== null && e['fm'] !== undefined))
        this.FeedMetadata = new LDNearbyItemFeedMetadata(e['fm']);
}
LDNearbyItemContainer.prototype = new LDJSONLoggable();
LDNearbyItemContainer.prototype.constructor = LDNearbyItemContainer;
LDNearbyItemContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Broadcasted !== null) o['b'] = this.Broadcasted;
    if(this.Expiration !== null) o['e'] = this.Expiration;
    if(this.ItemType !== null) o['t'] = this.ItemType;
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.FeedMetadata !== null) o['fm'] = this.FeedMetadata.encode();
    return o;
}
LDNearbyItemContainer.prototype.Broadcasted = null;
LDNearbyItemContainer.prototype.Expiration = null;
LDNearbyItemContainer.prototype.ItemType = null;
LDNearbyItemContainer.prototype.Feed = null;
LDNearbyItemContainer.prototype.FeedMetadata = null;
function LDJoinFeedLink(e) { 
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Timestamp = e['t'];
    else
        this.Timestamp = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.Pin = e['p'];
    else
        this.Pin = null;
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.Url = e['l'];
    else
        this.Url = null;
}
LDJoinFeedLink.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Timestamp !== null) o['t'] = this.Timestamp;
    if(this.Pin !== null) o['p'] = this.Pin;
    if(this.Url !== null) o['l'] = this.Url;
    return o;
}
LDJoinFeedLink.prototype.Timestamp = null;
LDJoinFeedLink.prototype.Pin = null;
LDJoinFeedLink.prototype.Url = null;
function LDDirtyFeed(e) { 
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Feed = new LDFeed(e['f']);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Acceptance = e['a'];
    else
        this.Acceptance = null;
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.LastWriteTime = e['t'];
    else
        this.LastWriteTime = null;
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.LastRenderableTime = e['r'];
}
LDDirtyFeed.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Feed !== null) o['f'] = this.Feed.encode();
    if(this.Acceptance !== null) o['a'] = this.Acceptance;
    if(this.LastWriteTime !== null) o['t'] = this.LastWriteTime;
    if(this.LastRenderableTime !== null) o['r'] = this.LastRenderableTime;
    return o;
}
LDDirtyFeed.prototype.Feed = null;
LDDirtyFeed.prototype.Acceptance = null;
LDDirtyFeed.prototype.LastWriteTime = null;
LDDirtyFeed.prototype.LastRenderableTime = null;
function LDBlobDownloadTicket(e) { 
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.Url = e['u'];
    else
        this.Url = null;
    if(e && (e['h'] !== null && e['h'] !== undefined)) { 
        this.Headers = {};
        var d = e['h'];
        for(var k in d) this.Headers[k] = d[k];
    }
}
LDBlobDownloadTicket.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Url !== null) o['u'] = this.Url;
    if(this.Headers !== null) { 
        o['h'] = {};
        var d = this.Headers;
        for(var k in d) o['h'][k] = d[k];
    } else {
        o['Headers'] = null;
    }
    return o;
}
LDBlobDownloadTicket.prototype.Url = null;
LDBlobDownloadTicket.prototype.Headers = null;
function LDProfileDetails(e) { 
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfilePictureLink = e['p'];
    else
        this.ProfilePictureLink = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.ProfileDecryptedHash = new Buffer(e['d'], 'base64');
    if(e && (e['v'] !== null && e['v'] !== undefined))
        this.Version = e['v'];
    else
        this.Version = null;
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.IdentitySettings = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.IdentitySettings.push(new LDProfileIdentitySetting(d[k]));
    }
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.HasAppTime = e['t'];
    else
        this.HasAppTime = null;
}
LDProfileDetails.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Name !== null) o['n'] = this.Name;
    if(this.ProfilePictureLink !== null) o['p'] = this.ProfilePictureLink;
    if(this.ProfileDecryptedHash !== null) o['d'] = this.ProfileDecryptedHash.toString('base64');
    if(this.Version !== null) o['v'] = this.Version;
    if(this.IdentitySettings !== null) { 
        o['i'] = [];
        var d = this.IdentitySettings;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['IdentitySettings'] = null;
    }
    if(this.HasAppTime !== null) o['t'] = this.HasAppTime;
    return o;
}
LDProfileDetails.prototype.Name = null;
LDProfileDetails.prototype.ProfilePictureLink = null;
LDProfileDetails.prototype.ProfileDecryptedHash = null;
LDProfileDetails.prototype.Version = null;
LDProfileDetails.prototype.IdentitySettings = null;
LDProfileDetails.prototype.HasAppTime = null;
function LDProfilePublicState(e) { 
    if(e && (e['f'] !== null && e['f'] !== undefined)) { 
        this.Features = [];
        var d = e['f'];
        for(var k = 0; k < d.length; ++k) this.Features.push(d[k]);
    }
}
LDProfilePublicState.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Features !== null) { 
        o['f'] = [];
        var d = this.Features;
        for(var k = 0; k < d.length; ++k) o['f'].push(d[k]);
    } else {
        o['Features'] = null;
    }
    return o;
}
LDProfilePublicState.prototype.Features = null;
function LDItemInfoContainer(e) { 
    if(e && (e['ai'] !== null && e['ai'] !== undefined))
        this.AppInfo = new LDAppInfo(e['ai']);
    if(e && (e['si'] !== null && e['si'] !== undefined))
        this.StickerPackInfo = new LDStickerPackInfo(e['si']);
}
LDItemInfoContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.AppInfo !== null) o['ai'] = this.AppInfo.encode();
    if(this.StickerPackInfo !== null) o['si'] = this.StickerPackInfo.encode();
    return o;
}
LDItemInfoContainer.prototype.AppInfo = null;
LDItemInfoContainer.prototype.StickerPackInfo = null;
function LDItemInfoListingContainer(e) { 
    if(e && (e['ai'] !== null && e['ai'] !== undefined))
        this.AppInfoList = new LDAppInfoListingWrapper(e['ai']);
    if(e && (e['si'] !== null && e['si'] !== undefined))
        this.StickerPackInfoList = new LDStickerPackInfoListingWrapper(e['si']);
}
LDItemInfoListingContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.AppInfoList !== null) o['ai'] = this.AppInfoList.encode();
    if(this.StickerPackInfoList !== null) o['si'] = this.StickerPackInfoList.encode();
    return o;
}
LDItemInfoListingContainer.prototype.AppInfoList = null;
LDItemInfoListingContainer.prototype.StickerPackInfoList = null;
function LDApiKey(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['k'] !== null && e['k'] !== undefined))
        this.ClientApiKeyId = new Buffer(e['k'], 'base64');
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.ClientApiKeySecret = new Buffer(e['s'], 'base64');
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.CreationTime = e['t'];
    else
        this.CreationTime = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Deactivated = e['d'];
    else
        this.Deactivated = null;
}
LDApiKey.prototype = new LDJSONLoggable();
LDApiKey.prototype.constructor = LDApiKey;
LDApiKey.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.ClientApiKeyId !== null) o['k'] = this.ClientApiKeyId.toString('base64');
    if(this.ClientApiKeySecret !== null) o['s'] = this.ClientApiKeySecret.toString('base64');
    if(this.CreationTime !== null) o['t'] = this.CreationTime;
    if(this.Deactivated !== null) o['d'] = this.Deactivated;
    return o;
}
LDApiKey.prototype.ClientApiKeyId = null;
LDApiKey.prototype.ClientApiKeySecret = null;
LDApiKey.prototype.CreationTime = null;
LDApiKey.prototype.Deactivated = null;
function LDScoreBoardEntry(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['a'] !== null && e['a'] !== undefined))
        this.Account = e['a'];
    else
        this.Account = null;
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.ProfileName = e['n'];
    else
        this.ProfileName = null;
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.ProfilePictureLink = e['p'];
    else
        this.ProfilePictureLink = null;
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.Score = e['s'];
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Rank = e['r'];
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.ProfileDecryptedHash = new Buffer(e['d'], 'base64');
}
LDScoreBoardEntry.prototype = new LDJSONLoggable();
LDScoreBoardEntry.prototype.constructor = LDScoreBoardEntry;
LDScoreBoardEntry.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.Account !== null) o['a'] = this.Account;
    if(this.ProfileName !== null) o['n'] = this.ProfileName;
    if(this.ProfilePictureLink !== null) o['p'] = this.ProfilePictureLink;
    if(this.Score !== null) o['s'] = this.Score;
    if(this.Rank !== null) o['r'] = this.Rank;
    if(this.ProfileDecryptedHash !== null) o['d'] = this.ProfileDecryptedHash.toString('base64');
    return o;
}
LDScoreBoardEntry.prototype.Account = null;
LDScoreBoardEntry.prototype.ProfileName = null;
LDScoreBoardEntry.prototype.ProfilePictureLink = null;
LDScoreBoardEntry.prototype.Score = null;
LDScoreBoardEntry.prototype.Rank = null;
LDScoreBoardEntry.prototype.ProfileDecryptedHash = null;
function LDImageSearchResult(e) { 
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Title = e['t'];
    else
        this.Title = null;
    if(e && (e['w'] !== null && e['w'] !== undefined))
        this.Width = e['w'];
    else
        this.Width = null;
    if(e && (e['h'] !== null && e['h'] !== undefined))
        this.Height = e['h'];
    else
        this.Height = null;
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.ThumbnailUrl = e['s'];
    else
        this.ThumbnailUrl = null;
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.FullsizeUrl = e['f'];
    else
        this.FullsizeUrl = null;
    if(e && (e['S'] !== null && e['S'] !== undefined))
        this.FileSize = e['S'];
    else
        this.FileSize = null;
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.ContentType = e['c'];
    else
        this.ContentType = null;
}
LDImageSearchResult.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Title !== null) o['t'] = this.Title;
    if(this.Width !== null) o['w'] = this.Width;
    if(this.Height !== null) o['h'] = this.Height;
    if(this.ThumbnailUrl !== null) o['s'] = this.ThumbnailUrl;
    if(this.FullsizeUrl !== null) o['f'] = this.FullsizeUrl;
    if(this.FileSize !== null) o['S'] = this.FileSize;
    if(this.ContentType !== null) o['c'] = this.ContentType;
    return o;
}
LDImageSearchResult.prototype.Title = null;
LDImageSearchResult.prototype.Width = null;
LDImageSearchResult.prototype.Height = null;
LDImageSearchResult.prototype.ThumbnailUrl = null;
LDImageSearchResult.prototype.FullsizeUrl = null;
LDImageSearchResult.prototype.FileSize = null;
LDImageSearchResult.prototype.ContentType = null;
function LDFlaggedRecord(e) { 
    if(e && (e['w'] !== null && e['w'] !== undefined))
        this.Flagger = e['w'];
    else
        this.Flagger = null;
    if(e && (e['r'] !== null && e['r'] !== undefined))
        this.Reason = e['r'];
    else
        this.Reason = null;
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.Timestamp = e['t'];
    else
        this.Timestamp = null;
}
LDFlaggedRecord.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Flagger !== null) o['w'] = this.Flagger;
    if(this.Reason !== null) o['r'] = this.Reason;
    if(this.Timestamp !== null) o['t'] = this.Timestamp;
    return o;
}
LDFlaggedRecord.prototype.Flagger = null;
LDFlaggedRecord.prototype.Reason = null;
LDFlaggedRecord.prototype.Timestamp = null;
function LDReceiptContainer(e) { 
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.MockReceipt = new LDMockReceipt(e['m']);
}
LDReceiptContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.MockReceipt !== null) o['m'] = this.MockReceipt.encode();
    return o;
}
LDReceiptContainer.prototype.MockReceipt = null;
function LDBillingInfoContainer(e) { 
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.MockBillingInfo = new LDMockBillingInfo(e['m']);
}
LDBillingInfoContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.MockBillingInfo !== null) o['m'] = this.MockBillingInfo.encode();
    return o;
}
LDBillingInfoContainer.prototype.MockBillingInfo = null;
function LDItemInfoUserMutable(e) { 
}
LDItemInfoUserMutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    return o;
}
function LDAppInfoUserMutable(e) { 
    LDItemInfoUserMutable.call(this, e);
    if(e && (e['ae'] !== null && e['ae'] !== undefined))
        this.AndroidEnabled = e['ae'];
    if(e && (e['adr'] !== null && e['adr'] !== undefined))
        this.AndroidDrawer = e['adr'];
    if(e && (e['aed'] !== null && e['aed'] !== undefined))
        this.AndroidEditor = e['aed'];
    if(e && (e['aga'] !== null && e['aga'] !== undefined))
        this.AndroidGame = e['aga'];
    if(e && (e['ie'] !== null && e['ie'] !== undefined))
        this.IOSEnabled = e['ie'];
    if(e && (e['idr'] !== null && e['idr'] !== undefined))
        this.IOSDrawer = e['idr'];
    else
        this.IOSDrawer = null;
    if(e && (e['ied'] !== null && e['ied'] !== undefined))
        this.IOSEditor = e['ied'];
    else
        this.IOSEditor = null;
    if(e && (e['iga'] !== null && e['iga'] !== undefined))
        this.IOSGame = e['iga'];
    else
        this.IOSGame = null;
    if(e && (e['we'] !== null && e['we'] !== undefined))
        this.WebEnabled = e['we'];
    if(e && (e['wdr'] !== null && e['wdr'] !== undefined))
        this.WebDrawer = e['wdr'];
    else
        this.WebDrawer = null;
    if(e && (e['wed'] !== null && e['wed'] !== undefined))
        this.WebEditor = e['wed'];
    else
        this.WebEditor = null;
    if(e && (e['wga'] !== null && e['wga'] !== undefined))
        this.WebGame = e['wga'];
    else
        this.WebGame = null;
    if(e && (e['sui'] !== null && e['sui'] !== undefined))
        this.IOSStoreUrl = e['sui'];
    else
        this.IOSStoreUrl = null;
    if(e && (e['sua'] !== null && e['sua'] !== undefined))
        this.AndroidStoreUrl = e['sua'];
    else
        this.AndroidStoreUrl = null;
    if(e && (e['suw'] !== null && e['suw'] !== undefined))
        this.WebUrl = e['suw'];
    else
        this.WebUrl = null;
    if(e && (e['icb'] !== null && e['icb'] !== undefined))
        this.IOSCallback = e['icb'];
    else
        this.IOSCallback = null;
    if(e && (e['apn'] !== null && e['apn'] !== undefined))
        this.AndroidPackageName = e['apn'];
    else
        this.AndroidPackageName = null;
    if(e && (e['ibls'] !== null && e['ibls'] !== undefined))
        this.IconBlobLinkString = e['ibls'];
    else
        this.IconBlobLinkString = null;
    if(e && (e['idh'] !== null && e['idh'] !== undefined))
        this.IconDecryptedHash = new Buffer(e['idh'], 'base64');
    if(e && (e['ssl'] !== null && e['ssl'] !== undefined)) { 
        this.ScreenShotsList = [];
        var d = e['ssl'];
        for(var k = 0; k < d.length; ++k) this.ScreenShotsList.push(new LDAppScreenshot(d[k]));
    }
    if(e && (e['asl'] !== null && e['asl'] !== undefined)) { 
        this.AppStoresList = [];
        var d = e['asl'];
        for(var k = 0; k < d.length; ++k) this.AppStoresList.push(new LDAppStore(d[k]));
    }
    if(e && (e['lc'] !== null && e['lc'] !== undefined))
        this.Languages = e['lc'];
    else
        this.Languages = null;
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
    if(e && (e['nt'] !== null && e['nt'] !== undefined))
        this.NameTranslations = e['nt'];
    else
        this.NameTranslations = null;
    if(e && (e['ru'] !== null && e['ru'] !== undefined))
        this.RedirectUris = e['ru'];
    else
        this.RedirectUris = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Description = e['d'];
    else
        this.Description = null;
    if(e && (e['dt'] !== null && e['dt'] !== undefined))
        this.DescriptionTranslations = e['dt'];
    else
        this.DescriptionTranslations = null;
}
LDAppInfoUserMutable.prototype = new LDItemInfoUserMutable();
LDAppInfoUserMutable.prototype.constructor = LDAppInfoUserMutable;
LDAppInfoUserMutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDItemInfoUserMutable.prototype.encode.call(this, o);
    if(this.AndroidEnabled !== null) o['ae'] = this.AndroidEnabled;
    if(this.AndroidDrawer !== null) o['adr'] = this.AndroidDrawer;
    if(this.AndroidEditor !== null) o['aed'] = this.AndroidEditor;
    if(this.AndroidGame !== null) o['aga'] = this.AndroidGame;
    if(this.IOSEnabled !== null) o['ie'] = this.IOSEnabled;
    if(this.IOSDrawer !== null) o['idr'] = this.IOSDrawer;
    if(this.IOSEditor !== null) o['ied'] = this.IOSEditor;
    if(this.IOSGame !== null) o['iga'] = this.IOSGame;
    if(this.WebEnabled !== null) o['we'] = this.WebEnabled;
    if(this.WebDrawer !== null) o['wdr'] = this.WebDrawer;
    if(this.WebEditor !== null) o['wed'] = this.WebEditor;
    if(this.WebGame !== null) o['wga'] = this.WebGame;
    if(this.IOSStoreUrl !== null) o['sui'] = this.IOSStoreUrl;
    if(this.AndroidStoreUrl !== null) o['sua'] = this.AndroidStoreUrl;
    if(this.WebUrl !== null) o['suw'] = this.WebUrl;
    if(this.IOSCallback !== null) o['icb'] = this.IOSCallback;
    if(this.AndroidPackageName !== null) o['apn'] = this.AndroidPackageName;
    if(this.IconBlobLinkString !== null) o['ibls'] = this.IconBlobLinkString;
    if(this.IconDecryptedHash !== null) o['idh'] = this.IconDecryptedHash.toString('base64');
    if(this.ScreenShotsList !== null) { 
        o['ssl'] = [];
        var d = this.ScreenShotsList;
        for(var k = 0; k < d.length; ++k) o['ssl'].push(d[k].encode());
    } else {
        o['ScreenShotsList'] = null;
    }
    if(this.AppStoresList !== null) { 
        o['asl'] = [];
        var d = this.AppStoresList;
        for(var k = 0; k < d.length; ++k) o['asl'].push(d[k].encode());
    } else {
        o['AppStoresList'] = null;
    }
    if(this.Languages !== null) o['lc'] = this.Languages;
    if(this.Name !== null) o['n'] = this.Name;
    if(this.NameTranslations !== null) o['nt'] = this.NameTranslations;
    if(this.RedirectUris !== null) o['ru'] = this.RedirectUris;
    if(this.Description !== null) o['d'] = this.Description;
    if(this.DescriptionTranslations !== null) o['dt'] = this.DescriptionTranslations;
    return o;
}
LDAppInfoUserMutable.prototype.AndroidEnabled = null;
LDAppInfoUserMutable.prototype.AndroidDrawer = null;
LDAppInfoUserMutable.prototype.AndroidEditor = null;
LDAppInfoUserMutable.prototype.AndroidGame = null;
LDAppInfoUserMutable.prototype.IOSEnabled = null;
LDAppInfoUserMutable.prototype.IOSDrawer = null;
LDAppInfoUserMutable.prototype.IOSEditor = null;
LDAppInfoUserMutable.prototype.IOSGame = null;
LDAppInfoUserMutable.prototype.WebEnabled = null;
LDAppInfoUserMutable.prototype.WebDrawer = null;
LDAppInfoUserMutable.prototype.WebEditor = null;
LDAppInfoUserMutable.prototype.WebGame = null;
LDAppInfoUserMutable.prototype.IOSStoreUrl = null;
LDAppInfoUserMutable.prototype.AndroidStoreUrl = null;
LDAppInfoUserMutable.prototype.WebUrl = null;
LDAppInfoUserMutable.prototype.IOSCallback = null;
LDAppInfoUserMutable.prototype.AndroidPackageName = null;
LDAppInfoUserMutable.prototype.IconBlobLinkString = null;
LDAppInfoUserMutable.prototype.IconDecryptedHash = null;
LDAppInfoUserMutable.prototype.ScreenShotsList = null;
LDAppInfoUserMutable.prototype.AppStoresList = null;
LDAppInfoUserMutable.prototype.Languages = null;
LDAppInfoUserMutable.prototype.Name = null;
LDAppInfoUserMutable.prototype.NameTranslations = null;
LDAppInfoUserMutable.prototype.RedirectUris = null;
LDAppInfoUserMutable.prototype.Description = null;
LDAppInfoUserMutable.prototype.DescriptionTranslations = null;
function LDStickerPackInfoUserMutable(e) { 
    LDItemInfoUserMutable.call(this, e);
    if(e && (e['lc'] !== null && e['lc'] !== undefined))
        this.Languages = e['lc'];
    else
        this.Languages = null;
    if(e && (e['tg'] !== null && e['tg'] !== undefined)) { 
        this.Tags = [];
        var d = e['tg'];
        for(var k = 0; k < d.length; ++k) this.Tags.push(d[k]);
    }
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
    if(e && (e['nt'] !== null && e['nt'] !== undefined)) { 
        this.NameTranslations = {};
        var d = e['nt'];
        for(var k in d) this.NameTranslations[k] = d[k];
    }
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Description = e['d'];
    else
        this.Description = null;
    if(e && (e['dt'] !== null && e['dt'] !== undefined)) { 
        this.DescriptionTranslations = {};
        var d = e['dt'];
        for(var k in d) this.DescriptionTranslations[k] = d[k];
    }
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.PreviewImageBlobLinkString = e['p'];
    else
        this.PreviewImageBlobLinkString = null;
    if(e && (e['pdh'] !== null && e['pdh'] !== undefined))
        this.PreviewDecryptedHash = new Buffer(e['pdh'], 'base64');
    if(e && (e['s'] !== null && e['s'] !== undefined)) { 
        this.Stickers = [];
        var d = e['s'];
        for(var k = 0; k < d.length; ++k) this.Stickers.push(new LDSticker(d[k]));
    }
}
LDStickerPackInfoUserMutable.prototype = new LDItemInfoUserMutable();
LDStickerPackInfoUserMutable.prototype.constructor = LDStickerPackInfoUserMutable;
LDStickerPackInfoUserMutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDItemInfoUserMutable.prototype.encode.call(this, o);
    if(this.Languages !== null) o['lc'] = this.Languages;
    if(this.Tags !== null) { 
        o['tg'] = [];
        var d = this.Tags;
        for(var k = 0; k < d.length; ++k) o['tg'].push(d[k]);
    } else {
        o['Tags'] = null;
    }
    if(this.Name !== null) o['n'] = this.Name;
    if(this.NameTranslations !== null) { 
        o['nt'] = {};
        var d = this.NameTranslations;
        for(var k in d) o['nt'][k] = d[k];
    } else {
        o['NameTranslations'] = null;
    }
    if(this.Description !== null) o['d'] = this.Description;
    if(this.DescriptionTranslations !== null) { 
        o['dt'] = {};
        var d = this.DescriptionTranslations;
        for(var k in d) o['dt'][k] = d[k];
    } else {
        o['DescriptionTranslations'] = null;
    }
    if(this.PreviewImageBlobLinkString !== null) o['p'] = this.PreviewImageBlobLinkString;
    if(this.PreviewDecryptedHash !== null) o['pdh'] = this.PreviewDecryptedHash.toString('base64');
    if(this.Stickers !== null) { 
        o['s'] = [];
        var d = this.Stickers;
        for(var k = 0; k < d.length; ++k) o['s'].push(d[k].encode());
    } else {
        o['Stickers'] = null;
    }
    return o;
}
LDStickerPackInfoUserMutable.prototype.Languages = null;
LDStickerPackInfoUserMutable.prototype.Tags = null;
LDStickerPackInfoUserMutable.prototype.Name = null;
LDStickerPackInfoUserMutable.prototype.NameTranslations = null;
LDStickerPackInfoUserMutable.prototype.Description = null;
LDStickerPackInfoUserMutable.prototype.DescriptionTranslations = null;
LDStickerPackInfoUserMutable.prototype.PreviewImageBlobLinkString = null;
LDStickerPackInfoUserMutable.prototype.PreviewDecryptedHash = null;
LDStickerPackInfoUserMutable.prototype.Stickers = null;
function LDItemInfoSystemMutable(e) { 
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.PublishedState = e['p'];
    else
        this.PublishedState = null;
    if(e && (e['ep'] !== null && e['ep'] !== undefined))
        this.WasEverPublished = e['ep'];
    if(e && (e['$'] !== null && e['$'] !== undefined))
        this.Price = new LDPrice(e['$']);
    if(e && (e['c'] !== null && e['c'] !== undefined))
        this.CreationTimestamp = e['c'];
    if(e && (e['m'] !== null && e['m'] !== undefined))
        this.LastModifiedTimestamp = e['m'];
}
LDItemInfoSystemMutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.PublishedState !== null) o['p'] = this.PublishedState;
    if(this.WasEverPublished !== null) o['ep'] = this.WasEverPublished;
    if(this.Price !== null) o['$'] = this.Price.encode();
    if(this.CreationTimestamp !== null) o['c'] = this.CreationTimestamp;
    if(this.LastModifiedTimestamp !== null) o['m'] = this.LastModifiedTimestamp;
    return o;
}
LDItemInfoSystemMutable.prototype.PublishedState = null;
LDItemInfoSystemMutable.prototype.WasEverPublished = null;
LDItemInfoSystemMutable.prototype.Price = null;
LDItemInfoSystemMutable.prototype.CreationTimestamp = null;
LDItemInfoSystemMutable.prototype.LastModifiedTimestamp = null;
function LDAppInfoSystemMutable(e) { 
    LDItemInfoSystemMutable.call(this, e);
}
LDAppInfoSystemMutable.prototype = new LDItemInfoSystemMutable();
LDAppInfoSystemMutable.prototype.constructor = LDAppInfoSystemMutable;
LDAppInfoSystemMutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDItemInfoSystemMutable.prototype.encode.call(this, o);
    return o;
}
function LDStickerPackInfoSystemMutable(e) { 
    LDItemInfoSystemMutable.call(this, e);
}
LDStickerPackInfoSystemMutable.prototype = new LDItemInfoSystemMutable();
LDStickerPackInfoSystemMutable.prototype.constructor = LDStickerPackInfoSystemMutable;
LDStickerPackInfoSystemMutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDItemInfoSystemMutable.prototype.encode.call(this, o);
    return o;
}
function LDNearbyItemFeedMetadata(e) { 
    LDJSONLoggable.call(this, e);
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.FeedName = e['n'];
    else
        this.FeedName = null;
    if(e && (e['t'] !== null && e['t'] !== undefined))
        this.ThumbnailLink = e['t'];
    else
        this.ThumbnailLink = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.ThumbnailDecryptedHash = new Buffer(e['d'], 'base64');
    if(e && (e['p'] !== null && e['p'] !== undefined))
        this.RequiresPin = e['p'];
    else
        this.RequiresPin = null;
    if(e && (e['l'] !== null && e['l'] !== undefined))
        this.Latitude = e['l'];
    else
        this.Latitude = null;
    if(e && (e['g'] !== null && e['g'] !== undefined))
        this.Longitude = e['g'];
    else
        this.Longitude = null;
    if(e && (e['b'] !== null && e['b'] !== undefined))
        this.BroadcasterAccount = e['b'];
    else
        this.BroadcasterAccount = null;
}
LDNearbyItemFeedMetadata.prototype = new LDJSONLoggable();
LDNearbyItemFeedMetadata.prototype.constructor = LDNearbyItemFeedMetadata;
LDNearbyItemFeedMetadata.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDJSONLoggable.prototype.encode.call(this, o);
    if(this.FeedName !== null) o['n'] = this.FeedName;
    if(this.ThumbnailLink !== null) o['t'] = this.ThumbnailLink;
    if(this.ThumbnailDecryptedHash !== null) o['d'] = this.ThumbnailDecryptedHash.toString('base64');
    if(this.RequiresPin !== null) o['p'] = this.RequiresPin;
    if(this.Latitude !== null) o['l'] = this.Latitude;
    if(this.Longitude !== null) o['g'] = this.Longitude;
    if(this.BroadcasterAccount !== null) o['b'] = this.BroadcasterAccount;
    return o;
}
LDNearbyItemFeedMetadata.prototype.FeedName = null;
LDNearbyItemFeedMetadata.prototype.ThumbnailLink = null;
LDNearbyItemFeedMetadata.prototype.ThumbnailDecryptedHash = null;
LDNearbyItemFeedMetadata.prototype.RequiresPin = null;
LDNearbyItemFeedMetadata.prototype.Latitude = null;
LDNearbyItemFeedMetadata.prototype.Longitude = null;
LDNearbyItemFeedMetadata.prototype.BroadcasterAccount = null;
function LDProfileIdentitySetting(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Identity = new LDIdentity(e['i']);
}
LDProfileIdentitySetting.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Identity !== null) o['i'] = this.Identity.encode();
    return o;
}
LDProfileIdentitySetting.prototype.Identity = null;
function LDItemInfo(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.ImmutableContainer = new LDItemInfoImmutableContainer(e['i']);
    if(e && (e['s'] !== null && e['s'] !== undefined))
        this.SystemMutableContainer = new LDItemInfoSystemMutableContainer(e['s']);
    if(e && (e['u'] !== null && e['u'] !== undefined))
        this.UserMutableContainer = new LDItemInfoUserMutableContainer(e['u']);
}
LDItemInfo.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ImmutableContainer !== null) o['i'] = this.ImmutableContainer.encode();
    if(this.SystemMutableContainer !== null) o['s'] = this.SystemMutableContainer.encode();
    if(this.UserMutableContainer !== null) o['u'] = this.UserMutableContainer.encode();
    return o;
}
LDItemInfo.prototype.ImmutableContainer = null;
LDItemInfo.prototype.SystemMutableContainer = null;
LDItemInfo.prototype.UserMutableContainer = null;
function LDAppInfo(e) { 
    LDItemInfo.call(this, e);
}
LDAppInfo.prototype = new LDItemInfo();
LDAppInfo.prototype.constructor = LDAppInfo;
LDAppInfo.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDItemInfo.prototype.encode.call(this, o);
    return o;
}
function LDStickerPackInfo(e) { 
    LDItemInfo.call(this, e);
}
LDStickerPackInfo.prototype = new LDItemInfo();
LDStickerPackInfo.prototype.constructor = LDStickerPackInfo;
LDStickerPackInfo.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDItemInfo.prototype.encode.call(this, o);
    return o;
}
function LDAppInfoListingWrapper(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.Items = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.Items.push(new LDAppInfo(d[k]));
    }
    if(e && (e['nt'] !== null && e['nt'] !== undefined))
        this.NextToken = new Buffer(e['nt'], 'base64');
}
LDAppInfoListingWrapper.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Items !== null) { 
        o['i'] = [];
        var d = this.Items;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['Items'] = null;
    }
    if(this.NextToken !== null) o['nt'] = this.NextToken.toString('base64');
    return o;
}
LDAppInfoListingWrapper.prototype.Items = null;
LDAppInfoListingWrapper.prototype.NextToken = null;
function LDStickerPackInfoListingWrapper(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined)) { 
        this.Items = [];
        var d = e['i'];
        for(var k = 0; k < d.length; ++k) this.Items.push(new LDStickerPackInfo(d[k]));
    }
    if(e && (e['nt'] !== null && e['nt'] !== undefined))
        this.NextToken = new Buffer(e['nt'], 'base64');
}
LDStickerPackInfoListingWrapper.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Items !== null) { 
        o['i'] = [];
        var d = this.Items;
        for(var k = 0; k < d.length; ++k) o['i'].push(d[k].encode());
    } else {
        o['Items'] = null;
    }
    if(this.NextToken !== null) o['nt'] = this.NextToken.toString('base64');
    return o;
}
LDStickerPackInfoListingWrapper.prototype.Items = null;
LDStickerPackInfoListingWrapper.prototype.NextToken = null;
function LDMockReceipt(e) { 
    if(e && (e['j'] !== null && e['j'] !== undefined))
        this.Junk = new Buffer(e['j'], 'base64');
}
LDMockReceipt.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Junk !== null) o['j'] = this.Junk.toString('base64');
    return o;
}
LDMockReceipt.prototype.Junk = null;
function LDMockBillingInfo(e) { 
    if(e && (e['j'] !== null && e['j'] !== undefined))
        this.Junk = new Buffer(e['j'], 'base64');
}
LDMockBillingInfo.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Junk !== null) o['j'] = this.Junk.toString('base64');
    return o;
}
LDMockBillingInfo.prototype.Junk = null;
function LDAppScreenshot(e) { 
    if(e && (e['tb'] !== null && e['tb'] !== undefined))
        this.ThumbnailBlobLinkString = e['tb'];
    else
        this.ThumbnailBlobLinkString = null;
    if(e && (e['tdh'] !== null && e['tdh'] !== undefined))
        this.ThumbnailDecryptedHash = new Buffer(e['tdh'], 'base64');
    if(e && (e['fb'] !== null && e['fb'] !== undefined))
        this.FullsizeBlobLinkString = e['fb'];
    else
        this.FullsizeBlobLinkString = null;
    if(e && (e['fdh'] !== null && e['fdh'] !== undefined))
        this.FullsizeDecryptedHash = new Buffer(e['fdh'], 'base64');
}
LDAppScreenshot.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ThumbnailBlobLinkString !== null) o['tb'] = this.ThumbnailBlobLinkString;
    if(this.ThumbnailDecryptedHash !== null) o['tdh'] = this.ThumbnailDecryptedHash.toString('base64');
    if(this.FullsizeBlobLinkString !== null) o['fb'] = this.FullsizeBlobLinkString;
    if(this.FullsizeDecryptedHash !== null) o['fdh'] = this.FullsizeDecryptedHash.toString('base64');
    return o;
}
LDAppScreenshot.prototype.ThumbnailBlobLinkString = null;
LDAppScreenshot.prototype.ThumbnailDecryptedHash = null;
LDAppScreenshot.prototype.FullsizeBlobLinkString = null;
LDAppScreenshot.prototype.FullsizeDecryptedHash = null;
function LDAppStore(e) { 
    if(e && (e['e'] !== null && e['e'] !== undefined))
        this.PackageName = e['e'];
    else
        this.PackageName = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Url = e['d'];
    else
        this.Url = null;
}
LDAppStore.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.PackageName !== null) o['e'] = this.PackageName;
    if(this.Url !== null) o['d'] = this.Url;
    return o;
}
LDAppStore.prototype.PackageName = null;
LDAppStore.prototype.Url = null;
function LDSticker(e) { 
    if(e && (e['i'] !== null && e['i'] !== undefined))
        this.Id = e['i'];
    else
        this.Id = null;
    if(e && (e['w'] !== null && e['w'] !== undefined))
        this.Width = e['w'];
    else
        this.Width = null;
    if(e && (e['h'] !== null && e['h'] !== undefined))
        this.Height = e['h'];
    else
        this.Height = null;
    if(e && (e['tb'] !== null && e['tb'] !== undefined))
        this.ThumbnailBlobLinkString = e['tb'];
    else
        this.ThumbnailBlobLinkString = null;
    if(e && (e['tdh'] !== null && e['tdh'] !== undefined))
        this.ThumbnailDecryptedHash = new Buffer(e['tdh'], 'base64');
    if(e && (e['fb'] !== null && e['fb'] !== undefined))
        this.FullsizeBlobLinkString = e['fb'];
    else
        this.FullsizeBlobLinkString = null;
    if(e && (e['fdh'] !== null && e['fdh'] !== undefined))
        this.FullsizeDecryptedHash = new Buffer(e['fdh'], 'base64');
    if(e && (e['n'] !== null && e['n'] !== undefined))
        this.Name = e['n'];
    else
        this.Name = null;
    if(e && (e['d'] !== null && e['d'] !== undefined))
        this.Description = e['d'];
    else
        this.Description = null;
    if(e && (e['t'] !== null && e['t'] !== undefined)) { 
        this.Tags = [];
        var d = e['t'];
        for(var k = 0; k < d.length; ++k) this.Tags.push(d[k]);
    }
}
LDSticker.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Id !== null) o['i'] = this.Id;
    if(this.Width !== null) o['w'] = this.Width;
    if(this.Height !== null) o['h'] = this.Height;
    if(this.ThumbnailBlobLinkString !== null) o['tb'] = this.ThumbnailBlobLinkString;
    if(this.ThumbnailDecryptedHash !== null) o['tdh'] = this.ThumbnailDecryptedHash.toString('base64');
    if(this.FullsizeBlobLinkString !== null) o['fb'] = this.FullsizeBlobLinkString;
    if(this.FullsizeDecryptedHash !== null) o['fdh'] = this.FullsizeDecryptedHash.toString('base64');
    if(this.Name !== null) o['n'] = this.Name;
    if(this.Description !== null) o['d'] = this.Description;
    if(this.Tags !== null) { 
        o['t'] = [];
        var d = this.Tags;
        for(var k = 0; k < d.length; ++k) o['t'].push(d[k]);
    } else {
        o['Tags'] = null;
    }
    return o;
}
LDSticker.prototype.Id = null;
LDSticker.prototype.Width = null;
LDSticker.prototype.Height = null;
LDSticker.prototype.ThumbnailBlobLinkString = null;
LDSticker.prototype.ThumbnailDecryptedHash = null;
LDSticker.prototype.FullsizeBlobLinkString = null;
LDSticker.prototype.FullsizeDecryptedHash = null;
LDSticker.prototype.Name = null;
LDSticker.prototype.Description = null;
LDSticker.prototype.Tags = null;
function LDPrice(e) { 
    if(e && (e['f'] !== null && e['f'] !== undefined))
        this.Free = e['f'];
    else
        this.Free = null;
    if(e && (e['usd'] !== null && e['usd'] !== undefined))
        this.Usd = e['usd'];
    else
        this.Usd = null;
}
LDPrice.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.Free !== null) o['f'] = this.Free;
    if(this.Usd !== null) o['usd'] = this.Usd;
    return o;
}
LDPrice.prototype.Free = null;
LDPrice.prototype.Usd = null;
function LDItemInfoImmutableContainer(e) { 
    if(e && (e['ai'] !== null && e['ai'] !== undefined))
        this.AppInfoImmutable = new LDAppInfoImmutable(e['ai']);
    if(e && (e['si'] !== null && e['si'] !== undefined))
        this.StickerPackInfoImmutable = new LDStickerPackInfoImmutable(e['si']);
}
LDItemInfoImmutableContainer.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.AppInfoImmutable !== null) o['ai'] = this.AppInfoImmutable.encode();
    if(this.StickerPackInfoImmutable !== null) o['si'] = this.StickerPackInfoImmutable.encode();
    return o;
}
LDItemInfoImmutableContainer.prototype.AppInfoImmutable = null;
LDItemInfoImmutableContainer.prototype.StickerPackInfoImmutable = null;
function LDItemInfoImmutable(e) { 
    if(e && (e['id'] !== null && e['id'] !== undefined))
        this.ItemId = new LDItemId(e['id']);
}
LDItemInfoImmutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    if(this.ItemId !== null) o['id'] = this.ItemId.encode();
    return o;
}
LDItemInfoImmutable.prototype.ItemId = null;
function LDAppInfoImmutable(e) { 
    LDItemInfoImmutable.call(this, e);
}
LDAppInfoImmutable.prototype = new LDItemInfoImmutable();
LDAppInfoImmutable.prototype.constructor = LDAppInfoImmutable;
LDAppInfoImmutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDItemInfoImmutable.prototype.encode.call(this, o);
    return o;
}
function LDStickerPackInfoImmutable(e) { 
    LDItemInfoImmutable.call(this, e);
}
LDStickerPackInfoImmutable.prototype = new LDItemInfoImmutable();
LDStickerPackInfoImmutable.prototype.constructor = LDStickerPackInfoImmutable;
LDStickerPackInfoImmutable.prototype.encode = function (o) { 
    if(o === undefined) o = {};
    LDItemInfoImmutable.prototype.encode.call(this, o);
    return o;
}
LDSubscribeForNearbyItemsRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterNearbyItemRequestProtocol();
    t.SubscribeForNearbyItemsRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.NearbyItem = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSendDirectMessageRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterDirectMessagingRequestProtocol();
    t.SendSmsMessageRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Oob = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDFindGamersRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterGameChallengeRequestProtocol();
    t.FindGamers = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.GameChallenge = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDReportScoreRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterHighScoreRequestProtocol();
    t.ReportScoreRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.HighScore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRemoveItemsFromProfileRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.RemoveItemsFromProfileRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDListApiKeysRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.ListApiKeysRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDCheckAccountOptedInRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterGameChallengeRequestProtocol();
    t.CheckAccountOptedIn = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.GameChallenge = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUpdateChallengeLocationRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterGameChallengeRequestProtocol();
    t.UpdateChallengeLocation = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.GameChallenge = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDLinkOmletIdentityRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.LinkOmletIdentityRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDListPublishedItemsRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.ListPublishedItemsRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGameChallengeRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterGameChallengeRequestProtocol();
    t.GameChallenge = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.GameChallenge = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDAddItemsToProfileRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.AddItemsToProfileRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnpublishItemRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.UnpublishItemRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetMessagesByTypeRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.GetMessagesByType = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDPingRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterRequestContainer();
    t.Ping = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDPingRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpRequestContainer();
    t.Ping = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGenerateGrantForItemRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.GenerateGrantForItemRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDDoesItemHaveGrantRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.DoesItemHaveGrantRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUploadAddressBookEntriesRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterAddressBookRequestProtocol();
    t.UploadEntriesRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.AddressBook = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetAccountDetailsByIdentityRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.GetDetailsByIdentity = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSubscribeFeedRealtimeRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.SubscribeFeedRealtime = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetFeedStateRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterInboxRequestProtocol();
    t.GetFeedState = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Inbox = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDFetchNearbyItemsRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterNearbyItemRequestProtocol();
    t.FetchNearbyItemsRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.NearbyItem = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDCreateSubscriptionRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterSubscriptionRequestProtocol();
    t.GetSubscriptionUrl = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Subscription = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDAddFeaturesToProfileRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.AddFeaturesToProfileRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetContactProfileAndPublicStateRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.GetProfileDetailsAndPublicStateRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetAppSigninLinkRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.GetAppSigninLinkRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRegisterPushNotificationKeyRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterInboxRequestProtocol();
    t.RegisterPushNotificationKey = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Inbox = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDBlockContactRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterContactRequestProtocol();
    t.BlockContactRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Contact = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDImageSearchRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMiscellaneousRequestProtocol();
    t.ImageSearchRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Misc = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDDeactivateApiKeyRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.DeactivateApiKeyRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDCreateFeedRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.CreateFeed = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDOptInForGamingRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterGameChallengeRequestProtocol();
    t.OptIn = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.GameChallenge = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDPublishItemRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.PublishItemRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDDeleteDeviceRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterDeviceRequestProtocol();
    t.DeleteDeviceRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Device = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRegisterWithTokenRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.RegisterWithTokenRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetProfilePublicStateRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.GetProfilePublicStateRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetCloudConfigRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterCloudSyncRequestProtocol();
    t.GetCloudConfigRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.CloudSync = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetDingTimeoutRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterDeviceRequestProtocol();
    t.SetDingTimeoutRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Device = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDBroadcastItemRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterNearbyItemRequestProtocol();
    t.BroadcastItemRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.NearbyItem = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetDirtyFeedsRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterInboxRequestProtocol();
    t.GetDirtyFeeds = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Inbox = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDDisconnectCloudSyncRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterCloudSyncRequestProtocol();
    t.DisconnectCloudSyncRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.CloudSync = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnsubscribeForAccountInboxRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterInboxRequestProtocol();
    t.UnsubscribeAccount = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Inbox = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetAppleBadgeCountRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterInboxRequestProtocol();
    t.SetAppleBadgeCount = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Inbox = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetMessagesSinceRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.GetMessagesSince = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnsubscribeFeedRealtimeRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.UnsubscribeFeedRealtime = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDAddMemberRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.AddMember = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDCheckIdentityLinkedRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.CheckLinkedIdentityRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDListAllItemsRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.ListAllItemsRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDHelloChallengeRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterRequestContainer();
    t.HelloChallenge = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDHelloChallengeRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpRequestContainer();
    t.HelloChallenge = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetUploadTicketRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDClusterOrDeviceToClusterBlobRequestProtocol();
    t.GetUploadTicket = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Blob = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDAddPendingInvitationRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.AddPendingInvitation = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetItemInfoRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.GetItemInfoRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRemovePendingInvitationRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.RemovePendingInvitation = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRemoveContactRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterContactRequestProtocol();
    t.RemoveContactRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Contact = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetItemUsingGrantRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.GetItemUsingGrantRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDDeleteItemRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.DeleteItemRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDConfirmTokenRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.ConfirmTokenRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnlinkIdentityRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.UnlinkIdentityRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDDeleteMessageRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.DeleteMessage = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDJoinBroadcastRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.JoinBroadcast = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnbroadcastItemRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterNearbyItemRequestProtocol();
    t.UnbroadcastItemRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.NearbyItem = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetProfileDetailsRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.GetProfileDetailsRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRemoveMemberRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.RemoveMember = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRemoveFeaturesFromProfileRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.RemoveFeaturesFromProfileRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDCreateItemInfoRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.CreateItemInfoRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetTopScoresRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterHighScoreRequestProtocol();
    t.GetTopScoresRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.HighScore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDListFlaggedUsersRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.ListFlaggedUsers = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnblockContactRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterContactRequestProtocol();
    t.UnblockContactRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Contact = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetProfileNameRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.SetNameRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDOverwriteMessageRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.OverwriteMessage = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetEmailLoginLinkRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.GetEmailLoginLink = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRegisterWithOAuthRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.RegisterWithOAuthRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUserUpdateItemInfoRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.UserUpdateItemInfoRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetIdentityRecordsRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.GetIdentityRecordsRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetFeedNameRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.SetFeedName = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDListItemsForAccountRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.ListItemsForAccountRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDFlagUserRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMiscellaneousRequestProtocol();
    t.FlagUser = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Misc = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetJoinFeedLinkRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.GetJoinFeedLink = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDAddDeviceRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterDeviceRequestProtocol();
    t.AddDeviceRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Device = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetMessageByIdRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.GetMessageById = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetContactProfileRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterAddressBookRequestProtocol();
    t.GetContactProfileRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.AddressBook = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetOmletContactProfileRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.GetContactProfileRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDChangeUserNameRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.ChangeUserName = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDDeleteGrantForItemRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.DeleteGrantForItemRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetDirectFeedRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterDirectMessagingRequestProtocol();
    t.GetSmsFeedRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Oob = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnsubscribeForNearbyItemsRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterNearbyItemRequestProtocol();
    t.UnsubscribeForNearbyItemsRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.NearbyItem = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSystemUpdateItemInfoRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.SystemUpdateItemInfoRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDAddMessageRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.AddMessage = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDDisableUserGameChallengeRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.DisableGameChallenge = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetDefaultAccessRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.DefaultAccess = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDVerifyExistsAndPermanenceRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDClusterOrDeviceToClusterBlobRequestProtocol();
    t.VerifyExistsAndPermanence = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Blob = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDReviewItemRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.ReviewItemRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGameChallengeCompleteRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterGameChallengeRequestProtocol();
    t.GameChallengeComplete = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.GameChallenge = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetAccountDetailsByAccountRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.GetDetailsByAccount = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnsubscribeFeedRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.UnsubscribeFeed = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDFailureReportRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMiscellaneousRequestProtocol();
    t.FailureReport = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Misc = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetCloudConfigRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterCloudSyncRequestProtocol();
    t.SetCloudConfigRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.CloudSync = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSendRealtimeRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.SendRealtime = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDMutualAddContactByTokenRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterAddressBookRequestProtocol();
    t.MutualAddContact = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.AddressBook = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDApplyDocumentTransformRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.ApplyDocumentRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUrlToStoryRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMiscellaneousRequestProtocol();
    t.UrlToStoryRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Misc = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDVerifyUploadCompletedRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDClusterOrDeviceToClusterBlobRequestProtocol();
    t.VerifyUploadCompleted = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Blob = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDChangeUserProfilePictureRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.ChangeUserPicture = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetFeedThumbnailRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.SetFeedThumbnail = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetAddMeLinkRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterAddressBookRequestProtocol();
    t.GetAddMeLinkRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.AddressBook = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetDownloadTicketRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDClusterOrDeviceToClusterBlobRequestProtocol();
    t.GetDownloadTicket = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Blob = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDJoinFeedRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.JoinFeed = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSubscribeFeedRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.SubscribeFeed = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDCreatePlaygroundRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMiscellaneousRequestProtocol();
    t.CreatePlaygroundRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Misc = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDOverwriteContactRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterContactRequestProtocol();
    t.OverwriteContactsRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Contact = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUnblockIdentityRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.UnblockIdentity = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDConfirmAuthCodeRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.ConfirmAuthCodeRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetProfilePictureRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterProfileRequestProtocol();
    t.SetProfilePictureRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Profile = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetHighScoreRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterHighScoreRequestProtocol();
    t.GetHighScoreRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.HighScore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDUpdateMessageRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.UpdateMessage = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetPublicFeedDetailsRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.GetFeedDetails = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDLogUserOutRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpAdministrativeRequestProtocol();
    t.LogUserOut = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Administrative = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetSmsParticipationRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterDirectMessagingRequestProtocol();
    t.SetSmsParticipationRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Oob = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetLinkedIdentitiesRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpSignupRequestProtocol();
    t.GetLinkedIdentitiesRequest = o;
    o = t;
    t = new LDDeviceToIdpRequestContainer();
    t.Signup = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSetFeedAcceptanceRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterInboxRequestProtocol();
    t.SetFeedAcceptance = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Inbox = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDCompleteChallengeRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterRequestContainer();
    t.CompleteChallenge = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDCompleteChallengeRequest.prototype.makeIdpRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToIdpRequestContainer();
    t.CompleteChallenge = o;
    o = t;
    t = new LDDeviceToIdpRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGenerateApiKeyRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterOmletItemStoreRequestProtocol();
    t.GenerateApiKeyRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.OmletAppStore = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDGetMessagesBeforeRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterMessageRequestProtocol();
    t.GetMessagesBefore = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Message = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDRefreshCloudConfigRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterCloudSyncRequestProtocol();
    t.RefreshCloudConfigRequest = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.CloudSync = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
LDSubscribeForAccountInboxRequest.prototype.makeClusterRpc = function (o) {
    var o = this, t = null;
    t = new LDDeviceToClusterInboxRequestProtocol();
    t.SubscribeAccount = o;
    o = t;
    t = new LDDeviceToClusterRequestContainer();
    t.Inbox = o;
    o = t;
    t = new LDDeviceToClusterRpcWrapper();
    t.Request = o;
    o = t;
    return o;
}
var LDApiCode = {}
LDApiCode.NamedFeedsMustBeUnderYourIdentity = "NamedFeedsMustBeUnderYourIdentity";
LDApiCode.ConcurrentFeedModificiation = "ConcurrentFeedModificiation";
LDApiCode.InvalidFeedId = "InvalidFeedId";
LDApiCode.FeedDoesNotHaveProperties = "FeedDoesNotHaveProperties";
LDApiCode.DeviceMustBeRegistered = "DeviceMustBeRegistered";
LDApiCode.ClaimTokenHasExpired = "ClaimTokenHasExpired";
LDApiCode.MustSpecifyClientVersion = "MustSpecifyClientVersion";
LDApiCode.MustSpecifyDeviceToken = "MustSpecifyDeviceToken";
LDApiCode.MustSpecifyValidIdentity = "MustSpecifyValidIdentity";
LDApiCode.MustSpecifyConfirmationToken = "MustSpecifyConfirmationToken";
LDApiCode.OwnerCannotLosePrivilege = "OwnerCannotLosePrivilege";
LDApiCode.CantAddSomeoneElseToOpenFeedUnlessYouAreAnAdministrator = "CantAddSomeoneElseToOpenFeedUnlessYouAreAnAdministrator";
LDApiCode.BadAuthentication = "BadAuthentication";
LDApiCode.InvalidToken = "InvalidToken";
LDApiCode.InvalidIdentityType = "InvalidIdentityType";
LDApiCode.RemoteApiFormatError = "RemoteApiFormatError";
LDApiCode.DataConnectionFailed = "DataConnectionFailed";
LDApiCode.MessageMustBeSentAsAnAuthenticatedIdentity = "MessageMustBeSentAsAnAuthenticatedIdentity";
LDApiCode.UnexpectedFieldsInObjData = "UnexpectedFieldsInObjData";
LDApiCode.UnknownError = "UnknownError";
LDApiCode.PersistentMessagesWereDroppedYouMustResync = "PersistentMessagesWereDroppedYouMustResync";
LDApiCode.CannotMakeTwoRequestsOnTheSameChannel = "CannotMakeTwoRequestsOnTheSameChannel";
LDApiCode.DesynchronizedWhileStreaming = "DesynchronizedWhileStreaming";
LDApiCode.InvalidAccessControlListManipulator = "InvalidAccessControlListManipulator";
LDApiCode.DisallowedPermissionType = "DisallowedPermissionType";
LDApiCode.MissingFieldsInRequest = "MissingFieldsInRequest";
LDApiCode.RedirectURIMismatch = "RedirectURIMismatch";
LDApiCode.NearbyMustHaveAPositiveTTL = "NearbyMustHaveAPositiveTTL";
LDApiCode.NearbyTTLToLarge = "NearbyTTLToLarge";
LDApiCode.NearbyUpdateKeyMustBeAtLeast8Characters = "NearbyUpdateKeyMustBeAtLeast8Characters";
LDApiCode.NearbyTooManyPlaces = "NearbyTooManyPlaces";
LDApiCode.OrderedFeedNotAllowed = "OrderedFeedNotAllowed";
LDApiCode.DataHashMismatch = "DataHashMismatch";
LDApiCode.BinaryTooLarge = "BinaryTooLarge";
LDApiCode.BadBlobTicket = "BadBlobTicket";
LDApiCode.DataLengthMismatch = "DataLengthMismatch";
LDApiCode.InvalidPendingUploadRequest = "InvalidPendingUploadRequest";
LDApiCode.IdentityNotLinkedToDevice = "IdentityNotLinkedToDevice";
LDApiCode.BadFeedFormat = "BadFeedFormat";
LDApiCode.BadFeedState = "BadFeedState";
LDApiCode.BadBlobSizeAlreadyExistWithDifferentSize = "BadBlobSizeAlreadyExistWithDifferentSize";
LDApiCode.MustUploadDataBeforeCompleting = "MustUploadDataBeforeCompleting";
LDApiCode.IncompleteUpload = "IncompleteUpload";
LDApiCode.BadPageFormat = "BadPageFormat";
LDApiCode.BadIdentityFormat = "BadIdentityFormat";
LDApiCode.BadTopicFormat = "BadTopicFormat";
LDApiCode.CorruptFeedKey = "CorruptFeedKey";
LDApiCode.BadBlobZeroSize = "BadBlobZeroSize";
LDApiCode.BadBlobContentType = "BadBlobContentType";
LDApiCode.TooManyPendingRequests = "TooManyPendingRequests";
LDApiCode.UnsupportedBlobService = "UnsupportedBlobService";
LDApiCode.UnsupportedAuthService = "UnsupportedAuthService";
LDApiCode.RemoteProtocolError = "RemoteProtocolError";
LDApiCode.BlobNotFound = "BlobNotFound";
LDApiCode.CantSpecifyUUIDforAddedSticker = "CantSpecifyUUIDforAddedSticker";
LDApiCode.MustSpecifyATag = "MustSpecifyATag";
LDApiCode.MustSpecifyData = "MustSpecifyData";
LDApiCode.FailedToGenerateThumbnails = "FailedToGenerateThumbnails";
LDApiCode.MissingStickerForUpdate = "MissingStickerForUpdate";
LDApiCode.InvalidImageType = "InvalidImageType";
LDApiCode.CannotAddBlockedIdentity = "CannotAddBlockedIdentity";
LDApiCode.DocumentAlreadyExists = "DocumentAlreadyExists";
LDApiCode.DocumentDoesntExist = "DocumentDoesntExist";
LDApiCode.DocumentChangeRejected = "DocumentChangeRejected";
LDApiCode.BadDocumentKeyFormat = "BadDocumentKeyFormat";
LDApiCode.RequestTooLarge = "RequestTooLarge";
LDApiCode.SignatureVerificationFailed = "SignatureVerificationFailed";
LDApiCode.StickerPackNotFree = "StickerPackNotFree";
LDApiCode.CannotAddToChatWithBlockedIdentity = "CannotAddToChatWithBlockedIdentity";
LDApiCode.ScriptTimeoutException = "ScriptTimeoutException";
LDApiCode.MessageAlreadyExists = "MessageAlreadyExists";
LDApiCode.MessageDoesNotExist = "MessageDoesNotExist";
LDApiCode.MessageVersionMismatch = "MessageVersionMismatch";
LDApiCode.MessageNotWritable = "MessageNotWritable";
LDApiCode.MustRespondToChallenge = "MustRespondToChallenge";
LDApiCode.MustHello = "MustHello";
LDApiCode.BadPushResponseId = "BadPushResponseId";
LDApiCode.BadRequestId = "BadRequestId";
LDApiCode.UnknownRequestType = "UnknownRequestType";
LDApiCode.DisallowedForConnectionType = "DisallowedForConnectionType";
LDApiCode.UnknownSourceCluster = "UnknownSourceCluster";
LDApiCode.ChallengeTooSmall = "ChallengeTooSmall";
LDApiCode.AccountMismatch = "AccountMismatch";
LDApiCode.BadPushRequestId = "BadPushRequestId";
LDApiCode.BadResponseId = "BadResponseId";
LDApiCode.AccountNotMappedToCluster = "AccountNotMappedToCluster";
LDApiCode.ImplementationFailure = "ImplementationFailure";
LDApiCode.UnknownResponseType = "UnknownResponseType";
LDApiCode.UnknownPushType = "UnknownPushType";
LDApiCode.OperationNotAllowedCrossCluster = "OperationNotAllowedCrossCluster";
LDApiCode.OperationOnlyAllowedCrossCluster = "OperationOnlyAllowedCrossCluster";
LDApiCode.OperationNotAllowedByClient = "OperationNotAllowedByClient";
LDApiCode.WrongClusterSource = "WrongClusterSource";
LDApiCode.OperationNotAllowedCrossNode = "OperationNotAllowedCrossNode";
LDApiCode.DeliveryTokenCannotBeReassigned = "DeliveryTokenCannotBeReassigned";
LDApiCode.ExtraMustBeNull = "ExtraMustBeNull";
LDApiCode.DeviceAlreadyAssociated = "DeviceAlreadyAssociated";
LDApiCode.CountryBlocksSMSAtThisTime = "CountryBlocksSMSAtThisTime";
LDApiCode.TokenAuthBlocked = "TokenAuthBlocked";
LDApiCode.DeviceNotFound = "DeviceNotFound";
LDApiCode.AccountNotFound = "AccountNotFound";
LDApiCode.TokenCannotBeDelivered = "TokenCannotBeDelivered";
LDApiCode.InvalidIdpCaller = "InvalidIdpCaller";
LDApiCode.RemoteSubscriptionNotEstablished = "RemoteSubscriptionNotEstablished";
LDApiCode.MustInitiateSubscriptionBeforeGranting = "MustInitiateSubscriptionBeforeGranting";
LDApiCode.InvalidDeliveryInterest = "InvalidDeliveryInterest";
LDApiCode.IdentityMismatch = "IdentityMismatch";
LDApiCode.UnknownServiceType = "UnknownServiceType";
LDApiCode.IdentityNotFound = "IdentityNotFound";
LDApiCode.AlreadySubscribed = "AlreadySubscribed";
LDApiCode.NotSubscribed = "NotSubscribed";
LDApiCode.NoStateForFeed = "NoStateForFeed";
LDApiCode.RescheduleJob = "RescheduleJob";
LDApiCode.MemberNotFound = "MemberNotFound";
LDApiCode.UserAlreadyHasOmletId = "UserAlreadyHasOmletId";
LDApiCode.OmletIdHasBeenTaken = "OmletIdHasBeenTaken";
LDApiCode.SizeLimitExceeded = "SizeLimitExceeded";
LDApiCode.InvalidLocalBatchWrite = "InvalidLocalBatchWrite";
LDApiCode.InvalidMessageTransform = "InvalidMessageTransform";
LDApiCode.InvalidBlobLink = "InvalidBlobLink";
LDApiCode.BlobSizeTooLarge = "BlobSizeTooLarge";
LDApiCode.Blob_BlobIsPermanent = "Blob_BlobIsPermanent";
LDApiCode.OmletAppStore_AppInfoAlreadyExists = "OmletAppStore_AppInfoAlreadyExists";
LDApiCode.OmletItemStore_ItemInfoNotFound = "OmletItemStore_ItemInfoNotFound";
LDApiCode.OmletItemStore_ItemInfoAlreadyExists = "OmletItemStore_ItemInfoAlreadyExists";
LDApiCode.OmletItemStore_InvalidGrantException = "OmletItemStore_InvalidGrantException";
LDApiCode.Profile_ItemAlreadyDeleted = "Profile_ItemAlreadyDeleted";
LDApiCode.Profile_ItemNotOwned = "Profile_ItemNotOwned";
LDApiCode.BadRequest = "BadRequest";
LDApiCode.Unauthorized = "Unauthorized";
LDApiCode.FailedToGenerateLink = "FailedToGenerateLink";
LDApiCode.EncryptionRequired = "EncryptionRequired";
LDApiCode.CorruptRequest = "CorruptRequest";
LDApiCode.OperationNotAllowedToIdp = "OperationNotAllowedToIdp";
LDApiCode.OperationNotAllowByLegacy = "OperationNotAllowByLegacy";
LDApiCode.MissingGameChallenge = "MissingGameChallenge";
LDApiCode.GameChallengeAlreadyComplete = "GameChallengeAlreadyComplete";
LDApiCode.OperationNotAllowedToLegacy = "OperationNotAllowedToLegacy";
LDApiCode.MigrationTimingIssue = "MigrationTimingIssue";
LDApiCode.IdentityAlreadyExists = "IdentityAlreadyExists";
LDApiCode.BadSubscriptionContext = "BadSubscriptionContext";
LDApiCode.InvalidWebhookUrl = "InvalidWebhookUrl";
LDApiCode.BadOAuthToken = "BadOAuthToken";
LDApiCode.CannotUnlinkAllIdentities = "CannotUnlinkAllIdentities";
LDApiCode.CannotUnlinkAnOmletID = "CannotUnlinkAnOmletID";
LDApiCode.LegacyAccountFound = "LegacyAccountFound";
LDApiCode.AccountAlreadyExists = "AccountAlreadyExists";
LDApiCode.LegacyMigrationToWrongCluster = "LegacyMigrationToWrongCluster";
LDApiCode.OperationNotAllowedToNonDefault = "OperationNotAllowedToNonDefault";
LDApiCode.OperationNotApplicableToSelf = "OperationNotApplicableToSelf";
LDApiCode.InvalidPingInterval = "InvalidPingInterval";
LDApiCode.OperationNotAllowedByIdp = "OperationNotAllowedByIdp";
LDApiCode.FailedToDeliverToken = "FailedToDeliverToken";
LDApiCode.UnsupportedEncoding = "UnsupportedEncoding";
LDApiCode.InvalidUrl = "InvalidUrl";
LDApiCode.CorruptMessageBody = "CorruptMessageBody";
LDApiCode.UnknownCluster = "UnknownCluster";
LDApiCode.CloudTokenWillNeverWork = "CloudTokenWillNeverWork";
LDApiCode.CloudTokenTemporarilyFailed = "CloudTokenTemporarilyFailed";
LDApiCode.PushServiceNotSupportedInChina = "PushServiceNotSupportedInChina";
LDApiCode.CloudProviderNotSupportedInChina = "CloudProviderNotSupportedInChina";
LDApiCode.GameChallengeService_UserNotOptedIn = "GameChallengeService_UserNotOptedIn";
LDApiCode.PingTimeout = "PingTimeout";
LDApiCode.ClientPingTimeout = "ClientPingTimeout";
LDApiCode.EmailBounced = "EmailBounced";
LDApiCode.OmletItemStore_MaxApiKeysExceeded = "OmletItemStore_MaxApiKeysExceeded";
LDApiCode.OmletItemStore_OperationNotAllowedToType = "OmletItemStore_OperationNotAllowedToType";
LDApiCode.InvalidApiKey = "InvalidApiKey";
LDApiCode.DeviceMappedToWrongApp = "DeviceMappedToWrongApp";
var LDAcceptanceState = {}
LDAcceptanceState.No = "No";
LDAcceptanceState.Yes = "Yes";
LDAcceptanceState.Push = "Push";
LDAcceptanceState.Removed = "Removed";
LDAcceptanceState.Restricted = "Restricted";
LDAcceptanceState.RestrictedPush = "RestrictedPush";
LDAcceptanceState.Blocked = "Blocked";
var LDStoreItemType = {}
LDStoreItemType.App = "App";
LDStoreItemType.StickerPack = "StickerPack";
var LDLocationType = {}
LDLocationType.CITY = "CITY";
LDLocationType.COUNTRY = "COUNTRY";
LDLocationType.CONTINENT = "CONTINENT";
LDLocationType.GLOBAL = "GLOBAL";
LDLocationType.LOCAL = "LOCAL";
var LDTaggedItemType = {}
LDTaggedItemType.Feed = 0;
var LDIdentityType = {}
LDIdentityType.Unknown = "unknown";
LDIdentityType.Email = "email";
LDIdentityType.Facebook = "fb";
LDIdentityType.Phone = "phone";
LDIdentityType.Subscription = "sub";
LDIdentityType.OmletId = "omlet";
LDIdentityType.Huawei = "huawei";
LDIdentityType.Htc = "htc";
LDIdentityType.Account = "account";
var LDPushType = {}
LDPushType.GCM = "GCM";
LDPushType.APNS = "APNS";
LDPushType.Baidu = "Baidu";
LDPushType.Amazon = "Amazon";
LDPushType.WPNS = "WPNS";
var LDProvider = {}
LDProvider.Dropbox = "Dropbox";
LDProvider.Box = "Box";
LDProvider.BaiduPCS = "BaiduPCS";
LDProvider.OneDrive = "OneDrive";
LDProvider.GoogleDrive = "GoogleDrive";
LDProvider.OmStore = "OmStore";
LDProvider.Dummy = "Dummy";
var LDPublishedState = {}
LDPublishedState.NotPublished = "NotPublished";
LDPublishedState.Published = "Published";
LDPublishedState.InReview = "InReview";
LDPublishedState.Deleted = "Deleted";
module.exports = {
    LDJSONLoggable:LDJSONLoggable,
    LDRequestContainerBase:LDRequestContainerBase,
    LDDeviceToIdpRequestContainer:LDDeviceToIdpRequestContainer,
    LDResponseContainerBase:LDResponseContainerBase,
    LDDeviceToIdpResponseContainer:LDDeviceToIdpResponseContainer,
    LDDeviceToClusterRequestContainer:LDDeviceToClusterRequestContainer,
    LDDeviceToClusterResponseContainer:LDDeviceToClusterResponseContainer,
    LDPublicKeys:LDPublicKeys,
    LDSynchronizedMessageBody:LDSynchronizedMessageBody,
    LDAcceptanceChange:LDAcceptanceChange,
    LDBroadcastSettings:LDBroadcastSettings,
    LDAddMeInfo:LDAddMeInfo,
    LDJoinFeedInfo:LDJoinFeedInfo,
    LDDeviceToIdpRpcWrapper:LDDeviceToIdpRpcWrapper,
    LDDeviceToClusterRpcWrapper:LDDeviceToClusterRpcWrapper,
    LDRpcContext:LDRpcContext,
    LDHelloChallengeRequest:LDHelloChallengeRequest,
    LDCompleteChallengeRequest:LDCompleteChallengeRequest,
    LDPingRequest:LDPingRequest,
    LDRequestProtocolBase:LDRequestProtocolBase,
    LDDeviceToIdpSignupRequestProtocol:LDDeviceToIdpSignupRequestProtocol,
    LDDeviceToIdpAdministrativeRequestProtocol:LDDeviceToIdpAdministrativeRequestProtocol,
    LDHelloChallengeResponse:LDHelloChallengeResponse,
    LDCompleteChallengeResponse:LDCompleteChallengeResponse,
    LDSimpleResponse:LDSimpleResponse,
    LDPingResponse:LDPingResponse,
    LDResponseProtocolBase:LDResponseProtocolBase,
    LDDeviceToIdpSignupResponseProtocol:LDDeviceToIdpSignupResponseProtocol,
    LDDeviceToIdpAdministrativeResponseProtocol:LDDeviceToIdpAdministrativeResponseProtocol,
    LDDeviceToClusterMessageRequestProtocol:LDDeviceToClusterMessageRequestProtocol,
    LDDeviceToClusterInboxRequestProtocol:LDDeviceToClusterInboxRequestProtocol,
    LDClusterOrDeviceToClusterBlobRequestProtocol:LDClusterOrDeviceToClusterBlobRequestProtocol,
    LDDeviceToClusterContactRequestProtocol:LDDeviceToClusterContactRequestProtocol,
    LDDeviceToClusterProfileRequestProtocol:LDDeviceToClusterProfileRequestProtocol,
    LDDeviceToClusterAddressBookRequestProtocol:LDDeviceToClusterAddressBookRequestProtocol,
    LDDeviceToClusterOmletItemStoreRequestProtocol:LDDeviceToClusterOmletItemStoreRequestProtocol,
    LDDeviceToClusterDeviceRequestProtocol:LDDeviceToClusterDeviceRequestProtocol,
    LDDeviceToClusterCloudSyncRequestProtocol:LDDeviceToClusterCloudSyncRequestProtocol,
    LDDeviceToClusterGameChallengeRequestProtocol:LDDeviceToClusterGameChallengeRequestProtocol,
    LDDeviceToClusterSubscriptionRequestProtocol:LDDeviceToClusterSubscriptionRequestProtocol,
    LDDeviceToClusterHighScoreRequestProtocol:LDDeviceToClusterHighScoreRequestProtocol,
    LDDeviceToClusterNearbyItemRequestProtocol:LDDeviceToClusterNearbyItemRequestProtocol,
    LDDeviceToClusterMiscellaneousRequestProtocol:LDDeviceToClusterMiscellaneousRequestProtocol,
    LDDeviceToClusterDirectMessagingRequestProtocol:LDDeviceToClusterDirectMessagingRequestProtocol,
    LDDeviceToClusterMessageResponseProtocol:LDDeviceToClusterMessageResponseProtocol,
    LDDeviceToClusterInboxResponseProtocol:LDDeviceToClusterInboxResponseProtocol,
    LDClusterOrDeviceToClusterBlobResponseProtocol:LDClusterOrDeviceToClusterBlobResponseProtocol,
    LDDeviceToClusterContactResponseProtocol:LDDeviceToClusterContactResponseProtocol,
    LDDeviceToClusterProfileResponseProtocol:LDDeviceToClusterProfileResponseProtocol,
    LDDeviceToClusterAddressBookResponseProtocol:LDDeviceToClusterAddressBookResponseProtocol,
    LDDeviceToClusterOmletItemStoreResponseProtocol:LDDeviceToClusterOmletItemStoreResponseProtocol,
    LDDeviceToClusterDeviceResponseProtocol:LDDeviceToClusterDeviceResponseProtocol,
    LDDeviceToClusterCloudSyncResponseProtocol:LDDeviceToClusterCloudSyncResponseProtocol,
    LDClusterOrDeviceToClusterGameChallengeResponseProtocol:LDClusterOrDeviceToClusterGameChallengeResponseProtocol,
    LDDeviceToClusterSubscriptionResponseProtocol:LDDeviceToClusterSubscriptionResponseProtocol,
    LDDeviceToClusterHighScoreResponseProtocol:LDDeviceToClusterHighScoreResponseProtocol,
    LDDeviceToClusterNearbyItemResponseProtocol:LDDeviceToClusterNearbyItemResponseProtocol,
    LDDeviceToClusterMiscellaneousResponseProtocol:LDDeviceToClusterMiscellaneousResponseProtocol,
    LDDeviceToClusterDirectMessagingResponseProtocol:LDDeviceToClusterDirectMessagingResponseProtocol,
    LDURI:LDURI,
    LDContactProfile:LDContactProfile,
    LDRegisterWithTokenRequest:LDRegisterWithTokenRequest,
    LDConfirmTokenRequest:LDConfirmTokenRequest,
    LDRegisterWithOAuthRequest:LDRegisterWithOAuthRequest,
    LDGetLinkedIdentitiesRequest:LDGetLinkedIdentitiesRequest,
    LDCheckIdentityLinkedRequest:LDCheckIdentityLinkedRequest,
    LDUnlinkIdentityRequest:LDUnlinkIdentityRequest,
    LDLinkOmletIdentityRequest:LDLinkOmletIdentityRequest,
    LDGetAppSigninLinkRequest:LDGetAppSigninLinkRequest,
    LDConfirmAuthCodeRequest:LDConfirmAuthCodeRequest,
    LDDeviceRegistrationStateChangedPush:LDDeviceRegistrationStateChangedPush,
    LDUnblockIdentityRequest:LDUnblockIdentityRequest,
    LDGetEmailLoginLinkRequest:LDGetEmailLoginLinkRequest,
    LDGetAccountDetailsByAccountRequest:LDGetAccountDetailsByAccountRequest,
    LDGetAccountDetailsByIdentityRequest:LDGetAccountDetailsByIdentityRequest,
    LDGetIdentityRecordsRequest:LDGetIdentityRecordsRequest,
    LDListFlaggedUsersRequest:LDListFlaggedUsersRequest,
    LDChangeUserNameRequest:LDChangeUserNameRequest,
    LDChangeUserProfilePictureRequest:LDChangeUserProfilePictureRequest,
    LDDisableUserGameChallengeRequest:LDDisableUserGameChallengeRequest,
    LDLogUserOutRequest:LDLogUserOutRequest,
    LDAccountDetailsResponse:LDAccountDetailsResponse,
    LDGetLinkedIdentitiesResponse:LDGetLinkedIdentitiesResponse,
    LDGetIdentityRecordsResponse:LDGetIdentityRecordsResponse,
    LDListFlaggedUsersResponse:LDListFlaggedUsersResponse,
    LDCreateFeedRequest:LDCreateFeedRequest,
    LDGetMessagesSinceRequest:LDGetMessagesSinceRequest,
    LDGetMessagesBeforeRequest:LDGetMessagesBeforeRequest,
    LDGetMessagesByTypeRequest:LDGetMessagesByTypeRequest,
    LDGetMessageByIdRequest:LDGetMessageByIdRequest,
    LDAddMessageRequest:LDAddMessageRequest,
    LDUpdateMessageRequest:LDUpdateMessageRequest,
    LDOverwriteMessageRequest:LDOverwriteMessageRequest,
    LDDeleteMessageRequest:LDDeleteMessageRequest,
    LDSubscribeFeedRequest:LDSubscribeFeedRequest,
    LDUnsubscribeFeedRequest:LDUnsubscribeFeedRequest,
    LDSubscribeFeedRealtimeRequest:LDSubscribeFeedRealtimeRequest,
    LDUnsubscribeFeedRealtimeRequest:LDUnsubscribeFeedRealtimeRequest,
    LDAddMemberRequest:LDAddMemberRequest,
    LDRemoveMemberRequest:LDRemoveMemberRequest,
    LDSetFeedNameRequest:LDSetFeedNameRequest,
    LDSetFeedThumbnailRequest:LDSetFeedThumbnailRequest,
    LDSendRealtimeRequest:LDSendRealtimeRequest,
    LDAddPendingInvitationRequest:LDAddPendingInvitationRequest,
    LDRemovePendingInvitationRequest:LDRemovePendingInvitationRequest,
    LDGetJoinFeedLinkRequest:LDGetJoinFeedLinkRequest,
    LDJoinFeedRequest:LDJoinFeedRequest,
    LDJoinBroadcastRequest:LDJoinBroadcastRequest,
    LDSetDefaultAccessRequest:LDSetDefaultAccessRequest,
    LDGetPublicFeedDetailsRequest:LDGetPublicFeedDetailsRequest,
    LDApplyDocumentTransformRequest:LDApplyDocumentTransformRequest,
    LDMessageDeliveryPush:LDMessageDeliveryPush,
    LDRealtimeMessageDeliveryPush:LDRealtimeMessageDeliveryPush,
    LDMessageTerminatedPush:LDMessageTerminatedPush,
    LDGetFeedStateRequest:LDGetFeedStateRequest,
    LDSetFeedAcceptanceRequest:LDSetFeedAcceptanceRequest,
    LDGetDirtyFeedsRequest:LDGetDirtyFeedsRequest,
    LDSubscribeForAccountInboxRequest:LDSubscribeForAccountInboxRequest,
    LDUnsubscribeForAccountInboxRequest:LDUnsubscribeForAccountInboxRequest,
    LDRegisterPushNotificationKeyRequest:LDRegisterPushNotificationKeyRequest,
    LDInboxDeliveryMessagePush:LDInboxDeliveryMessagePush,
    LDInboxDeliveryTerminatedPush:LDInboxDeliveryTerminatedPush,
    LDSetAppleBadgeCountRequest:LDSetAppleBadgeCountRequest,
    LDGetUploadTicketRequest:LDGetUploadTicketRequest,
    LDVerifyUploadCompletedRequest:LDVerifyUploadCompletedRequest,
    LDGetDownloadTicketRequest:LDGetDownloadTicketRequest,
    LDVerifyExistsAndPermanenceRequest:LDVerifyExistsAndPermanenceRequest,
    LDOverwriteContactRequest:LDOverwriteContactRequest,
    LDRemoveContactRequest:LDRemoveContactRequest,
    LDBlockContactRequest:LDBlockContactRequest,
    LDUnblockContactRequest:LDUnblockContactRequest,
    LDGetProfileDetailsRequest:LDGetProfileDetailsRequest,
    LDSetProfileNameRequest:LDSetProfileNameRequest,
    LDSetProfilePictureRequest:LDSetProfilePictureRequest,
    LDGetOmletContactProfileRequest:LDGetOmletContactProfileRequest,
    LDAddItemsToProfileRequest:LDAddItemsToProfileRequest,
    LDRemoveItemsFromProfileRequest:LDRemoveItemsFromProfileRequest,
    LDAddFeaturesToProfileRequest:LDAddFeaturesToProfileRequest,
    LDRemoveFeaturesFromProfileRequest:LDRemoveFeaturesFromProfileRequest,
    LDGetProfilePublicStateRequest:LDGetProfilePublicStateRequest,
    LDGetContactProfileAndPublicStateRequest:LDGetContactProfileAndPublicStateRequest,
    LDUploadAddressBookEntriesRequest:LDUploadAddressBookEntriesRequest,
    LDGetContactProfileRequest:LDGetContactProfileRequest,
    LDGetAddMeLinkRequest:LDGetAddMeLinkRequest,
    LDMutualAddContactByTokenRequest:LDMutualAddContactByTokenRequest,
    LDCreateItemInfoRequest:LDCreateItemInfoRequest,
    LDUserUpdateItemInfoRequest:LDUserUpdateItemInfoRequest,
    LDSystemUpdateItemInfoRequest:LDSystemUpdateItemInfoRequest,
    LDGetItemInfoRequest:LDGetItemInfoRequest,
    LDReviewItemRequest:LDReviewItemRequest,
    LDPublishItemRequest:LDPublishItemRequest,
    LDUnpublishItemRequest:LDUnpublishItemRequest,
    LDDeleteItemRequest:LDDeleteItemRequest,
    LDListItemsForAccountRequest:LDListItemsForAccountRequest,
    LDListAllItemsRequest:LDListAllItemsRequest,
    LDListPublishedItemsRequest:LDListPublishedItemsRequest,
    LDGenerateGrantForItemRequest:LDGenerateGrantForItemRequest,
    LDGetItemUsingGrantRequest:LDGetItemUsingGrantRequest,
    LDDoesItemHaveGrantRequest:LDDoesItemHaveGrantRequest,
    LDDeleteGrantForItemRequest:LDDeleteGrantForItemRequest,
    LDGenerateApiKeyRequest:LDGenerateApiKeyRequest,
    LDDeactivateApiKeyRequest:LDDeactivateApiKeyRequest,
    LDListApiKeysRequest:LDListApiKeysRequest,
    LDDeleteDeviceRequest:LDDeleteDeviceRequest,
    LDAddDeviceRequest:LDAddDeviceRequest,
    LDSetDingTimeoutRequest:LDSetDingTimeoutRequest,
    LDGetCloudConfigRequest:LDGetCloudConfigRequest,
    LDSetCloudConfigRequest:LDSetCloudConfigRequest,
    LDRefreshCloudConfigRequest:LDRefreshCloudConfigRequest,
    LDDisconnectCloudSyncRequest:LDDisconnectCloudSyncRequest,
    LDOptInForGamingRequest:LDOptInForGamingRequest,
    LDFindGamersRequest:LDFindGamersRequest,
    LDUpdateChallengeLocationRequest:LDUpdateChallengeLocationRequest,
    LDGameChallengeCompleteRequest:LDGameChallengeCompleteRequest,
    LDGameChallengeRequest:LDGameChallengeRequest,
    LDCheckAccountOptedInRequest:LDCheckAccountOptedInRequest,
    LDCreateSubscriptionRequest:LDCreateSubscriptionRequest,
    LDGetHighScoreRequest:LDGetHighScoreRequest,
    LDReportScoreRequest:LDReportScoreRequest,
    LDGetTopScoresRequest:LDGetTopScoresRequest,
    LDBroadcastItemRequest:LDBroadcastItemRequest,
    LDUnbroadcastItemRequest:LDUnbroadcastItemRequest,
    LDSubscribeForNearbyItemsRequest:LDSubscribeForNearbyItemsRequest,
    LDUnsubscribeForNearbyItemsRequest:LDUnsubscribeForNearbyItemsRequest,
    LDFetchNearbyItemsRequest:LDFetchNearbyItemsRequest,
    LDItemBroadcastStateChangedPush:LDItemBroadcastStateChangedPush,
    LDSubscriptionTerminatedPush:LDSubscriptionTerminatedPush,
    LDUrlToStoryRequest:LDUrlToStoryRequest,
    LDImageSearchRequest:LDImageSearchRequest,
    LDFailureReportRequest:LDFailureReportRequest,
    LDFlagUserRequest:LDFlagUserRequest,
    LDCreatePlaygroundRequest:LDCreatePlaygroundRequest,
    LDGetDirectFeedRequest:LDGetDirectFeedRequest,
    LDSendDirectMessageRequest:LDSendDirectMessageRequest,
    LDSetSmsParticipationRequest:LDSetSmsParticipationRequest,
    LDGetMessageResponse:LDGetMessageResponse,
    LDGetMessagesResponse:LDGetMessagesResponse,
    LDGetMessagesWithContinuationResponse:LDGetMessagesWithContinuationResponse,
    LDGetJoinFeedLinkResponse:LDGetJoinFeedLinkResponse,
    LDGetPublicFeedDetailsResponse:LDGetPublicFeedDetailsResponse,
    LDDirtyFeedsResponse:LDDirtyFeedsResponse,
    LDFeedStateResponse:LDFeedStateResponse,
    LDGetUploadTicketResponse:LDGetUploadTicketResponse,
    LDGetDownloadTicketResponse:LDGetDownloadTicketResponse,
    LDGetContactDetailsResponse:LDGetContactDetailsResponse,
    LDGetProfileDetailsResponse:LDGetProfileDetailsResponse,
    LDGetOmletContactProfileResponse:LDGetOmletContactProfileResponse,
    LDGetProfilePublicStateResponse:LDGetProfilePublicStateResponse,
    LDGetContactProfileAndPublicStateResponse:LDGetContactProfileAndPublicStateResponse,
    LDGetContactProfileResponse:LDGetContactProfileResponse,
    LDGetItemInfoResponse:LDGetItemInfoResponse,
    LDListItemsResponse:LDListItemsResponse,
    LDGenerateGrantForItemResponse:LDGenerateGrantForItemResponse,
    LDGenerateApiKeyResponse:LDGenerateApiKeyResponse,
    LDListApiKeysResponse:LDListApiKeysResponse,
    LDGetCloudConfigResponse:LDGetCloudConfigResponse,
    LDFindGamersResponse:LDFindGamersResponse,
    LDCreateSubscriptionResponse:LDCreateSubscriptionResponse,
    LDScoreResponse:LDScoreResponse,
    LDScoresResponse:LDScoresResponse,
    LDBroadcastItemResponse:LDBroadcastItemResponse,
    LDFetchNearbyItemsResponse:LDFetchNearbyItemsResponse,
    LDUrlToStoryResponse:LDUrlToStoryResponse,
    LDImageSearchResponse:LDImageSearchResponse,
    LDCreatePlaygroundResponse:LDCreatePlaygroundResponse,
    LDGetDirectFeedResponse:LDGetDirectFeedResponse,
    LDSendDirectMessageResponse:LDSendDirectMessageResponse,
    LDIdentity:LDIdentity,
    LDAccountDetails:LDAccountDetails,
    LDString:LDString,
    LDFlaggedDetails:LDFlaggedDetails,
    LDFeed:LDFeed,
    LDTypedId:LDTypedId,
    LDIdentityHash:LDIdentityHash,
    LDMessage:LDMessage,
    LDRealtimeMessage:LDRealtimeMessage,
    LDPushKey:LDPushKey,
    LDBlobMetadata:LDBlobMetadata,
    LDBlobUploadTicket:LDBlobUploadTicket,
    LDContactDetails:LDContactDetails,
    LDItemId:LDItemId,
    LDPurchaseData:LDPurchaseData,
    LDEnum:LDEnum,
    LDFeature:LDFeature,
    LDItemInfoUserMutableContainer:LDItemInfoUserMutableContainer,
    LDItemInfoSystemMutableContainer:LDItemInfoSystemMutableContainer,
    LDCloudConfig:LDCloudConfig,
    LDGameChallengeId:LDGameChallengeId,
    LDNearbyItemContainer:LDNearbyItemContainer,
    LDJoinFeedLink:LDJoinFeedLink,
    LDDirtyFeed:LDDirtyFeed,
    LDBlobDownloadTicket:LDBlobDownloadTicket,
    LDProfileDetails:LDProfileDetails,
    LDProfilePublicState:LDProfilePublicState,
    LDItemInfoContainer:LDItemInfoContainer,
    LDItemInfoListingContainer:LDItemInfoListingContainer,
    LDApiKey:LDApiKey,
    LDScoreBoardEntry:LDScoreBoardEntry,
    LDImageSearchResult:LDImageSearchResult,
    LDFlaggedRecord:LDFlaggedRecord,
    LDReceiptContainer:LDReceiptContainer,
    LDBillingInfoContainer:LDBillingInfoContainer,
    LDItemInfoUserMutable:LDItemInfoUserMutable,
    LDAppInfoUserMutable:LDAppInfoUserMutable,
    LDStickerPackInfoUserMutable:LDStickerPackInfoUserMutable,
    LDItemInfoSystemMutable:LDItemInfoSystemMutable,
    LDAppInfoSystemMutable:LDAppInfoSystemMutable,
    LDStickerPackInfoSystemMutable:LDStickerPackInfoSystemMutable,
    LDNearbyItemFeedMetadata:LDNearbyItemFeedMetadata,
    LDProfileIdentitySetting:LDProfileIdentitySetting,
    LDItemInfo:LDItemInfo,
    LDAppInfo:LDAppInfo,
    LDStickerPackInfo:LDStickerPackInfo,
    LDAppInfoListingWrapper:LDAppInfoListingWrapper,
    LDStickerPackInfoListingWrapper:LDStickerPackInfoListingWrapper,
    LDMockReceipt:LDMockReceipt,
    LDMockBillingInfo:LDMockBillingInfo,
    LDAppScreenshot:LDAppScreenshot,
    LDAppStore:LDAppStore,
    LDSticker:LDSticker,
    LDPrice:LDPrice,
    LDItemInfoImmutableContainer:LDItemInfoImmutableContainer,
    LDItemInfoImmutable:LDItemInfoImmutable,
    LDAppInfoImmutable:LDAppInfoImmutable,
    LDStickerPackInfoImmutable:LDStickerPackInfoImmutable,
    LDApiCode:LDApiCode,
    LDAcceptanceState:LDAcceptanceState,
    LDStoreItemType:LDStoreItemType,
    LDLocationType:LDLocationType,
    LDTaggedItemType:LDTaggedItemType,
    LDIdentityType:LDIdentityType,
    LDPushType:LDPushType,
    LDProvider:LDProvider,
    LDPublishedState:LDPublishedState
};
Object.freeze(module.exports);

}).call(this,require("buffer").Buffer)
},{"buffer":26}],23:[function(require,module,exports){

},{}],24:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":196}],25:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"dup":23}],26:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
    return fromTypedArray(that, object)
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = String(string)

  if (string.length === 0) return 0

  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      return string.length
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return string.length * 2
    case 'hex':
      return string.length >>> 1
    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(string).length
    case 'base64':
      return base64ToBytes(string).length
    default:
      return string.length
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function toString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  var i = 0

  for (; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (leadSurrogate) {
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        } else {
          // valid surrogate pair
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      } else {
        // no lead yet

        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":27,"ieee754":28,"is-array":29}],27:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],28:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],29:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],30:[function(require,module,exports){
'use strict';

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')

exports.createHash = exports.Hash = require('create-hash')

exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes;
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-aes');
[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key];
})

var dh = require('diffie-hellman');
[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key];
})

var sign = require('browserify-sign');
[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key];
})

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt');

[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key];
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
  }
})

},{"browserify-aes":34,"browserify-sign":50,"browserify-sign/algos":49,"create-ecdh":96,"create-hash":119,"create-hmac":131,"diffie-hellman":132,"pbkdf2":139,"public-encrypt":140,"randombytes":166}],31:[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":26,"create-hash/md5":121}],32:[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
},{"buffer":26}],33:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('./xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"./aes":32,"./cipherBase":35,"./ghash":38,"./xor":48,"buffer":26,"inherits":173}],34:[function(require,module,exports){
var ciphers = require('./encrypter')
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = require('./decrypter')
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = require('./modes')
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":36,"./encrypter":37,"./modes":39}],35:[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')

module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase () {
  Transform.call(this)
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (outputEnc) {
    outData = outData.toString(outputEnc)
  }
  return outData
}
CipherBase.prototype._transform = function (data, _, next) {
  this.push(this._update(data))
  next()
}
CipherBase.prototype._flush = function (next) {
  try {
    this.push(this._final())
  } catch(e) {
    return next(e)
  }
  next()
}
CipherBase.prototype.final = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = outData.toString(outputEnc)
  }
  return outData
}

}).call(this,require("buffer").Buffer)
},{"buffer":26,"inherits":173,"stream":192}],36:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('./EVP_BytesToKey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":31,"./aes":32,"./authCipher":33,"./cipherBase":35,"./modes":39,"./modes/cbc":40,"./modes/cfb":41,"./modes/cfb1":42,"./modes/cfb8":43,"./modes/ctr":44,"./modes/ecb":45,"./modes/ofb":46,"./streamCipher":47,"buffer":26,"inherits":173}],37:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('./EVP_BytesToKey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":31,"./aes":32,"./authCipher":33,"./cipherBase":35,"./modes":39,"./modes/cbc":40,"./modes/cfb":41,"./modes/cfb1":42,"./modes/cfb8":43,"./modes/ctr":44,"./modes/ecb":45,"./modes/ofb":46,"./streamCipher":47,"buffer":26,"inherits":173}],38:[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
},{"buffer":26}],39:[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}

},{}],40:[function(require,module,exports){
var xor = require('../xor')
exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)
  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}
exports.decrypt = function (self, block) {
  var pad = self._prev
  self._prev = block
  var out = self._cipher.decryptBlock(block)
  return xor(out, pad)
}

},{"../xor":48}],41:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len
  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }
    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }
  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
},{"../xor":48,"buffer":26}],42:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":26}],43:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":26}],44:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}
exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

}).call(this,require("buffer").Buffer)
},{"../xor":48,"buffer":26}],45:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],46:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}
exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"../xor":48,"buffer":26}],47:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
},{"./aes":32,"./cipherBase":35,"buffer":26,"inherits":173}],48:[function(require,module,exports){
(function (Buffer){
module.exports = xor
function xor (a, b) {
  var len = Math.min(a.length, b.length)
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out.writeUInt8(a[i] ^ b[i], i)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":26}],49:[function(require,module,exports){
(function (Buffer){
'use strict'
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
	sign: 'rsa',
	hash: 'sha1',
	id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
	sign: 'ecdsa',
	hash: 'sha1',
	id: new Buffer('', 'hex')
}
exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

}).call(this,require("buffer").Buffer)
},{"buffer":26}],50:[function(require,module,exports){
(function (Buffer){
'use strict'
var sign = require('./sign')
var verify = require('./verify')
var stream = require('stream')
var inherits = require('inherits')
var _algos = require('./algos')
var createHash = require('create-hash')
var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

exports.createSign = exports.Sign = createSign

function createSign (algorithm) {
  return new Sign(algorithm)
}

exports.createVerify = exports.Verify = createVerify

function createVerify (algorithm) {
  return new Verify(algorithm)
}

inherits(Sign, stream.Writable)

function Sign (algorithm) {
  stream.Writable.call(this)
  var data = algos[algorithm]
  if (!data)
    throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string')
    data = new Buffer(data, enc)
  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)
  if (enc) {
    sig = sig.toString(enc)
  }
  return sig
}

inherits(Verify, stream.Writable)
function Verify (algorithm) {
  stream.Writable.call(this)
  var data = algos[algorithm]
  if (!data)
    throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string')
    data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  this.end()
  var hash = this._hash.digest()
  if (typeof sig === 'string')
    sig = new Buffer(sig, enc)

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

}).call(this,require("buffer").Buffer)
},{"./algos":49,"./sign":93,"./verify":94,"buffer":26,"create-hash":119,"inherits":173,"stream":192}],51:[function(require,module,exports){
'use strict'
exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

},{}],52:[function(require,module,exports){
(function (module, exports) {

'use strict';

// Utils

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor;
  var TempCtor = function () {};
  TempCtor.prototype = superCtor.prototype;
  ctor.prototype = new TempCtor();
  ctor.prototype.constructor = ctor;
}

// BN

function BN(number, base, endian) {
  // May be `new BN(bn)` ?
  if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
    return number;
  }

  this.sign = false;
  this.words = null;
  this.length = 0;

  // Reduction context
  this.red = null;

  if (base === 'le' || base === 'be') {
    endian = base;
    base = 10;
  }

  if (number !== null)
    this._init(number || 0, base || 10, endian || 'be');
}
if (typeof module === 'object')
  module.exports = BN;
else
  exports.BN = BN;

BN.BN = BN;
BN.wordSize = 26;

BN.prototype._init = function init(number, base, endian) {
  if (typeof number === 'number') {
    if (number < 0) {
      this.sign = true;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }
    return;
  } else if (typeof number === 'object') {
    return this._initArray(number, base, endian);
  }
  if (base === 'hex')
    base = 16;
  assert(base === (base | 0) && base >= 2 && base <= 36);

  number = number.toString().replace(/\s+/g, '');
  var start = 0;
  if (number[0] === '-')
    start++;

  if (base === 16)
    this._parseHex(number, start);
  else
    this._parseBase(number, base, start);

  if (number[0] === '-')
    this.sign = true;

  this.strip();
};

BN.prototype._initArray = function _initArray(number, base, endian) {
  // Perhaps a Uint8Array
  assert(typeof number.length === 'number');
  if (number.length <= 0) {
    this.words = [ 0 ];
    this.length = 1;
    return this;
  }

  this.length = Math.ceil(number.length / 3);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  var off = 0;
  if (endian === 'be') {
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  } else if (endian === 'le') {
    for (var i = 0, j = 0; i < number.length; i += 3) {
      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  }
  return this.strip();
};

function parseHex(str, start, end) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r <<= 4;

    // 'a' - 'f'
    if (c >= 49 && c <= 54)
      r |= c - 49 + 0xa;

    // 'A' - 'F'
    else if (c >= 17 && c <= 22)
      r |= c - 17 + 0xa;

    // '0' - '9'
    else
      r |= c & 0xf;
  }
  return r;
}

BN.prototype._parseHex = function _parseHex(number, start) {
  // Create possibly bigger array to ensure that it fits the number
  this.length = Math.ceil((number.length - start) / 6);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  // Scan 24-bit chunks and add them to the number
  var off = 0;
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
    var w = parseHex(number, i, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    off += 24;
    if (off >= 26) {
      off -= 26;
      j++;
    }
  }
  if (i + 6 !== start) {
    var w = parseHex(number, start, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
  }
  this.strip();
};

function parseBase(str, start, end, mul) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r *= mul;

    // 'a'
    if (c >= 49)
      r += c - 49 + 0xa;

    // 'A'
    else if (c >= 17)
      r += c - 17 + 0xa;

    // '0' - '9'
    else
      r += c;
  }
  return r;
}

BN.prototype._parseBase = function _parseBase(number, base, start) {
  // Initialize as zero
  this.words = [ 0 ];
  this.length = 1;

  // Find length of limb in base
  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
    limbLen++;
  limbLen--;
  limbPow = (limbPow / base) | 0;

  var total = number.length - start;
  var mod = total % limbLen;
  var end = Math.min(total, total - mod) + start;

  var word = 0;
  for (var i = start; i < end; i += limbLen) {
    word = parseBase(number, i, i + limbLen, base);

    this.imuln(limbPow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }

  if (mod !== 0) {
    var pow = 1;
    var word = parseBase(number, i, number.length, base);

    for (var i = 0; i < mod; i++)
      pow *= base;
    this.imuln(pow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }
};

BN.prototype.copy = function copy(dest) {
  dest.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    dest.words[i] = this.words[i];
  dest.length = this.length;
  dest.sign = this.sign;
  dest.red = this.red;
};

BN.prototype.clone = function clone() {
  var r = new BN(null);
  this.copy(r);
  return r;
};

// Remove leading `0` from `this`
BN.prototype.strip = function strip() {
  while (this.length > 1 && this.words[this.length - 1] === 0)
    this.length--;
  return this._normSign();
};

BN.prototype._normSign = function _normSign() {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0)
    this.sign = false;
  return this;
};

BN.prototype.inspect = function inspect() {
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
};

/*

var zeros = [];
var groupSizes = [];
var groupBases = [];

var s = '';
var i = -1;
while (++i < BN.wordSize) {
  zeros[i] = s;
  s += '0';
}
groupSizes[0] = 0;
groupSizes[1] = 0;
groupBases[0] = 0;
groupBases[1] = 0;
var base = 2 - 1;
while (++base < 36 + 1) {
  var groupSize = 0;
  var groupBase = 1;
  while (groupBase < (1 << BN.wordSize) / base) {
    groupBase *= base;
    groupSize += 1;
  }
  groupSizes[base] = groupSize;
  groupBases[base] = groupBase;
}

*/

var zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

var groupSizes = [
  0, 0,
  25, 16, 12, 11, 10, 9, 8,
  8, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 5, 5,
  5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5
];

var groupBases = [
  0, 0,
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
];

BN.prototype.toString = function toString(base, padding) {
  base = base || 10;
  if (base === 16 || base === 'hex') {
    var out = '';
    var off = 0;
    var padding = padding | 0 || 1;
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i];
      var word = (((w << off) | carry) & 0xffffff).toString(16);
      carry = (w >>> (24 - off)) & 0xffffff;
      if (carry !== 0 || i !== this.length - 1)
        out = zeros[6 - word.length] + word + out;
      else
        out = word + out;
      off += 2;
      if (off >= 26) {
        off -= 26;
        i--;
      }
    }
    if (carry !== 0)
      out = carry.toString(16) + out;
    while (out.length % padding !== 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else if (base === (base | 0) && base >= 2 && base <= 36) {
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    var groupSize = groupSizes[base];
    // var groupBase = Math.pow(base, groupSize);
    var groupBase = groupBases[base];
    var out = '';
    var c = this.clone();
    c.sign = false;
    while (c.cmpn(0) !== 0) {
      var r = c.modn(groupBase).toString(base);
      c = c.idivn(groupBase);

      if (c.cmpn(0) !== 0)
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }
    if (this.cmpn(0) === 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else {
    assert(false, 'Base should be between 2 and 36');
  }
};

BN.prototype.toJSON = function toJSON() {
  return this.toString(16);
};

BN.prototype.toArray = function toArray() {
  this.strip();
  var res = new Array(this.byteLength());
  res[0] = 0;

  var q = this.clone();
  for (var i = 0; q.cmpn(0) !== 0; i++) {
    var b = q.andln(0xff);
    q.ishrn(8);

    // Assume big-endian
    res[res.length - i - 1] = b;
  }

  return res;
};

if (Math.clz32) {
  BN.prototype._countBits = function _countBits(w) {
    return 32 - Math.clz32(w);
  };
} else {
  BN.prototype._countBits = function _countBits(w) {
    var t = w;
    var r = 0;
    if (t >= 0x1000) {
      r += 13;
      t >>>= 13;
    }
    if (t >= 0x40) {
      r += 7;
      t >>>= 7;
    }
    if (t >= 0x8) {
      r += 4;
      t >>>= 4;
    }
    if (t >= 0x02) {
      r += 2;
      t >>>= 2;
    }
    return r + t;
  };
}

BN.prototype._zeroBits = function _zeroBits(w) {
  // Short-cut
  if (w === 0)
    return 26;

  var t = w;
  var r = 0;
  if ((t & 0x1fff) === 0) {
    r += 13;
    t >>>= 13;
  }
  if ((t & 0x7f) === 0) {
    r += 7;
    t >>>= 7;
  }
  if ((t & 0xf) === 0) {
    r += 4;
    t >>>= 4;
  }
  if ((t & 0x3) === 0) {
    r += 2;
    t >>>= 2;
  }
  if ((t & 0x1) === 0)
    r++;
  return r;
};

// Return number of used bits in a BN
BN.prototype.bitLength = function bitLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  var hi = this._countBits(w);
  return (this.length - 1) * 26 + hi;
};

// Number of trailing zero bits
BN.prototype.zeroBits = function zeroBits() {
  if (this.cmpn(0) === 0)
    return 0;

  var r = 0;
  for (var i = 0; i < this.length; i++) {
    var b = this._zeroBits(this.words[i]);
    r += b;
    if (b !== 26)
      break;
  }
  return r;
};

BN.prototype.byteLength = function byteLength() {
  return Math.ceil(this.bitLength() / 8);
};

// Return negative clone of `this`
BN.prototype.neg = function neg() {
  if (this.cmpn(0) === 0)
    return this.clone();

  var r = this.clone();
  r.sign = !this.sign;
  return r;
};


// Or `num` with `this` in-place
BN.prototype.ior = function ior(num) {
  this.sign = this.sign || num.sign;

  while (this.length < num.length)
    this.words[this.length++] = 0;

  for (var i = 0; i < num.length; i++)
    this.words[i] = this.words[i] | num.words[i];

  return this.strip();
};


// Or `num` with `this`
BN.prototype.or = function or(num) {
  if (this.length > num.length)
    return this.clone().ior(num);
  else
    return num.clone().ior(this);
};


// And `num` with `this` in-place
BN.prototype.iand = function iand(num) {
  this.sign = this.sign && num.sign;

  // b = min-length(num, this)
  var b;
  if (this.length > num.length)
    b = num;
  else
    b = this;

  for (var i = 0; i < b.length; i++)
    this.words[i] = this.words[i] & num.words[i];

  this.length = b.length;

  return this.strip();
};


// And `num` with `this`
BN.prototype.and = function and(num) {
  if (this.length > num.length)
    return this.clone().iand(num);
  else
    return num.clone().iand(this);
};


// Xor `num` with `this` in-place
BN.prototype.ixor = function ixor(num) {
  this.sign = this.sign || num.sign;

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  for (var i = 0; i < b.length; i++)
    this.words[i] = a.words[i] ^ b.words[i];

  if (this !== a)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];

  this.length = a.length;

  return this.strip();
};


// Xor `num` with `this`
BN.prototype.xor = function xor(num) {
  if (this.length > num.length)
    return this.clone().ixor(num);
  else
    return num.clone().ixor(this);
};


// Set `bit` of `this`
BN.prototype.setn = function setn(bit, val) {
  assert(typeof bit === 'number' && bit >= 0);

  var off = (bit / 26) | 0;
  var wbit = bit % 26;

  while (this.length <= off)
    this.words[this.length++] = 0;

  if (val)
    this.words[off] = this.words[off] | (1 << wbit);
  else
    this.words[off] = this.words[off] & ~(1 << wbit);

  return this.strip();
};


// Add `num` to `this` in-place
BN.prototype.iadd = function iadd(num) {
  // negative + positive
  if (this.sign && !num.sign) {
    this.sign = false;
    var r = this.isub(num);
    this.sign = !this.sign;
    return this._normSign();

  // positive + negative
  } else if (!this.sign && num.sign) {
    num.sign = false;
    var r = this.isub(num);
    num.sign = true;
    return r._normSign();
  }

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] + b.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }

  this.length = a.length;
  if (carry !== 0) {
    this.words[this.length] = carry;
    this.length++;
  // Copy the rest of the words
  } else if (a !== this) {
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  }

  return this;
};

// Add `num` to `this`
BN.prototype.add = function add(num) {
  if (num.sign && !this.sign) {
    num.sign = false;
    var res = this.sub(num);
    num.sign = true;
    return res;
  } else if (!num.sign && this.sign) {
    this.sign = false;
    var res = num.sub(this);
    this.sign = true;
    return res;
  }

  if (this.length > num.length)
    return this.clone().iadd(num);
  else
    return num.clone().iadd(this);
};

// Subtract `num` from `this` in-place
BN.prototype.isub = function isub(num) {
  // this - (-num) = this + num
  if (num.sign) {
    num.sign = false;
    var r = this.iadd(num);
    num.sign = true;
    return r._normSign();

  // -this - num = -(this + num)
  } else if (this.sign) {
    this.sign = false;
    this.iadd(num);
    this.sign = true;
    return this._normSign();
  }

  // At this point both numbers are positive
  var cmp = this.cmp(num);

  // Optimization - zeroify
  if (cmp === 0) {
    this.sign = false;
    this.length = 1;
    this.words[0] = 0;
    return this;
  }

  // a > b
  var a;
  var b;
  if (cmp > 0) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] - b.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }

  // Copy rest of the words
  if (carry === 0 && i < a.length && a !== this)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  this.length = Math.max(this.length, i);

  if (a !== this)
    this.sign = true;

  return this.strip();
};

// Subtract `num` from `this`
BN.prototype.sub = function sub(num) {
  return this.clone().isub(num);
};

/*
// NOTE: This could be potentionally used to generate loop-less multiplications
function _genCombMulTo(alen, blen) {
  var len = alen + blen - 1;
  var src = [
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
        'mask = 0x3ffffff, shift = 0x4000000;',
    'out.length = ' + len + ';'
  ];
  for (var k = 0; k < len; k++) {
    var minJ = Math.max(0, k - alen + 1);
    var maxJ = Math.min(k, blen - 1);

    for (var j = minJ; j <= maxJ; j++) {
      var i = k - j;
      var mul = 'a[' + i + '] * b[' + j + ']';

      if (j === minJ) {
        src.push('w = ' + mul + ' + c;');
        src.push('c = (w / shift) | 0;');
      } else {
        src.push('w += ' + mul + ';');
        src.push('c += (w / shift) | 0;');
      }
      src.push('w &= mask;');
    }
    src.push('o[' + k + '] = w;');
  }
  src.push('if (c !== 0) {',
           '  o[' + k + '] = c;',
           '  out.length++;',
           '}',
           'return out;');

  return src.join('\n');
}
*/

BN.prototype._smallMulTo = function _smallMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;
    }
    out.words[k] = rword;
    carry = ncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype._bigMulTo = function _bigMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  var hncarry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }
    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype.mulTo = function mulTo(num, out) {
  var res;
  if (this.length + num.length < 63)
    res = this._smallMulTo(num, out);
  else
    res = this._bigMulTo(num, out);
  return res;
};

// Multiply `this` by `num`
BN.prototype.mul = function mul(num) {
  var out = new BN(null);
  out.words = new Array(this.length + num.length);
  return this.mulTo(num, out);
};

// In-place Multiplication
BN.prototype.imul = function imul(num) {
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  }

  var tlen = this.length;
  var nlen = num.length;

  this.sign = num.sign !== this.sign;
  this.length = this.length + num.length;
  this.words[this.length - 1] = 0;

  for (var k = this.length - 2; k >= 0; k--) {
    // Sum all words with the same `i + j = k` and accumulate `carry`,
    // note that carry could be >= 0x3ffffff
    var carry = 0;
    var rword = 0;
    var maxJ = Math.min(k, nlen - 1);
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i];
      var b = num.words[j];
      var r = a * b;

      var lo = r & 0x3ffffff;
      carry += (r / 0x4000000) | 0;
      lo += rword;
      rword = lo & 0x3ffffff;
      carry += lo >>> 26;
    }
    this.words[k] = rword;
    this.words[k + 1] += carry;
    carry = 0;
  }

  // Propagate overflows
  var carry = 0;
  for (var i = 1; i < this.length; i++) {
    var w = this.words[i] + carry;
    this.words[i] = w & 0x3ffffff;
    carry = w >>> 26;
  }

  return this.strip();
};

BN.prototype.imuln = function imuln(num) {
  assert(typeof num === 'number');

  // Carry
  var carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = this.words[i] * num;
    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    carry >>= 26;
    carry += (w / 0x4000000) | 0;
    // NOTE: lo is 27bit maximum
    carry += lo >>> 26;
    this.words[i] = lo & 0x3ffffff;
  }

  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }

  return this;
};

// `this` * `this`
BN.prototype.sqr = function sqr() {
  return this.mul(this);
};

// `this` * `this` in-place
BN.prototype.isqr = function isqr() {
  return this.mul(this);
};

// Shift-left in-place
BN.prototype.ishln = function ishln(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

  if (r !== 0) {
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var newCarry = this.words[i] & carryMask;
      var c = (this.words[i] - newCarry) << r;
      this.words[i] = c | carry;
      carry = newCarry >>> (26 - r);
    }
    if (carry) {
      this.words[i] = carry;
      this.length++;
    }
  }

  if (s !== 0) {
    for (var i = this.length - 1; i >= 0; i--)
      this.words[i + s] = this.words[i];
    for (var i = 0; i < s; i++)
      this.words[i] = 0;
    this.length += s;
  }

  return this.strip();
};

// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is present - it will be filled with destroyed bits
BN.prototype.ishrn = function ishrn(bits, hint, extended) {
  assert(typeof bits === 'number' && bits >= 0);
  var h;
  if (hint)
    h = (hint - (hint % 26)) / 26;
  else
    h = 0;

  var r = bits % 26;
  var s = Math.min((bits - r) / 26, this.length);
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  var maskedWords = extended;

  h -= s;
  h = Math.max(0, h);

  // Extended mode, copy masked part
  if (maskedWords) {
    for (var i = 0; i < s; i++)
      maskedWords.words[i] = this.words[i];
    maskedWords.length = s;
  }

  if (s === 0) {
    // No-op, we should not move anything at all
  } else if (this.length > s) {
    this.length -= s;
    for (var i = 0; i < this.length; i++)
      this.words[i] = this.words[i + s];
  } else {
    this.words[0] = 0;
    this.length = 1;
  }

  var carry = 0;
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
    var word = this.words[i];
    this.words[i] = (carry << (26 - r)) | (word >>> r);
    carry = word & mask;
  }

  // Push carried bits as a mask
  if (maskedWords && carry !== 0)
    maskedWords.words[maskedWords.length++] = carry;

  if (this.length === 0) {
    this.words[0] = 0;
    this.length = 1;
  }

  this.strip();

  return this;
};

// Shift-left
BN.prototype.shln = function shln(bits) {
  return this.clone().ishln(bits);
};

// Shift-right
BN.prototype.shrn = function shrn(bits) {
  return this.clone().ishrn(bits);
};

// Test if n bit is set
BN.prototype.testn = function testn(bit) {
  assert(typeof bit === 'number' && bit >= 0);
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    return false;
  }

  // Check bit and return
  var w = this.words[s];

  return !!(w & q);
};

// Return only lowers bits of number (in-place)
BN.prototype.imaskn = function imaskn(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;

  assert(!this.sign, 'imaskn works only with positive numbers');

  if (r !== 0)
    s++;
  this.length = Math.min(s, this.length);

  if (r !== 0) {
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    this.words[this.length - 1] &= mask;
  }

  return this.strip();
};

// Return only lowers bits of number
BN.prototype.maskn = function maskn(bits) {
  return this.clone().imaskn(bits);
};

// Add plain number `num` to `this`
BN.prototype.iaddn = function iaddn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.isubn(-num);

  // Possible sign change
  if (this.sign) {
    if (this.length === 1 && this.words[0] < num) {
      this.words[0] = num - this.words[0];
      this.sign = false;
      return this;
    }

    this.sign = false;
    this.isubn(num);
    this.sign = true;
    return this;
  }

  // Add without checks
  return this._iaddn(num);
};

BN.prototype._iaddn = function _iaddn(num) {
  this.words[0] += num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    this.words[i] -= 0x4000000;
    if (i === this.length - 1)
      this.words[i + 1] = 1;
    else
      this.words[i + 1]++;
  }
  this.length = Math.max(this.length, i + 1);

  return this;
};

// Subtract plain number `num` from `this`
BN.prototype.isubn = function isubn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.iaddn(-num);

  if (this.sign) {
    this.sign = false;
    this.iaddn(num);
    this.sign = true;
    return this;
  }

  this.words[0] -= num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    this.words[i] += 0x4000000;
    this.words[i + 1] -= 1;
  }

  return this.strip();
};

BN.prototype.addn = function addn(num) {
  return this.clone().iaddn(num);
};

BN.prototype.subn = function subn(num) {
  return this.clone().isubn(num);
};

BN.prototype.iabs = function iabs() {
  this.sign = false;

  return this;
};

BN.prototype.abs = function abs() {
  return this.clone().iabs();
};

BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
  // Bigger storage is needed
  var len = num.length + shift;
  var i;
  if (this.words.length < len) {
    var t = new Array(len);
    for (var i = 0; i < this.length; i++)
      t[i] = this.words[i];
    this.words = t;
  } else {
    i = this.length;
  }

  // Zeroify rest
  this.length = Math.max(this.length, len);
  for (; i < this.length; i++)
    this.words[i] = 0;

  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var w = this.words[i + shift] + carry;
    var right = num.words[i] * mul;
    w -= right & 0x3ffffff;
    carry = (w >> 26) - ((right / 0x4000000) | 0);
    this.words[i + shift] = w & 0x3ffffff;
  }
  for (; i < this.length - shift; i++) {
    var w = this.words[i + shift] + carry;
    carry = w >> 26;
    this.words[i + shift] = w & 0x3ffffff;
  }

  if (carry === 0)
    return this.strip();

  // Subtraction overflow
  assert(carry === -1);
  carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = -this.words[i] + carry;
    carry = w >> 26;
    this.words[i] = w & 0x3ffffff;
  }
  this.sign = true;

  return this.strip();
};

BN.prototype._wordDiv = function _wordDiv(num, mode) {
  var shift = this.length - num.length;

  var a = this.clone();
  var b = num;

  // Normalize
  var bhi = b.words[b.length - 1];
  var bhiBits = this._countBits(bhi);
  shift = 26 - bhiBits;
  if (shift !== 0) {
    b = b.shln(shift);
    a.ishln(shift);
    bhi = b.words[b.length - 1];
  }

  // Initialize quotient
  var m = a.length - b.length;
  var q;

  if (mode !== 'mod') {
    q = new BN(null);
    q.length = m + 1;
    q.words = new Array(q.length);
    for (var i = 0; i < q.length; i++)
      q.words[i] = 0;
  }

  var diff = a.clone()._ishlnsubmul(b, 1, m);
  if (!diff.sign) {
    a = diff;
    if (q)
      q.words[m] = 1;
  }

  for (var j = m - 1; j >= 0; j--) {
    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    // (0x7ffffff)
    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    a._ishlnsubmul(b, qj, j);
    while (a.sign) {
      qj--;
      a.sign = false;
      a._ishlnsubmul(b, 1, j);
      if (a.cmpn(0) !== 0)
        a.sign = !a.sign;
    }
    if (q)
      q.words[j] = qj;
  }
  if (q)
    q.strip();
  a.strip();

  // Denormalize
  if (mode !== 'div' && shift !== 0)
    a.ishrn(shift);
  return { div: q ? q : null, mod: a };
};

BN.prototype.divmod = function divmod(num, mode) {
  assert(num.cmpn(0) !== 0);

  if (this.sign && !num.sign) {
    var res = this.neg().divmod(num, mode);
    var div;
    var mod;
    if (mode !== 'mod')
      div = res.div.neg();
    if (mode !== 'div')
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
    return {
      div: div,
      mod: mod
    };
  } else if (!this.sign && num.sign) {
    var res = this.divmod(num.neg(), mode);
    var div;
    if (mode !== 'mod')
      div = res.div.neg();
    return { div: div, mod: res.mod };
  } else if (this.sign && num.sign) {
    return this.neg().divmod(num.neg(), mode);
  }

  // Both numbers are positive at this point

  // Strip both numbers to approximate shift value
  if (num.length > this.length || this.cmp(num) < 0)
    return { div: new BN(0), mod: this };

  // Very short reduction
  if (num.length === 1) {
    if (mode === 'div')
      return { div: this.divn(num.words[0]), mod: null };
    else if (mode === 'mod')
      return { div: null, mod: new BN(this.modn(num.words[0])) };
    return {
      div: this.divn(num.words[0]),
      mod: new BN(this.modn(num.words[0]))
    };
  }

  return this._wordDiv(num, mode);
};

// Find `this` / `num`
BN.prototype.div = function div(num) {
  return this.divmod(num, 'div').div;
};

// Find `this` % `num`
BN.prototype.mod = function mod(num) {
  return this.divmod(num, 'mod').mod;
};

// Find Round(`this` / `num`)
BN.prototype.divRound = function divRound(num) {
  var dm = this.divmod(num);

  // Fast case - exact division
  if (dm.mod.cmpn(0) === 0)
    return dm.div;

  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

  var half = num.shrn(1);
  var r2 = num.andln(1);
  var cmp = mod.cmp(half);

  // Round down
  if (cmp < 0 || r2 === 1 && cmp === 0)
    return dm.div;

  // Round up
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
};

BN.prototype.modn = function modn(num) {
  assert(num <= 0x3ffffff);
  var p = (1 << 26) % num;

  var acc = 0;
  for (var i = this.length - 1; i >= 0; i--)
    acc = (p * acc + this.words[i]) % num;

  return acc;
};

// In-place division by number
BN.prototype.idivn = function idivn(num) {
  assert(num <= 0x3ffffff);

  var carry = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var w = this.words[i] + carry * 0x4000000;
    this.words[i] = (w / num) | 0;
    carry = w % num;
  }

  return this.strip();
};

BN.prototype.divn = function divn(num) {
  return this.clone().idivn(num);
};

BN.prototype.egcd = function egcd(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var x = this;
  var y = p.clone();

  if (x.sign)
    x = x.mod(p);
  else
    x = x.clone();

  // A * x + B * y = x
  var A = new BN(1);
  var B = new BN(0);

  // C * x + D * y = y
  var C = new BN(0);
  var D = new BN(1);

  var g = 0;

  while (x.isEven() && y.isEven()) {
    x.ishrn(1);
    y.ishrn(1);
    ++g;
  }

  var yp = y.clone();
  var xp = x.clone();

  while (x.cmpn(0) !== 0) {
    while (x.isEven()) {
      x.ishrn(1);
      if (A.isEven() && B.isEven()) {
        A.ishrn(1);
        B.ishrn(1);
      } else {
        A.iadd(yp).ishrn(1);
        B.isub(xp).ishrn(1);
      }
    }

    while (y.isEven()) {
      y.ishrn(1);
      if (C.isEven() && D.isEven()) {
        C.ishrn(1);
        D.ishrn(1);
      } else {
        C.iadd(yp).ishrn(1);
        D.isub(xp).ishrn(1);
      }
    }

    if (x.cmp(y) >= 0) {
      x.isub(y);
      A.isub(C);
      B.isub(D);
    } else {
      y.isub(x);
      C.isub(A);
      D.isub(B);
    }
  }

  return {
    a: C,
    b: D,
    gcd: y.ishln(g)
  };
};

// This is reduced incarnation of the binary EEA
// above, designated to invert members of the
// _prime_ fields F(p) at a maximal speed
BN.prototype._invmp = function _invmp(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var a = this;
  var b = p.clone();

  if (a.sign)
    a = a.mod(p);
  else
    a = a.clone();

  var x1 = new BN(1);
  var x2 = new BN(0);

  var delta = b.clone();

  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    while (a.isEven()) {
      a.ishrn(1);
      if (x1.isEven())
        x1.ishrn(1);
      else
        x1.iadd(delta).ishrn(1);
    }
    while (b.isEven()) {
      b.ishrn(1);
      if (x2.isEven())
        x2.ishrn(1);
      else
        x2.iadd(delta).ishrn(1);
    }
    if (a.cmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }
  if (a.cmpn(1) === 0)
    return x1;
  else
    return x2;
};

BN.prototype.gcd = function gcd(num) {
  if (this.cmpn(0) === 0)
    return num.clone();
  if (num.cmpn(0) === 0)
    return this.clone();

  var a = this.clone();
  var b = num.clone();
  a.sign = false;
  b.sign = false;

  // Remove common factor of two
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    a.ishrn(1);
    b.ishrn(1);
  }

  do {
    while (a.isEven())
      a.ishrn(1);
    while (b.isEven())
      b.ishrn(1);

    var r = a.cmp(b);
    if (r < 0) {
      // Swap `a` and `b` to make `a` always bigger than `b`
      var t = a;
      a = b;
      b = t;
    } else if (r === 0 || b.cmpn(1) === 0) {
      break;
    }

    a.isub(b);
  } while (true);

  return b.ishln(shift);
};

// Invert number in the field F(num)
BN.prototype.invm = function invm(num) {
  return this.egcd(num).a.mod(num);
};

BN.prototype.isEven = function isEven() {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function isOdd() {
  return (this.words[0] & 1) === 1;
};

// And first word and num
BN.prototype.andln = function andln(num) {
  return this.words[0] & num;
};

// Increment at the bit position in-line
BN.prototype.bincn = function bincn(bit) {
  assert(typeof bit === 'number');
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    for (var i = this.length; i < s + 1; i++)
      this.words[i] = 0;
    this.words[s] |= q;
    this.length = s + 1;
    return this;
  }

  // Add bit and propagate, if needed
  var carry = q;
  for (var i = s; carry !== 0 && i < this.length; i++) {
    var w = this.words[i];
    w += carry;
    carry = w >>> 26;
    w &= 0x3ffffff;
    this.words[i] = w;
  }
  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }
  return this;
};

BN.prototype.cmpn = function cmpn(num) {
  var sign = num < 0;
  if (sign)
    num = -num;

  if (this.sign && !sign)
    return -1;
  else if (!this.sign && sign)
    return 1;

  num &= 0x3ffffff;
  this.strip();

  var res;
  if (this.length > 1) {
    res = 1;
  } else {
    var w = this.words[0];
    res = w === num ? 0 : w < num ? -1 : 1;
  }
  if (this.sign)
    res = -res;
  return res;
};

// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
BN.prototype.cmp = function cmp(num) {
  if (this.sign && !num.sign)
    return -1;
  else if (!this.sign && num.sign)
    return 1;

  var res = this.ucmp(num);
  if (this.sign)
    return -res;
  else
    return res;
};

// Unsigned comparison
BN.prototype.ucmp = function ucmp(num) {
  // At this point both numbers have the same sign
  if (this.length > num.length)
    return 1;
  else if (this.length < num.length)
    return -1;

  var res = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var a = this.words[i];
    var b = num.words[i];

    if (a === b)
      continue;
    if (a < b)
      res = -1;
    else if (a > b)
      res = 1;
    break;
  }
  return res;
};

//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
BN.red = function red(num) {
  return new Red(num);
};

BN.prototype.toRed = function toRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  assert(!this.sign, 'red works only with positives');
  return ctx.convertTo(this)._forceRed(ctx);
};

BN.prototype.fromRed = function fromRed() {
  assert(this.red, 'fromRed works only with numbers in reduction context');
  return this.red.convertFrom(this);
};

BN.prototype._forceRed = function _forceRed(ctx) {
  this.red = ctx;
  return this;
};

BN.prototype.forceRed = function forceRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  return this._forceRed(ctx);
};

BN.prototype.redAdd = function redAdd(num) {
  assert(this.red, 'redAdd works only with red numbers');
  return this.red.add(this, num);
};

BN.prototype.redIAdd = function redIAdd(num) {
  assert(this.red, 'redIAdd works only with red numbers');
  return this.red.iadd(this, num);
};

BN.prototype.redSub = function redSub(num) {
  assert(this.red, 'redSub works only with red numbers');
  return this.red.sub(this, num);
};

BN.prototype.redISub = function redISub(num) {
  assert(this.red, 'redISub works only with red numbers');
  return this.red.isub(this, num);
};

BN.prototype.redShl = function redShl(num) {
  assert(this.red, 'redShl works only with red numbers');
  return this.red.shl(this, num);
};

BN.prototype.redMul = function redMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.mul(this, num);
};

BN.prototype.redIMul = function redIMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.imul(this, num);
};

BN.prototype.redSqr = function redSqr() {
  assert(this.red, 'redSqr works only with red numbers');
  this.red._verify1(this);
  return this.red.sqr(this);
};

BN.prototype.redISqr = function redISqr() {
  assert(this.red, 'redISqr works only with red numbers');
  this.red._verify1(this);
  return this.red.isqr(this);
};

// Square root over p
BN.prototype.redSqrt = function redSqrt() {
  assert(this.red, 'redSqrt works only with red numbers');
  this.red._verify1(this);
  return this.red.sqrt(this);
};

BN.prototype.redInvm = function redInvm() {
  assert(this.red, 'redInvm works only with red numbers');
  this.red._verify1(this);
  return this.red.invm(this);
};

// Return negative clone of `this` % `red modulo`
BN.prototype.redNeg = function redNeg() {
  assert(this.red, 'redNeg works only with red numbers');
  this.red._verify1(this);
  return this.red.neg(this);
};

BN.prototype.redPow = function redPow(num) {
  assert(this.red && !num.red, 'redPow(normalNum)');
  this.red._verify1(this);
  return this.red.pow(this, num);
};

// Prime numbers with efficient reduction
var primes = {
  k256: null,
  p224: null,
  p192: null,
  p25519: null
};

// Pseudo-Mersenne prime
function MPrime(name, p) {
  // P = 2 ^ N - K
  this.name = name;
  this.p = new BN(p, 16);
  this.n = this.p.bitLength();
  this.k = new BN(1).ishln(this.n).isub(this.p);

  this.tmp = this._tmp();
}

MPrime.prototype._tmp = function _tmp() {
  var tmp = new BN(null);
  tmp.words = new Array(Math.ceil(this.n / 13));
  return tmp;
};

MPrime.prototype.ireduce = function ireduce(num) {
  // Assumes that `num` is less than `P^2`
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  var r = num;
  var rlen;

  do {
    this.split(r, this.tmp);
    r = this.imulK(r);
    r = r.iadd(this.tmp);
    rlen = r.bitLength();
  } while (rlen > this.n);

  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  if (cmp === 0) {
    r.words[0] = 0;
    r.length = 1;
  } else if (cmp > 0) {
    r.isub(this.p);
  } else {
    r.strip();
  }

  return r;
};

MPrime.prototype.split = function split(input, out) {
  input.ishrn(this.n, 0, out);
};

MPrime.prototype.imulK = function imulK(num) {
  return num.imul(this.k);
};

function K256() {
  MPrime.call(
    this,
    'k256',
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
}
inherits(K256, MPrime);

K256.prototype.split = function split(input, output) {
  // 256 = 9 * 26 + 22
  var mask = 0x3fffff;

  var outLen = Math.min(input.length, 9);
  for (var i = 0; i < outLen; i++)
    output.words[i] = input.words[i];
  output.length = outLen;

  if (input.length <= 9) {
    input.words[0] = 0;
    input.length = 1;
    return;
  }

  // Shift by 9 limbs
  var prev = input.words[9];
  output.words[output.length++] = prev & mask;

  for (var i = 10; i < input.length; i++) {
    var next = input.words[i];
    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
    prev = next;
  }
  input.words[i - 10] = prev >>> 22;
  input.length -= 9;
};

K256.prototype.imulK = function imulK(num) {
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  num.words[num.length] = 0;
  num.words[num.length + 1] = 0;
  num.length += 2;

  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  var hi;
  var lo = 0;
  for (var i = 0; i < num.length; i++) {
    var w = num.words[i];
    hi = w * 0x40;
    lo += w * 0x3d1;
    hi += (lo / 0x4000000) | 0;
    lo &= 0x3ffffff;

    num.words[i] = lo;

    lo = hi;
  }

  // Fast length reduction
  if (num.words[num.length - 1] === 0) {
    num.length--;
    if (num.words[num.length - 1] === 0)
      num.length--;
  }
  return num;
};

function P224() {
  MPrime.call(
    this,
    'p224',
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
}
inherits(P224, MPrime);

function P192() {
  MPrime.call(
    this,
    'p192',
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
}
inherits(P192, MPrime);

function P25519() {
  // 2 ^ 255 - 19
  MPrime.call(
    this,
    '25519',
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
}
inherits(P25519, MPrime);

P25519.prototype.imulK = function imulK(num) {
  // K = 0x13
  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var hi = num.words[i] * 0x13 + carry;
    var lo = hi & 0x3ffffff;
    hi >>>= 26;

    num.words[i] = lo;
    carry = hi;
  }
  if (carry !== 0)
    num.words[num.length++] = carry;
  return num;
};

// Exported mostly for testing purposes, use plain name instead
BN._prime = function prime(name) {
  // Cached version of prime
  if (primes[name])
    return primes[name];

  var prime;
  if (name === 'k256')
    prime = new K256();
  else if (name === 'p224')
    prime = new P224();
  else if (name === 'p192')
    prime = new P192();
  else if (name === 'p25519')
    prime = new P25519();
  else
    throw new Error('Unknown prime ' + name);
  primes[name] = prime;

  return prime;
};

//
// Base reduction engine
//
function Red(m) {
  if (typeof m === 'string') {
    var prime = BN._prime(m);
    this.m = prime.p;
    this.prime = prime;
  } else {
    this.m = m;
    this.prime = null;
  }
}

Red.prototype._verify1 = function _verify1(a) {
  assert(!a.sign, 'red works only with positives');
  assert(a.red, 'red works only with red numbers');
};

Red.prototype._verify2 = function _verify2(a, b) {
  assert(!a.sign && !b.sign, 'red works only with positives');
  assert(a.red && a.red === b.red,
         'red works only with red numbers');
};

Red.prototype.imod = function imod(a) {
  if (this.prime)
    return this.prime.ireduce(a)._forceRed(this);
  return a.mod(this.m)._forceRed(this);
};

Red.prototype.neg = function neg(a) {
  var r = a.clone();
  r.sign = !r.sign;
  return r.iadd(this.m)._forceRed(this);
};

Red.prototype.add = function add(a, b) {
  this._verify2(a, b);

  var res = a.add(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res._forceRed(this);
};

Red.prototype.iadd = function iadd(a, b) {
  this._verify2(a, b);

  var res = a.iadd(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res;
};

Red.prototype.sub = function sub(a, b) {
  this._verify2(a, b);

  var res = a.sub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res._forceRed(this);
};

Red.prototype.isub = function isub(a, b) {
  this._verify2(a, b);

  var res = a.isub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res;
};

Red.prototype.shl = function shl(a, num) {
  this._verify1(a);
  return this.imod(a.shln(num));
};

Red.prototype.imul = function imul(a, b) {
  this._verify2(a, b);
  return this.imod(a.imul(b));
};

Red.prototype.mul = function mul(a, b) {
  this._verify2(a, b);
  return this.imod(a.mul(b));
};

Red.prototype.isqr = function isqr(a) {
  return this.imul(a, a);
};

Red.prototype.sqr = function sqr(a) {
  return this.mul(a, a);
};

Red.prototype.sqrt = function sqrt(a) {
  if (a.cmpn(0) === 0)
    return a.clone();

  var mod3 = this.m.andln(3);
  assert(mod3 % 2 === 1);

  // Fast case
  if (mod3 === 3) {
    var pow = this.m.add(new BN(1)).ishrn(2);
    var r = this.pow(a, pow);
    return r;
  }

  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  //
  // Find Q and S, that Q * 2 ^ S = (P - 1)
  var q = this.m.subn(1);
  var s = 0;
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
    s++;
    q.ishrn(1);
  }
  assert(q.cmpn(0) !== 0);

  var one = new BN(1).toRed(this);
  var nOne = one.redNeg();

  // Find quadratic non-residue
  // NOTE: Max is such because of generalized Riemann hypothesis.
  var lpow = this.m.subn(1).ishrn(1);
  var z = this.m.bitLength();
  z = new BN(2 * z * z).toRed(this);
  while (this.pow(z, lpow).cmp(nOne) !== 0)
    z.redIAdd(nOne);

  var c = this.pow(z, q);
  var r = this.pow(a, q.addn(1).ishrn(1));
  var t = this.pow(a, q);
  var m = s;
  while (t.cmp(one) !== 0) {
    var tmp = t;
    for (var i = 0; tmp.cmp(one) !== 0; i++)
      tmp = tmp.redSqr();
    assert(i < m);
    var b = this.pow(c, new BN(1).ishln(m - i - 1));

    r = r.redMul(b);
    c = b.redSqr();
    t = t.redMul(c);
    m = i;
  }

  return r;
};

Red.prototype.invm = function invm(a) {
  var inv = a._invmp(this.m);
  if (inv.sign) {
    inv.sign = false;
    return this.imod(inv).redNeg();
  } else {
    return this.imod(inv);
  }
};

Red.prototype.pow = function pow(a, num) {
  var w = [];

  if (num.cmpn(0) === 0)
    return new BN(1);

  var q = num.clone();

  while (q.cmpn(0) !== 0) {
    w.push(q.andln(1));
    q.ishrn(1);
  }

  // Skip leading zeroes
  var res = a;
  for (var i = 0; i < w.length; i++, res = this.sqr(res))
    if (w[i] !== 0)
      break;

  if (++i < w.length) {
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
      if (w[i] === 0)
        continue;
      res = this.mul(res, q);
    }
  }

  return res;
};

Red.prototype.convertTo = function convertTo(num) {
  var r = num.mod(this.m);
  if (r === num)
    return r.clone();
  else
    return r;
};

Red.prototype.convertFrom = function convertFrom(num) {
  var res = num.clone();
  res.red = null;
  return res;
};

//
// Montgomery method engine
//

BN.mont = function mont(num) {
  return new Mont(num);
};

function Mont(m) {
  Red.call(this, m);

  this.shift = this.m.bitLength();
  if (this.shift % 26 !== 0)
    this.shift += 26 - (this.shift % 26);
  this.r = new BN(1).ishln(this.shift);
  this.r2 = this.imod(this.r.sqr());
  this.rinv = this.r._invmp(this.m);

  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  this.minv.sign = true;
  this.minv = this.minv.mod(this.r);
}
inherits(Mont, Red);

Mont.prototype.convertTo = function convertTo(num) {
  return this.imod(num.shln(this.shift));
};

Mont.prototype.convertFrom = function convertFrom(num) {
  var r = this.imod(num.mul(this.rinv));
  r.red = null;
  return r;
};

Mont.prototype.imul = function imul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
    a.words[0] = 0;
    a.length = 1;
    return a;
  }

  var t = a.imul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.mul = function mul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
    return new BN(0)._forceRed(this);

  var t = a.mul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.invm = function invm(a) {
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  var res = this.imod(a._invmp(this.m).mul(this.r2));
  return res._forceRed(this);
};

})(typeof module === 'undefined' || module, this);

},{}],53:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
},{"bn.js":52,"buffer":26,"randombytes":166}],54:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');

},{"../package.json":74,"./elliptic/curve":57,"./elliptic/curves":60,"./elliptic/ec":61,"./elliptic/hmac-drbg":64,"./elliptic/utils":66,"brorand":67}],55:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');

var getNAF = elliptic.utils.getNAF;
var getJSF = elliptic.utils.getJSF;
var assert = elliptic.utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

  // Useful for many curves
  this.zero = new bn(0).toRed(this.red);
  this.one = new bn(1).toRed(this.red);
  this.two = new bn(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new bn(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;
  return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":54,"bn.js":52}],56:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
  this.c = new bn(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y = rhs.redMul(lhs.redInvm()).redSqrt();
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y, curve.one);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = z ? new bn(z, 16) : this.curve.one;
    this.t = t && new bn(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":54,"../curve":57,"bn.js":52,"inherits":173}],57:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":55,"./edwards":56,"./mont":58,"./short":59}],58:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.i4 = new bn(4).toRed(this.red).redInvm();
  this.two = new bn(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn(x, 16);
    this.z = new bn(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../curve":57,"bn.js":52,"inherits":173}],59:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new bn(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new bn(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new bn(vec.a, 16),
        b: new bn(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn.mont(num);
  var tinv = new bn(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn(1);
  var y1 = new bn(0);
  var x2 = new bn(0);
  var y2 = new bn(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.sign) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.sign) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.sign) {
      split.k1.sign = !split.k1.sign;
      p = p.neg(true);
    }
    if (split.k2.sign) {
      split.k2.sign = !split.k2.sign;
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new bn(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn(0);
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = new bn(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new bn(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":54,"../curve":57,"bn.js":52,"inherits":173}],60:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":54,"./precomputed/secp256k1":65,"hash.js":68}],61:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.shrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn(2));
  do {
    var priv = new bn(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.shrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new bn(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray();
  for (var i = bkey.length; i < 21; i++)
    bkey.unshift(0);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray();
  for (var i = nonce.length; i < bytes; i++)
    nonce.unshift(0);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new bn(1));
  do {
    var k = new bn(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.mod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0)
      s = this.n.sub(s);

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  } while (true);
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new bn(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).mod(this.n);
  var u2 = sinv.mul(r).mod(this.n);

  var p = this.g.mulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  return p.getX().mod(this.n).cmp(r) === 0;
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new bn(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.mod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  r = this.curve.pointFromX(isYOdd, r);
  var eNeg = e.neg().mod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = signature.r.invm(n);
  return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime = this.recoverPubKey(e, signature, i);

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":54,"./key":62,"./signature":63,"bn.js":52}],62:[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!enc)
    return this.pub;

  var len = this.ec.curve.p.byteLength();
  var x = this.pub.getX().toArray();

  for (var i = x.length; i < len; i++)
    x.unshift(0);

  var res;
  if (this.ec.curve.type !== 'mont') {
    if (compact) {
      res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);
    } else {
      var y = this.pub.getY().toArray();
      for (var i = y.length; i < len; i++)
        y.unshift(0);
      var res = [ 0x04 ].concat(x, y);
    }
  } else {
    res = x;
  }

  return utils.encode(res, enc);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new bn(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.mod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  key = utils.toArray(key, enc);
  if (this.ec.curve.type !== 'mont')
    return this._importPublicShort(key);
  else
    return this._importPublicMont(key);
};

KeyPair.prototype._importPublicShort = function _importPublicShort(key) {
  var len = this.ec.curve.p.byteLength();
  if (key[0] === 0x04 && key.length - 1 === 2 * len) {
    this.pub = this.ec.curve.point(
      key.slice(1, 1 + len),
      key.slice(1 + len, 1 + 2 * len));
  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
    this.pub = this.ec.curve.pointFromX(key[0] === 0x03, key.slice(1, 1 + len));
  }
};

KeyPair.prototype._importPublicMont = function _importPublicMont(key) {
  this.pub = this.ec.curve.point(key, 1);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg) {
  return this.ec.sign(msg, this);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":54,"bn.js":52}],63:[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new bn(options.r, 16);
  this.s = new bn(options.s, 16);
  if (options.recoveryParam !== null)
    this.recoveryParam = options.recoveryParam;
  else
    this.recoveryParam = null;
}
module.exports = Signature;

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
    return false;
  var total = data[1];
  if (1 + total > data.length)
    return false;
  var rlen = data[3];
  // Short length notation
  if (rlen >= 0x80)
    return false;
  if (4 + rlen + 2 >= data.length)
    return false;
  if (data[4 + rlen] !== 0x02)
    return false;
  var slen = data[5 + rlen];
  // Short length notation
  if (slen >= 0x80)
    return false;
  if (4 + rlen + 2 + slen > data.length)
    return false;

  this.r = new bn(data.slice(4, 4 + rlen));
  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));
  this.recoveryParam = null;

  return true;
};

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return utils.encode(res, enc);
};

},{"../../elliptic":54,"bn.js":52}],64:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":54,"hash.js":68}],65:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],66:[function(require,module,exports){
'use strict';

var utils = exports;

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.ishrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.ishrn(1);
    k2.ishrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

},{}],67:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof window === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('cry' + 'pto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{}],68:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":69,"./hash/hmac":70,"./hash/ripemd":71,"./hash/sha":72,"./hash/utils":73}],69:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":68}],70:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":68}],71:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":68}],72:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":68}],73:[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":173}],74:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "3.1.0",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "scripts": {
    "test": "make lint && mocha --reporter=spec test/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "browserify": "^3.44.2",
    "jscs": "^1.11.3",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "bn.js": "^2.0.3",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "gitHead": "d86cd2a8178f7e7cecbd6dd92eea084e2ab44c13",
  "_id": "elliptic@3.1.0",
  "_shasum": "c21682ef762769b56a74201609105da11d5f60cc",
  "_from": "elliptic@^3.0.0",
  "_npmVersion": "2.11.0",
  "_nodeVersion": "2.2.1",
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "dist": {
    "shasum": "c21682ef762769b56a74201609105da11d5f60cc",
    "tarball": "http://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],75:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function evp(password, salt, keyLen) {
  keyLen = keyLen/8;
  var ki = 0;
  var ii = 0;
  var key = new Buffer(keyLen);
  var addmd = 0;
  var md, md_buf;
  var i;
  while (true) {
    md = createHash('md5');
    if(addmd++ > 0) {
       md.update(md_buf);
    }
    md.update(password);
    md.update(salt);
    md_buf = md.digest();
    i = 0;
    if(keyLen > 0) {
      while(true) {
        if(keyLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
        key[ki++] = md_buf[i++];
        keyLen--;
       }
    }
   if(keyLen === 0) {
      break;
    }
  }
  for(i=0;i<md_buf.length;i++) {
    md_buf[i] = 0;
  }
  return key;
};
}).call(this,require("buffer").Buffer)
},{"buffer":26,"create-hash":119}],76:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],77:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js');

var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  );
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function() {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  );
});
exports.RSAPublicKey = RSAPublicKey;

var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  );
});
exports.PublicKey = PublicKey;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      ).optional()
  );
});

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  );
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  );
});

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  );
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  );
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function() {
  this.choice({
    namedCurve: this.objid()
  });
});

exports.signature = asn1.define('signature', function() {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  );
});

},{"asn1.js":80}],78:[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m;
var startRegex =/^-----BEGIN (.*) KEY-----\r?\n/m;
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m;
var evp = require('./EVP_BytesToKey');
var ciphers = require('browserify-aes');
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1] + ' KEY';
  return {
    tag: tag,
    data: decrypted
  };
};

// http://stackoverflow.com/a/7033705
function wrap (str) {
  var chunks = []

  for (var i = 0; i < str.length; i += 64) {
    chunks.push(str.slice(i, i + 64))
  }
  return chunks.join("\n")
}

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":75,"browserify-aes":34,"buffer":26}],79:[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2');
module.exports = parseKeys;

function parseKeys(buffer) {
  var password;
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }

  var stripped = fixProc(buffer, password);

  var type = stripped.tag;
  var data = stripped.data;
  var subtype,ndata;
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
        case '1.2.840.10045.2.1':
        ndata.subjectPrivateKey = ndata.subjectPublicKey;
          return {
            type: 'ec',
            data:  ndata
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(data, password);
      //falling through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };
    default: throw new Error('unknown key type ' +  type);
  }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10)/8;
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = ciphers.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}

}).call(this,require("buffer").Buffer)
},{"./aesid.json":76,"./asn1":77,"./fixProc":78,"browserify-aes":34,"buffer":26,"pbkdf2":139}],80:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":81,"./asn1/base":83,"./asn1/constants":87,"./asn1/decoders":89,"./asn1/encoders":91,"bn.js":52}],81:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":80,"inherits":173,"vm":197}],82:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":83,"buffer":26,"inherits":173}],83:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":82,"./node":84,"./reporter":85}],84:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input));

  var result = state['default'];
  var present = true;

  var prevKey;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    present = this._peekTag(
      input,
      state.explicit !== null ? state.explicit :
          state.implicit !== null ? state.implicit :
              state.tag || 0,
      state.any
    );
    if (input.isError(present))
      return present;
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input);
    else
      result = this._decodeChoice(input);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      var fail = state.children.some(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input);
      });
      if (fail)
        return err;
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0]);
  else if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._decodeStr(input, tag);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1]);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag);
  else if (tag === 'null_')
    return this._decodeNull(input);
  else if (tag === 'bool')
    return this._decodeBool(input);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0]);
  else if (state.use !== null)
    return this._getUse(state.use, input._reporterState.obj)._decode(input);
  else
    return input.error('unknown tag: ' + tag);

  return null;
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;
  var present = true;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // For error reporting
  var prevKey;

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });

    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else
    throw new Error('Unsupported tag: ' + tag);
};

},{"../base":83,"minimalistic-assert":92}],85:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  Error.captureStackTrace(this, ReporterError);

  return this;
};

},{"inherits":173}],86:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":87}],87:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":86}],88:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.start();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  return buffer.cut(state);
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der');
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;

    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'ia5str') {
    return buffer.raw().toString();
  } else {
    return this.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values)
    result = values[result.join(' ')];

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return this.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":80,"inherits":173}],89:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');

},{"./der":88}],90:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'octstr')
    return this._createEncoderBuffer(str);
  else if (tag === 'bitstr')
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  else if (tag === 'ia5str')
    return this._createEncoderBuffer(str);
  return this.reporter.error('Encoding of string type: ' + tag +
                             ' unsupported');
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/\s+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (num.sign === false && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":80,"buffer":26,"inherits":173}],91:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');

},{"./der":90}],92:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],93:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1')
var BN = require('bn.js')
var elliptic = require('elliptic')
var crt = require('browserify-rsa')
var createHmac = require('create-hmac')
var curves = require('./curves')

module.exports = sign
function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') {
      throw new Error('wrong private key type')
    }
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    return dsaSign(hash, priv, hashType)
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong private key type')
    }
  }
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}
function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId)
    throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new elliptic.ec(curveId)

  var key = curve.genKeyPair()
  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)
  return new Buffer(out.toDER())
}
function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var montq = BN.mont(q)
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}
function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r)
  // Pad values
  if (s[0] & 0x80)
    s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}
module.exports.getKey = getKey
function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}
function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}
function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}
module.exports.makeKey = makeKey
function makeKey (q, kv, algo) {
  var t
  var k
  while (true) {
    t = new Buffer('')
    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }
    k = bits2int(t, q)
    kv.k =  createHmac(algo, kv.k)
        .update(kv.v)
        .update(new Buffer([0]))
        .digest()
    kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
    if (k.cmp(q) === -1) {
      return k
    }
  }
}
function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

}).call(this,require("buffer").Buffer)
},{"./curves":51,"bn.js":52,"browserify-rsa":53,"buffer":26,"create-hmac":131,"elliptic":54,"parse-asn1":79}],94:[function(require,module,exports){
(function (Buffer){
'use strict'
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1')
var elliptic = require('elliptic')
var curves = require('./curves')
var BN = require('bn.js')
module.exports = verify

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}
function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId)
    throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new elliptic.ec(curveId)

  var pubkey = pub.data.subjectPrivateKey.data
  return curve.verify(hash, sig, pubkey)
}
function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montq = BN.mont(q)
  var montp = BN.mont(p)
  var w =  s.invm(q)
  var v = g.toRed(montp)
  .redPow(new BN(hash).mul(w).mod(q))
  .fromRed()
  .mul(
    y.toRed(montp)
    .redPow(r.mul(w).mod(q))
    .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}
function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

}).call(this,require("buffer").Buffer)
},{"./curves":51,"bn.js":52,"buffer":26,"elliptic":54,"parse-asn1":79}],95:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
},{"bn.js":97,"buffer":26,"elliptic":98}],96:[function(require,module,exports){
var createECDH = require('crypto').createECDH;

module.exports = createECDH || require('./browser');
},{"./browser":95,"crypto":30}],97:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"dup":52}],98:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"../package.json":118,"./elliptic/curve":101,"./elliptic/curves":104,"./elliptic/ec":105,"./elliptic/hmac-drbg":108,"./elliptic/utils":110,"brorand":111,"dup":54}],99:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"../../elliptic":98,"bn.js":97,"dup":55}],100:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"../../elliptic":98,"../curve":101,"bn.js":97,"dup":56,"inherits":173}],101:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"./base":99,"./edwards":100,"./mont":102,"./short":103,"dup":57}],102:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../curve":101,"bn.js":97,"dup":58,"inherits":173}],103:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../../elliptic":98,"../curve":101,"bn.js":97,"dup":59,"inherits":173}],104:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../elliptic":98,"./precomputed/secp256k1":109,"dup":60,"hash.js":112}],105:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../../elliptic":98,"./key":106,"./signature":107,"bn.js":97,"dup":61}],106:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"../../elliptic":98,"bn.js":97,"dup":62}],107:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"../../elliptic":98,"bn.js":97,"dup":63}],108:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"../elliptic":98,"dup":64,"hash.js":112}],109:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"dup":65}],110:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"dup":66}],111:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"dup":67}],112:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"./hash/common":113,"./hash/hmac":114,"./hash/ripemd":115,"./hash/sha":116,"./hash/utils":117,"dup":68}],113:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"../hash":112,"dup":69}],114:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"../hash":112,"dup":70}],115:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"../hash":112,"dup":71}],116:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"../hash":112,"dup":72}],117:[function(require,module,exports){
arguments[4][73][0].apply(exports,arguments)
},{"dup":73,"inherits":173}],118:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"dup":74}],119:[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Transform = require('stream').Transform

function HashNoConstructor(hash) {
  Transform.call(this)

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Transform)

HashNoConstructor.prototype._transform = function (data, _, next) {
  this.buffers.push(data)

  next()
}

HashNoConstructor.prototype._flush = function (next) {
  this.push(this.digest())
  next()
}

HashNoConstructor.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this.buffers.push(data)
  return this
}

HashNoConstructor.prototype.digest = function (enc) {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return enc ? r.toString(enc) : r
}

function Hash(hash) {
  Transform.call(this)

  this._hash = hash
}

inherits(Hash, Transform)

Hash.prototype._transform = function (data, enc, next) {
  if (enc) data = new Buffer(data, enc)

  this._hash.update(data)

  next()
}

Hash.prototype._flush = function (next) {
  this.push(this._hash.digest())
  this._hash = null

  next()
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Hash.prototype.digest = function (enc) {
  var outData = this._hash.digest()

  return enc ? outData.toString(enc) : outData
}

module.exports = function createHash (alg) {
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
},{"./md5":121,"buffer":26,"inherits":173,"ripemd160":122,"sha.js":124,"stream":192}],120:[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
},{"buffer":26}],121:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":120}],122:[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
},{"buffer":26}],123:[function(require,module,exports){
(function (Buffer){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
},{"buffer":26}],124:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":125,"./sha1":126,"./sha224":127,"./sha256":128,"./sha384":129,"./sha512":130}],125:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0, k

  /*
   * SHA-1 has a bitwise rotate left operation. But, SHA is not
   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
   */
  function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


}).call(this,require("buffer").Buffer)
},{"./hash":123,"buffer":26,"inherits":173}],126:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0, k

  function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("buffer").Buffer)
},{"./hash":123,"buffer":26,"inherits":173}],127:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8 | 0
  this._b = 0x367cd507 | 0
  this._c = 0x3070dd17 | 0
  this._d = 0xf70e5939 | 0
  this._e = 0xffc00b31 | 0
  this._f = 0x68581511 | 0
  this._g = 0x64f98fa7 | 0
  this._h = 0xbefa4fa4 | 0

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
},{"./hash":123,"./sha256":128,"buffer":26,"inherits":173}],128:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  return this
}

function S (X, n) {
  return (X >>> n) | (X << (32 - n))
}

function R (X, n) {
  return (X >>> n)
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z))
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z))
}

function Sigma0256 (x) {
  return (S(x, 2) ^ S(x, 13) ^ S(x, 22))
}

function Sigma1256 (x) {
  return (S(x, 6) ^ S(x, 11) ^ S(x, 25))
}

function Gamma0256 (x) {
  return (S(x, 7) ^ S(x, 18) ^ R(x, 3))
}

function Gamma1256 (x) {
  return (S(x, 17) ^ S(x, 19) ^ R(x, 10))
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var j = 0

  function calcW () { return Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16] }
  function loop (w) {
    W[j] = w

    var T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w
    var T2 = Sigma0256(a) + Maj(a, b, c)

    h = g
    g = f
    f = e
    e = d + T1
    d = c
    c = b
    b = a
    a = T1 + T2

    j++
  }

  while (j < 16) loop(M.readInt32BE(j * 4))
  while (j < 64) loop(calcW())

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
},{"./hash":123,"buffer":26,"inherits":173}],129:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._a = 0xcbbb9d5d | 0
  this._b = 0x629a292a | 0
  this._c = 0x9159015a | 0
  this._d = 0x152fecd8 | 0
  this._e = 0x67332667 | 0
  this._f = 0x8eb44a87 | 0
  this._g = 0xdb0c2e0d | 0
  this._h = 0x47b5481d | 0

  this._al = 0xc1059ed8 | 0
  this._bl = 0x367cd507 | 0
  this._cl = 0x3070dd17 | 0
  this._dl = 0xf70e5939 | 0
  this._el = 0xffc00b31 | 0
  this._fl = 0x68581511 | 0
  this._gl = 0x64f98fa7 | 0
  this._hl = 0xbefa4fa4 | 0

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
},{"./hash":123,"./sha512":130,"buffer":26,"inherits":173}],130:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  this._al = 0xf3bcc908 | 0
  this._bl = 0x84caa73b | 0
  this._cl = 0xfe94f82b | 0
  this._dl = 0x5f1d36f1 | 0
  this._el = 0xade682d1 | 0
  this._fl = 0x2b3e6c1f | 0
  this._gl = 0xfb41bd6b | 0
  this._hl = 0x137e2179 | 0

  return this
}

function S (X, Xl, n) {
  return (X >>> n) | (Xl << (32 - n))
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z))
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z))
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  var i = 0, j = 0
  var Wi, Wil
  function calcW () {
    var x = W[j - 15 * 2]
    var xl = W[j - 15 * 2 + 1]
    var gamma0 = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
    var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

    x = W[j - 2 * 2]
    xl = W[j - 2 * 2 + 1]
    var gamma1 = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
    var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7 = W[j - 7 * 2]
    var Wi7l = W[j - 7 * 2 + 1]

    var Wi16 = W[j - 16 * 2]
    var Wi16l = W[j - 16 * 2 + 1]

    Wil = gamma0l + Wi7l
    Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
    Wil = Wil + gamma1l
    Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
    Wil = Wil + Wi16l
    Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
  }

  function loop () {
    W[j] = Wi
    W[j + 1] = Wil

    var maj = Maj(a, b, c)
    var majl = Maj(al, bl, cl)

    var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
    var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
    var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
    var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

    // t1 = h + sigma1 + ch + K[i] + W[i]
    var Ki = K[j]
    var Kil = K[j + 1]

    var ch = Ch(e, f, g)
    var chl = Ch(el, fl, gl)

    var t1l = hl + sigma1l
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
    t1l = t1l + chl
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
    t1l = t1l + Kil
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
    t1l = t1l + Wil
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

    h = g
    hl = gl
    g = f
    gl = fl
    f = e
    fl = el
    el = (dl + t1l) | 0
    e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    d = c
    dl = cl
    c = b
    cl = bl
    b = a
    bl = al
    al = (t1l + t2l) | 0
    a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

    i++
    j += 2
  }

  while (i < 16) {
    Wi = M.readInt32BE(j * 4)
    Wil = M.readInt32BE(j * 4 + 4)

    loop()
  }

  while (i < 80) {
    calcW()
    loop()
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)
  writeInt64BE(this._g, this._gl, 48)
  writeInt64BE(this._h, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
},{"./hash":123,"buffer":26,"inherits":173}],131:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)

  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
},{"buffer":26,"create-hash/browser":119,"inherits":173,"stream":192}],132:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
    genc = generator;
    generator = enc;
    enc = undefined;
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)
},{"./lib/dh":133,"./lib/generatePrime":134,"./lib/primes":135,"buffer":26}],133:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;
  
  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;
    
    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      } 
      break;
    default: 
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function defineError (self, error) {
  try {
    Object.defineProperty(self, 'verifyError', {
      enumerable: true,
      value: error,
      writable: false
    });
  } catch(e) {
    self.verifyError = error;
  }
}
function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = void 0;
  this._priv = void 0;
  
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
    defineError(this, checkPrime(this.__prime, generator));
  } else {
    defineError(this, 8);
  }
}

DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
}).call(this,require("buffer").Buffer)
},{"./generatePrime":134,"bn.js":136,"buffer":26,"miller-rabin":137,"randombytes":166}],134:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);
  var runs, comp;
  function generateRandom(bits) {
    runs = -1;
    var out = new BN(randomBytes(Math.ceil(bits / 8)));
    while (out.bitLength() > bits) {
      out.ishrn(1);
    }
    if (out.isEven()) {
      out.iadd(ONE);
    }
    if (!out.testn(1)) {
      out.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {
        out.iadd(FOUR);
      }
      comp = {
        major: [TWENTYFOUR],
        minor: [TWELVE]
      };
    } else if (!gen.cmp(FIVE)) {
      rem = out.mod(TEN);
      while (rem.cmp(THREE)) {
        out.iadd(FOUR);
        rem = out.mod(TEN);
      }
      comp = {
        major: [FOUR, SIXTEEN],
        minor: [TWO, EIGHT]
      };
    } else {
      comp = {
        major: [FOUR],
        minor: [TWO]
      };
    }
    return out;
  }
  var num = generateRandom(bits);

  var n2 = num.shrn(1);

  while (true) {
    while (num.bitLength() > bits) {
      num = generateRandom(bits);
      n2 = num.shrn(1);
    }
    runs++;
    if (simpleSieve(n2) &&  simpleSieve(num) &&
      fermatTest(n2) &&  fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
    num.iadd(comp.major[runs%comp.major.length]);
    n2.iadd(comp.minor[runs%comp.minor.length]);
  }

}
},{"bn.js":136,"miller-rabin":137,"randombytes":166}],135:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],136:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"dup":52}],137:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":136,"brorand":138}],138:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"dup":67}],139:[function(require,module,exports){
(function (Buffer){
var createHmac = require('create-hmac')
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

exports.pbkdf2 = pbkdf2
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  if (typeof callback !== 'function') {
    throw new Error('No callback provided to pbkdf2')
  }

  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)
  setTimeout(function () {
    callback(undefined, result)
  })
}

exports.pbkdf2Sync = pbkdf2Sync
function pbkdf2Sync (password, salt, iterations, keylen, digest) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC) {
    throw new TypeError('Bad key length')
  }

  digest = digest || 'sha1'

  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k]
      }
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require("buffer").Buffer)
},{"buffer":26,"create-hmac":131}],140:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":162,"./publicEncrypt":163}],141:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":26,"create-hash":119}],142:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"dup":52}],143:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"bn.js":142,"buffer":26,"dup":53,"randombytes":166}],144:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"buffer":26,"create-hash":119,"dup":75}],145:[function(require,module,exports){
arguments[4][76][0].apply(exports,arguments)
},{"dup":76}],146:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"asn1.js":149,"dup":77}],147:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./EVP_BytesToKey":144,"browserify-aes":34,"buffer":26,"dup":78}],148:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"./aesid.json":145,"./asn1":146,"./fixProc":147,"browserify-aes":34,"buffer":26,"dup":79,"pbkdf2":139}],149:[function(require,module,exports){
arguments[4][80][0].apply(exports,arguments)
},{"./asn1/api":150,"./asn1/base":152,"./asn1/constants":156,"./asn1/decoders":158,"./asn1/encoders":160,"bn.js":142,"dup":80}],150:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"../asn1":149,"dup":81,"inherits":173,"vm":197}],151:[function(require,module,exports){
arguments[4][82][0].apply(exports,arguments)
},{"../base":152,"buffer":26,"dup":82,"inherits":173}],152:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"./buffer":151,"./node":153,"./reporter":154,"dup":83}],153:[function(require,module,exports){
arguments[4][84][0].apply(exports,arguments)
},{"../base":152,"dup":84,"minimalistic-assert":161}],154:[function(require,module,exports){
arguments[4][85][0].apply(exports,arguments)
},{"dup":85,"inherits":173}],155:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"../constants":156,"dup":86}],156:[function(require,module,exports){
arguments[4][87][0].apply(exports,arguments)
},{"./der":155,"dup":87}],157:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"../../asn1":149,"dup":88,"inherits":173}],158:[function(require,module,exports){
arguments[4][89][0].apply(exports,arguments)
},{"./der":157,"dup":89}],159:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"../../asn1":149,"buffer":26,"dup":90,"inherits":173}],160:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"./der":159,"dup":91}],161:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"dup":92}],162:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":141,"./withPublic":164,"./xor":165,"bn.js":142,"browserify-rsa":143,"buffer":26,"create-hash":119,"parse-asn1":148}],163:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":141,"./withPublic":164,"./xor":165,"bn.js":142,"browserify-rsa":143,"buffer":26,"create-hash":119,"parse-asn1":148,"randombytes":166}],164:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
},{"bn.js":142,"buffer":26}],165:[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],166:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var crypto = global.crypto || global.msCrypto
if(crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}
function randomBytes(size, cb) {
  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
    /* This will not work in older browsers.
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
     */

  crypto.getRandomValues(bytes);
  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }
  return bytes;
}
function oldBrowser() {
  throw new Error(
      'secure random number generation not supported by this browser\n'+
      'use chrome, FireFox or Internet Explorer 11'
    )
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":176,"buffer":26}],167:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],168:[function(require,module,exports){
var http = module.exports;
var EventEmitter = require('events').EventEmitter;
var Request = require('./lib/request');
var url = require('url')

http.request = function (params, cb) {
    if (typeof params === 'string') {
        params = url.parse(params)
    }
    if (!params) params = {};
    if (!params.host && !params.port) {
        params.port = parseInt(window.location.port, 10);
    }
    if (!params.host && params.hostname) {
        params.host = params.hostname;
    }

    if (!params.protocol) {
        if (params.scheme) {
            params.protocol = params.scheme + ':';
        } else {
            params.protocol = window.location.protocol;
        }
    }

    if (!params.host) {
        params.host = window.location.hostname || window.location.host;
    }
    if (/:/.test(params.host)) {
        if (!params.port) {
            params.port = params.host.split(':')[1];
        }
        params.host = params.host.split(':')[0];
    }
    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;
    
    var req = new Request(new xhrHttp, params);
    if (cb) req.on('response', cb);
    return req;
};

http.get = function (params, cb) {
    params.method = 'GET';
    var req = http.request(params, cb);
    req.end();
    return req;
};

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

var xhrHttp = (function () {
    if (typeof window === 'undefined') {
        throw new Error('no window object present');
    }
    else if (window.XMLHttpRequest) {
        return window.XMLHttpRequest;
    }
    else if (window.ActiveXObject) {
        var axs = [
            'Msxml2.XMLHTTP.6.0',
            'Msxml2.XMLHTTP.3.0',
            'Microsoft.XMLHTTP'
        ];
        for (var i = 0; i < axs.length; i++) {
            try {
                var ax = new(window.ActiveXObject)(axs[i]);
                return function () {
                    if (ax) {
                        var ax_ = ax;
                        ax = null;
                        return ax_;
                    }
                    else {
                        return new(window.ActiveXObject)(axs[i]);
                    }
                };
            }
            catch (e) {}
        }
        throw new Error('ajax not supported in this browser')
    }
    else {
        throw new Error('ajax not supported in this browser');
    }
})();

http.STATUS_CODES = {
    100 : 'Continue',
    101 : 'Switching Protocols',
    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
    200 : 'OK',
    201 : 'Created',
    202 : 'Accepted',
    203 : 'Non-Authoritative Information',
    204 : 'No Content',
    205 : 'Reset Content',
    206 : 'Partial Content',
    207 : 'Multi-Status',               // RFC 4918
    300 : 'Multiple Choices',
    301 : 'Moved Permanently',
    302 : 'Moved Temporarily',
    303 : 'See Other',
    304 : 'Not Modified',
    305 : 'Use Proxy',
    307 : 'Temporary Redirect',
    400 : 'Bad Request',
    401 : 'Unauthorized',
    402 : 'Payment Required',
    403 : 'Forbidden',
    404 : 'Not Found',
    405 : 'Method Not Allowed',
    406 : 'Not Acceptable',
    407 : 'Proxy Authentication Required',
    408 : 'Request Time-out',
    409 : 'Conflict',
    410 : 'Gone',
    411 : 'Length Required',
    412 : 'Precondition Failed',
    413 : 'Request Entity Too Large',
    414 : 'Request-URI Too Large',
    415 : 'Unsupported Media Type',
    416 : 'Requested Range Not Satisfiable',
    417 : 'Expectation Failed',
    418 : 'I\'m a teapot',              // RFC 2324
    422 : 'Unprocessable Entity',       // RFC 4918
    423 : 'Locked',                     // RFC 4918
    424 : 'Failed Dependency',          // RFC 4918
    425 : 'Unordered Collection',       // RFC 4918
    426 : 'Upgrade Required',           // RFC 2817
    428 : 'Precondition Required',      // RFC 6585
    429 : 'Too Many Requests',          // RFC 6585
    431 : 'Request Header Fields Too Large',// RFC 6585
    500 : 'Internal Server Error',
    501 : 'Not Implemented',
    502 : 'Bad Gateway',
    503 : 'Service Unavailable',
    504 : 'Gateway Time-out',
    505 : 'HTTP Version Not Supported',
    506 : 'Variant Also Negotiates',    // RFC 2295
    507 : 'Insufficient Storage',       // RFC 4918
    509 : 'Bandwidth Limit Exceeded',
    510 : 'Not Extended',               // RFC 2774
    511 : 'Network Authentication Required' // RFC 6585
};
},{"./lib/request":169,"events":167,"url":194}],169:[function(require,module,exports){
var Stream = require('stream');
var Response = require('./response');
var Base64 = require('Base64');
var inherits = require('inherits');

var Request = module.exports = function (xhr, params) {
    var self = this;
    self.writable = true;
    self.xhr = xhr;
    self.body = [];
    
    self.uri = (params.protocol || 'http:') + '//'
        + params.host
        + (params.port ? ':' + params.port : '')
        + (params.path || '/')
    ;
    
    if (typeof params.withCredentials === 'undefined') {
        params.withCredentials = true;
    }

    try { xhr.withCredentials = params.withCredentials }
    catch (e) {}
    
    if (params.responseType) try { xhr.responseType = params.responseType }
    catch (e) {}
    
    xhr.open(
        params.method || 'GET',
        self.uri,
        true
    );

    xhr.onerror = function(event) {
        self.emit('error', new Error('Network error'));
    };

    self._headers = {};
    
    if (params.headers) {
        var keys = objectKeys(params.headers);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!self.isSafeRequestHeader(key)) continue;
            var value = params.headers[key];
            self.setHeader(key, value);
        }
    }
    
    if (params.auth) {
        //basic auth
        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
    }

    var res = new Response;
    res.on('close', function () {
        self.emit('close');
    });
    
    res.on('ready', function () {
        self.emit('response', res);
    });

    res.on('error', function (err) {
        self.emit('error', err);
    });
    
    xhr.onreadystatechange = function () {
        // Fix for IE9 bug
        // SCRIPT575: Could not complete the operation due to error c00c023f
        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
        if (xhr.__aborted) return;
        res.handle(xhr);
    };
};

inherits(Request, Stream);

Request.prototype.setHeader = function (key, value) {
    this._headers[key.toLowerCase()] = value
};

Request.prototype.getHeader = function (key) {
    return this._headers[key.toLowerCase()]
};

Request.prototype.removeHeader = function (key) {
    delete this._headers[key.toLowerCase()]
};

Request.prototype.write = function (s) {
    this.body.push(s);
};

Request.prototype.destroy = function (s) {
    this.xhr.__aborted = true;
    this.xhr.abort();
    this.emit('close');
};

Request.prototype.end = function (s) {
    if (s !== undefined) this.body.push(s);

    var keys = objectKeys(this._headers);
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = this._headers[key];
        if (isArray(value)) {
            for (var j = 0; j < value.length; j++) {
                this.xhr.setRequestHeader(key, value[j]);
            }
        }
        else this.xhr.setRequestHeader(key, value)
    }

    if (this.body.length === 0) {
        this.xhr.send('');
    }
    else if (typeof this.body[0] === 'string') {
        this.xhr.send(this.body.join(''));
    }
    else if (isArray(this.body[0])) {
        var body = [];
        for (var i = 0; i < this.body.length; i++) {
            body.push.apply(body, this.body[i]);
        }
        this.xhr.send(body);
    }
    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
        var len = 0;
        for (var i = 0; i < this.body.length; i++) {
            len += this.body[i].length;
        }
        var body = new(this.body[0].constructor)(len);
        var k = 0;
        
        for (var i = 0; i < this.body.length; i++) {
            var b = this.body[i];
            for (var j = 0; j < b.length; j++) {
                body[k++] = b[j];
            }
        }
        this.xhr.send(body);
    }
    else if (isXHR2Compatible(this.body[0])) {
        this.xhr.send(this.body[0]);
    }
    else {
        var body = '';
        for (var i = 0; i < this.body.length; i++) {
            body += this.body[i].toString();
        }
        this.xhr.send(body);
    }
};

// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
Request.unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "content-transfer-encoding",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "user-agent",
    "via"
];

Request.prototype.isSafeRequestHeader = function (headerName) {
    if (!headerName) return false;
    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
};

var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var indexOf = function (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
};

var isXHR2Compatible = function (obj) {
    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
};

},{"./response":170,"Base64":171,"inherits":173,"stream":192}],170:[function(require,module,exports){
var Stream = require('stream');
var util = require('util');

var Response = module.exports = function (res) {
    this.offset = 0;
    this.readable = true;
};

util.inherits(Response, Stream);

var capable = {
    streaming : true,
    status2 : true
};

function parseHeaders (res) {
    var lines = res.getAllResponseHeaders().split(/\r?\n/);
    var headers = {};
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        if (line === '') continue;
        
        var m = line.match(/^([^:]+):\s*(.*)/);
        if (m) {
            var key = m[1].toLowerCase(), value = m[2];
            
            if (headers[key] !== undefined) {
            
                if (isArray(headers[key])) {
                    headers[key].push(value);
                }
                else {
                    headers[key] = [ headers[key], value ];
                }
            }
            else {
                headers[key] = value;
            }
        }
        else {
            headers[line] = true;
        }
    }
    return headers;
}

Response.prototype.getResponse = function (xhr) {
    var respType = String(xhr.responseType).toLowerCase();
    if (respType === 'blob') return xhr.responseBlob || xhr.response;
    if (respType === 'arraybuffer') return xhr.response;
    return xhr.responseText;
}

Response.prototype.getHeader = function (key) {
    return this.headers[key.toLowerCase()];
};

Response.prototype.handle = function (res) {
    if (res.readyState === 2 && capable.status2) {
        try {
            this.statusCode = res.status;
            this.headers = parseHeaders(res);
        }
        catch (err) {
            capable.status2 = false;
        }
        
        if (capable.status2) {
            this.emit('ready');
        }
    }
    else if (capable.streaming && res.readyState === 3) {
        try {
            if (!this.statusCode) {
                this.statusCode = res.status;
                this.headers = parseHeaders(res);
                this.emit('ready');
            }
        }
        catch (err) {}
        
        try {
            this._emitData(res);
        }
        catch (err) {
            capable.streaming = false;
        }
    }
    else if (res.readyState === 4) {
        if (!this.statusCode) {
            this.statusCode = res.status;
            this.emit('ready');
        }
        this._emitData(res);
        
        if (res.error) {
            this.emit('error', this.getResponse(res));
        }
        else this.emit('end');
        
        this.emit('close');
    }
};

Response.prototype._emitData = function (res) {
    var respBody = this.getResponse(res);
    if (respBody.toString().match(/ArrayBuffer/)) {
        this.emit('data', new Uint8Array(respBody, this.offset));
        this.offset = respBody.byteLength;
        return;
    }
    if (respBody.length > this.offset) {
        this.emit('data', respBody.slice(this.offset));
        this.offset = respBody.length;
    }
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

},{"stream":192,"util":196}],171:[function(require,module,exports){
;(function () {

  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  function InvalidCharacterError(message) {
    this.message = message;
  }
  InvalidCharacterError.prototype = new Error;
  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

  // encoder
  // [https://gist.github.com/999166] by [https://github.com/nignag]
  object.btoa || (
  object.btoa = function (input) {
    for (
      // initialize result and counter
      var block, charCode, idx = 0, map = chars, output = '';
      // if the next input index does not exist:
      //   change the mapping table to "="
      //   check if d has no fractional digits
      input.charAt(idx | 0) || (map = '=', idx % 1);
      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
    ) {
      charCode = input.charCodeAt(idx += 3/4);
      if (charCode > 0xFF) {
        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
      }
      block = block << 8 | charCode;
    }
    return output;
  });

  // decoder
  // [https://gist.github.com/1020396] by [https://github.com/atk]
  object.atob || (
  object.atob = function (input) {
    input = input.replace(/=+$/, '');
    if (input.length % 4 == 1) {
      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
    }
    for (
      // initialize result and counters
      var bc = 0, bs, buffer, idx = 0, output = '';
      // get next character
      buffer = input.charAt(idx++);
      // character found in table? initialize bit storage and add its ascii value;
      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
        // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
    ) {
      // try to find character in table (0-63, not found => -1)
      buffer = chars.indexOf(buffer);
    }
    return output;
  });

}());

},{}],172:[function(require,module,exports){
var http = require('http');

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    return http.request.call(this, params, cb);
}

},{"http":168}],173:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],174:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],175:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":176}],176:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],177:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],178:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],179:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],180:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":178,"./encode":179}],181:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":182}],182:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":184,"./_stream_writable":186,"_process":176,"core-util-is":187,"inherits":173}],183:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":185,"core-util-is":187,"inherits":173}],184:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":182,"_process":176,"buffer":26,"core-util-is":187,"events":167,"inherits":173,"isarray":174,"stream":192,"string_decoder/":193,"util":25}],185:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":182,"core-util-is":187,"inherits":173}],186:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":182,"_process":176,"buffer":26,"core-util-is":187,"inherits":173,"stream":192}],187:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":26}],188:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":183}],189:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":182,"./lib/_stream_passthrough.js":183,"./lib/_stream_readable.js":184,"./lib/_stream_transform.js":185,"./lib/_stream_writable.js":186,"stream":192}],190:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":185}],191:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":186}],192:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":167,"inherits":173,"readable-stream/duplex.js":181,"readable-stream/passthrough.js":188,"readable-stream/readable.js":189,"readable-stream/transform.js":190,"readable-stream/writable.js":191}],193:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":26}],194:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var punycode = require('punycode');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a puny coded representation of "domain".
      // It only converts the part of the domain name that
      // has non ASCII characters. I.e. it dosent matter if
      // you call it with a domain that already is in ASCII.
      var domainArray = this.hostname.split('.');
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s = domainArray[i];
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
            'xn--' + punycode.encode(s) : s);
      }
      this.hostname = newOut.join('.');
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  Object.keys(this).forEach(function(k) {
    result[k] = this[k];
  }, this);

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    Object.keys(relative).forEach(function(k) {
      if (k !== 'protocol')
        result[k] = relative[k];
    });

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      Object.keys(relative).forEach(function(k) {
        result[k] = relative[k];
      });
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

function isString(arg) {
  return typeof arg === "string";
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return  arg == null;
}

},{"punycode":177,"querystring":180}],195:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],196:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":195,"_process":176,"inherits":173}],197:[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":198}],198:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],199:[function(require,module,exports){
(function (global){
/**
 * LokiJS
 * @author Joe Minichino <joe.minichino@gmail.com>
 *
 * A lightweight document oriented javascript database
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([], factory);
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = factory();
  } else {
    // Browser globals
    root.loki = factory();
  }
}(this, function () {

  return (function () {
    'use strict';

    var Utils = {
      copyProperties: function (src, dest) {
        var prop;
        for (prop in src) {
          dest[prop] = src[prop];
        }
      }
    };

    // Sort helper that support null and undefined
    function ltHelper(prop1, prop2, equal) {
      if (prop1 === prop2) {
        if (equal) {
          return true;
        } else {
          return false;
        }
      }

      if (prop1 === undefined) {
        return true;
      }
      if (prop2 === undefined) {
        return false;
      }
      if (prop1 === null) {
        return true;
      }
      if (prop2 === null) {
        return false;
      }
      return prop1 < prop2;
    }

    function gtHelper(prop1, prop2, equal) {
      if (prop1 === prop2) {
        if (equal) {
          return true;
        } else {
          return false;
        }
      }

      if (prop1 === undefined) {
        return false;
      }
      if (prop2 === undefined) {
        return true;
      }
      if (prop1 === null) {
        return false;
      }
      if (prop2 === null) {
        return true;
      }
      return prop1 > prop2;
    }

    function sortHelper(prop1, prop2, desc) {
      if (prop1 === prop2) {
        return 0;
      }
      if (desc) {
        if (ltHelper(prop1, prop2)) {
          return 1;
        } else {
          return -1;
        }
      } else {
        if (gtHelper(prop1, prop2)) {
          return 1;
        } else {
          return -1;
        }
      }
    }

    function containsCheckFn(a, b) {
      if (Array.isArray(a)) {
        return function (curr) {
          return a.indexOf(curr) !== -1;
        };
      } else if (typeof a === 'string') {
        return function (curr) {
          return a.indexOf(curr) !== -1;
        };
      } else if (a && typeof a === 'object') {
        return function (curr) {
          return a.hasOwnProperty(curr);
        };
      }
    }

    var LokiOps = {
      // comparison operators
      $eq: function (a, b) {
        return a === b;
      },

      $gt: function (a, b) {
        return gtHelper(a, b);
      },

      $gte: function (a, b) {
        return gtHelper(a, b, true);
      },

      $lt: function (a, b) {
        return ltHelper(a, b);
      },

      $lte: function (a, b) {
        return ltHelper(a, b, true);
      },

      $ne: function (a, b) {
        return a !== b;
      },

      $regex: function (a, b) {
        return b.test(a);
      },

      $in: function (a, b) {
        return b.indexOf(a) > -1;
      },

      $containsAny: function (a, b) {
        var checkFn;

        if (!Array.isArray(b)) {
          b = [b];
        }

        checkFn = containsCheckFn(a, b) || function () {
          return false;
        };

        return b.reduce(function (prev, curr) {
          if (prev) {
            return prev;
          }

          return checkFn(curr);
        }, false);
      },

      $contains: function (a, b) {
        var checkFn;

        if (!Array.isArray(b)) {
          b = [b];
        }

        checkFn = containsCheckFn(a, b) || function () {
          return true;
        };

        return b.reduce(function (prev, curr) {
          if (!prev) {
            return prev;
          }

          return checkFn(curr);
        }, true);
      }
    };

    var operators = {
      '$eq': LokiOps.$eq,
      '$gt': LokiOps.$gt,
      '$gte': LokiOps.$gte,
      '$lt': LokiOps.$lt,
      '$lte': LokiOps.$lte,
      '$ne': LokiOps.$ne,
      '$regex': LokiOps.$regex,
      '$in': LokiOps.$in,
      '$contains': LokiOps.$contains,
      '$containsAny': LokiOps.$containsAny
    };

    function clone(data, method) {
      var cloneMethod = method || 'parse-stringify',
        cloned;
      if (cloneMethod === 'parse-stringify') {
        cloned = JSON.parse(JSON.stringify(data));
      }
      return cloned;
    }

    function localStorageAvailable() {
      try {
        return ('localStorage' in window && window.localStorage !== null);
      } catch (e) {
        return false;
      }
    }


    /**
     * LokiEventEmitter is a minimalist version of EventEmitter. It enables any
     * constructor that inherits EventEmitter to emit events and trigger
     * listeners that have been added to the event through the on(event, callback) method
     *
     * @constructor
     */
    function LokiEventEmitter() {}

    /**
     * @prop Events property is a hashmap, with each property being an array of callbacks
     */
    LokiEventEmitter.prototype.events = {};

    /**
     * @prop asyncListeners - boolean determines whether or not the callbacks associated with each event
     * should happen in an async fashion or not
     * Default is false, which means events are synchronous
     */
    LokiEventEmitter.prototype.asyncListeners = false;

    /**
     * @prop on(eventName, listener) - adds a listener to the queue of callbacks associated to an event
     * @returns {int} the index of the callback in the array of listeners for a particular event
     */
    LokiEventEmitter.prototype.on = function (eventName, listener) {
      var event = this.events[eventName];
      if (!event) {
        event = this.events[eventName] = [];
      }
      event.push(listener);
      return listener;
    };

    /**
     * @propt emit(eventName, data) - emits a particular event
     * with the option of passing optional parameters which are going to be processed by the callback
     * provided signatures match (i.e. if passing emit(event, arg0, arg1) the listener should take two parameters)
     * @param {string} eventName - the name of the event
     * @param {object} data - optional object passed with the event
     */
    LokiEventEmitter.prototype.emit = function (eventName, data) {
      var self = this;
      if (eventName && this.events[eventName]) {
        this.events[eventName].forEach(function (listener) {
          if (self.asyncListeners) {
            setTimeout(function () {
              listener(data);
            }, 1);
          } else {
            listener(data);
          }

        });
      } else {
        throw new Error('No event ' + eventName + ' defined');
      }
    };

    /**
     * @prop remove() - removes the listener at position 'index' from the event 'eventName'
     */
    LokiEventEmitter.prototype.removeListener = function (eventName, listener) {
      if (this.events[eventName]) {
        var listeners = this.events[eventName];
        listeners.splice(listeners.indexOf(listener), 1);
      }
    };

    /**
     * Loki: The main database class
     * @constructor
     * @param {string} filename - name of the file to be saved to
     * @param {object} options - config object
     */
    function Loki(filename, options) {
      this.filename = filename || 'loki.db';
      this.collections = [];

      // persist version of code which created the database to the database.
      // could use for upgrade scenarios
      this.databaseVersion = 1.1;
      this.engineVersion = 1.1;

      // autosave support (disabled by default)
      // pass autosave: true, autosaveInterval: 6000 in options to set 6 second autosave
      this.autosave = false;
      this.autosaveInterval = 5000;
      this.autosaveHandle = null;

      this.options = {};

      // currently keeping persistenceMethod and persistenceAdapter as loki level properties that
      // will not or cannot be deserialized.  You are required to configure persistence every time
      // you instantiate a loki object (or use default environment detection) in order to load the database anyways.

      // persistenceMethod could be 'fs', 'localStorage', or 'adapter'
      // this is optional option param, otherwise environment detection will be used
      // if user passes their own adapter we will force this method to 'adapter' later, so no need to pass method option.
      this.persistenceMethod = null;

      // retain reference to optional (non-serializable) persistenceAdapter 'instance'
      this.persistenceAdapter = null;



      this.events = {
        'init': [],
        'flushChanges': [],
        'close': [],
        'changes': [],
        'warning': []
      };

      var getENV = function () {
        if (typeof window === 'undefined') {
          return 'NODEJS';
        }

        if (typeof global !== 'undefined' && global.window) {
          return 'NODEJS'; //node-webkit
        }

        if (typeof document !== 'undefined') {
          if (document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1) {
            return 'CORDOVA';
          }
          return 'BROWSER';
        }
        return 'CORDOVA';
      };

      // refactored environment detection due to invalid detection for browser environments.
      // if they do not specify an options.env we want to detect env rather than default to nodejs.
      // currently keeping two properties for similar thing (options.env and options.persistenceMethod)
      //   might want to review whether we can consolidate.
      if (options && options.hasOwnProperty('env')) {
        this.ENV = options.env;
      } else {
        this.ENV = getENV();
      }

      // not sure if this is necessary now that i have refactored the line above
      if (this.ENV === 'undefined') {
        this.ENV = 'NODEJS';
      }

      //if (typeof (options) !== 'undefined') {
      this.configureOptions(options, true);
      //}

      this.on('init', this.clearChanges);

    }

    // db class is an EventEmitter
    Loki.prototype = new LokiEventEmitter();

    /**
     * configureOptions - allows reconfiguring database options
     *
     * @param {object} options - configuration options to apply to loki db object
     * @param {boolean} initialConfig - (optional) if this is a reconfig, don't pass this
     */
    Loki.prototype.configureOptions = function (options, initialConfig) {
      var defaultPersistence = {
          'NODEJS': 'fs',
          'BROWSER': 'localStorage',
          'CORDOVA': 'localStorage'
        },
        persistenceMethods = {
          'fs': LokiFsAdapter,
          'localStorage': LokiLocalStorageAdapter
        };

      this.options = {};

      this.persistenceMethod = null;
      // retain reference to optional persistence adapter 'instance'
      // currently keeping outside options because it can't be serialized
      this.persistenceAdapter = null;

      // process the options
      if (typeof (options) !== 'undefined') {
        this.options = options;


        if (this.options.hasOwnProperty('persistenceMethod')) {
          // check if the specified persistence method is known
          if (typeof (persistenceMethods[options.persistenceMethod]) == 'function') {
            this.persistenceMethod = options.persistenceMethod;
            this.persistenceAdapter = new persistenceMethods[options.persistenceMethod]();
          }
          // should be throw an error here, or just fall back to defaults ??
        }

        // if user passes adapter, set persistence mode to adapter and retain persistence adapter instance
        if (this.options.hasOwnProperty('adapter')) {
          this.persistenceMethod = 'adapter';
          this.persistenceAdapter = options.adapter;
        }


        // if they want to load database on loki instantiation, now is a good time to load... after adapter set and before possible autosave initiation
        if (options.hasOwnProperty('autoload') && typeof (initialConfig) !== 'undefined' && initialConfig) {
          // for autoload, let the constructor complete before firing callback
          var self = this;
          setTimeout(function () {
            self.loadDatabase(options, options.autoloadCallback);
          }, 1);
        }

        if (this.options.hasOwnProperty('autosaveInterval')) {
          this.autosaveDisable();
          this.autosaveInterval = parseInt(this.options.autosaveInterval, 10);
        }

        if (this.options.hasOwnProperty('autosave') && this.options.autosave) {
          this.autosaveDisable();
          this.autosave = true;
          this.autosaveEnable();
        }
      } // end of options processing

      // if by now there is no adapter specified by user nor derived from persistenceMethod: use sensible defaults
      if (this.persistenceAdapter === null) {
        this.persistenceMethod = defaultPersistence[this.ENV];
        if (this.persistenceMethod) {
          this.persistenceAdapter = new persistenceMethods[this.persistenceMethod]();
        }
      }

    };

    /**
     * anonym() - shorthand method for quickly creating and populating an anonymous collection.
     *    This collection is not referenced internally so upon losing scope it will be garbage collected.
     *
     *    Example : var results = new loki().anonym(myDocArray).find({'age': {'$gt': 30} });
     *
     * @param {Array} docs - document array to initialize the anonymous collection with
     * @param {Array} indexesArray - (Optional) array of property names to index
     * @returns {Collection} New collection which you can query or chain
     */
    Loki.prototype.anonym = function (docs, indexesArray) {
      var collection = new Collection('anonym', indexesArray);
      collection.insert(docs);
      return collection;
    };

    Loki.prototype.addCollection = function (name, options) {
      var collection = new Collection(name, options);
      this.collections.push(collection);

      return collection;
    };

    Loki.prototype.loadCollection = function (collection) {
      if (!collection.name) {
        throw new Error('Collection must be have a name property to be loaded');
      }
      this.collections.push(collection);
    };

    Loki.prototype.getCollection = function (collectionName) {
      var i,
        len = this.collections.length;

      for (i = 0; i < len; i += 1) {
        if (this.collections[i].name === collectionName) {
          return this.collections[i];
        }
      }

      // no such collection
      this.emit('warning', 'collection ' + collectionName + ' not found');
      return null;
    };

    Loki.prototype.listCollections = function () {

      var i = this.collections.length,
        colls = [];

      while (i--) {
        colls.push({
          name: this.collections[i].name,
          type: this.collections[i].objType,
          count: this.collections[i].data.length
        });
      }
      return colls;
    };

    Loki.prototype.removeCollection = function (collectionName) {
      var i,
        len = this.collections.length;

      for (i = 0; i < len; i += 1) {
        if (this.collections[i].name === collectionName) {
          this.collections.splice(i, 1);
          return;
        }
      }
    };

    Loki.prototype.getName = function () {
      return this.name;
    };

    /**
     * serializeReplacer - used to prevent certain properties from being serialized
     *
     */
    Loki.prototype.serializeReplacer = function (key, value) {
      switch (key) {
      case 'autosaveHandle':
      case 'persistenceAdapter':
      case 'constraints':
        return null;
      default:
        return value;
      }
    };

    // toJson
    Loki.prototype.serialize = function () {
      return JSON.stringify(this, this.serializeReplacer);
    };
    // alias of serialize
    Loki.prototype.toJson = Loki.prototype.serialize;

    /**
     * loadJSON - inflates a loki database from a serialized JSON string
     *
     * @param {string} serializedDb - a serialized loki database string
     * @param {object} options - apply or override collection level settings
     */
    Loki.prototype.loadJSON = function (serializedDb, options) {

      var obj = JSON.parse(serializedDb),
        i = 0,
        len = obj.collections.length,
        coll,
        copyColl,
        clen,
        j;

      this.name = obj.name;

      // restore database version
      this.databaseVersion = 1.0;
      if (obj.hasOwnProperty('databaseVersion')) {
        this.databaseVersion = obj.databaseVersion;
      }

      this.collections = [];

      for (i; i < len; i += 1) {
        coll = obj.collections[i];
        copyColl = this.addCollection(coll.name);

        // load each element individually
        clen = coll.data.length;
        j = 0;
        if (options && options.hasOwnProperty(coll.name)) {

          var loader = options[coll.name].inflate ? options[coll.name].inflate : Utils.copyProperties;

          for (j; j < clen; j++) {
            var collObj = new(options[coll.name].proto)();
            loader(coll.data[j], collObj);
            copyColl.data[j] = collObj;

          }
        } else {

          for (j; j < clen; j++) {
            copyColl.data[j] = coll.data[j];
          }
        }

        copyColl.transactional = coll.transactional;
        copyColl.asyncListeners = coll.asyncListeners;
        copyColl.disableChangesApi = coll.disableChangesApi;
        copyColl.cloneObjects = coll.cloneObjects;

        copyColl.maxId = (coll.data.length === 0) ? 0 : coll.maxId;
        copyColl.idIndex = coll.idIndex;
        // if saved in previous format recover id index out of it
        if (typeof (coll.indices) !== 'undefined') {
          copyColl.idIndex = coll.indices.id;
        }
        if (typeof (coll.binaryIndices) !== 'undefined') {
          copyColl.binaryIndices = coll.binaryIndices;
        }


        copyColl.ensureId();

        // in case they are loading a database created before we added dynamic views, handle undefined
        if (typeof (coll.DynamicViews) === 'undefined') continue;

        // reinflate DynamicViews and attached Resultsets
        for (var idx = 0; idx < coll.DynamicViews.length; idx++) {
          var colldv = coll.DynamicViews[idx];

          var dv = copyColl.addDynamicView(colldv.name, colldv.persistent);
          dv.resultdata = colldv.resultdata;
          dv.resultsdirty = colldv.resultsdirty;
          dv.filterPipeline = colldv.filterPipeline;

          dv.sortCriteria = colldv.sortCriteria;
          dv.sortFunction = null;

          dv.sortDirty = colldv.sortDirty;
          dv.resultset.filteredrows = colldv.resultset.filteredrows;
          dv.resultset.searchIsChained = colldv.resultset.searchIsChained;
          dv.resultset.filterInitialized = colldv.resultset.filterInitialized;

          dv.rematerialize({
            removeWhereFilters: true
          });
        }
      }
    };

    /**
     * close(callback) - emits the close event with an optional callback. Does not actually destroy the db
     * but useful from an API perspective
     */
    Loki.prototype.close = function (callback) {
      // for autosave scenarios, we will let close perform final save (if dirty)
      // For web use, you might call from window.onbeforeunload to shutdown database, saving pending changes
      if (this.autosave) {
        this.autosaveDisable();
        if (this.autosaveDirty()) {
          this.saveDatabase();
        }
      }

      if (callback) {
        this.on('close', callback);
      }
      this.emit('close');
    };

    /**-------------------------+
    | Changes API               |
    +--------------------------*/

    /**
     * The Changes API enables the tracking the changes occurred in the collections since the beginning of the session,
     * so it's possible to create a differential dataset for synchronization purposes (possibly to a remote db)
     */

    /**
     * generateChangesNotification() - takes all the changes stored in each
     * collection and creates a single array for the entire database. If an array of names
     * of collections is passed then only the included collections will be tracked.
     *
     * @param {array} optional array of collection names. No arg means all collections are processed.
     * @returns {array} array of changes
     * @see private method createChange() in Collection
     */
    Loki.prototype.generateChangesNotification = function (arrayOfCollectionNames) {
      function getCollName(coll) {
        return coll.name;
      }
      var changes = [],
        selectedCollections = arrayOfCollectionNames || this.collections.map(getCollName);

      this.collections.forEach(function (coll) {
        if (selectedCollections.indexOf(getCollName(coll)) !== -1) {
          changes = changes.concat(coll.getChanges());
        }
      });
      return changes;
    };

    /**
     * serializeChanges() - stringify changes for network transmission
     * @returns {string} string representation of the changes
     */
    Loki.prototype.serializeChanges = function (collectionNamesArray) {
      return JSON.stringify(this.generateChangesNotification(collectionNamesArray));
    };

    /**
     * clearChanges() - clears all the changes in all collections.
     */
    Loki.prototype.clearChanges = function () {
      this.collections.forEach(function (coll) {
        if (coll.flushChanges) {
          coll.flushChanges();
        }
      });
    };

    /*------------------+
    | PERSISTENCE       |
    -------------------*/


    /** there are two build in persistence adapters for internal use
     * fs             for use in Nodejs type environments
     * localStorage   for use in browser environment
     * defined as helper classes here so its easy and clean to use
     */

    /**
     * constructor for fs
     */
    function LokiFsAdapter() {
      this.fs = require('fs');
    }

    /**
     * loadDatabase() - Load data from file, will throw an error if the file does not exist
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     */
    LokiFsAdapter.prototype.loadDatabase = function loadDatabase(dbname, callback) {
      this.fs.readFile(dbname, {
        encoding: 'utf8'
      }, function readFileCallback(err, data) {
        if (err) {
          callback(new Error(err));
        } else {
          callback(data);
        }
      });
    };

    /**
     * saveDatabase() - save data to file, will throw an error if the file can't be saved
     * might want to expand this to avoid dataloss on partial save
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     */
    LokiFsAdapter.prototype.saveDatabase = function saveDatabase(dbname, dbstring, callback) {
      this.fs.writeFile(dbname, dbstring, callback);
    };


    /**
     * constructor for local storage
     */
    function LokiLocalStorageAdapter() {}

    /**
     * loadDatabase() - Load data from localstorage
     * @param {string} dbname - the name of the database to load
     * @param {function} callback - the callback to handle the result
     */
    LokiLocalStorageAdapter.prototype.loadDatabase = function loadDatabase(dbname, callback) {
      if (localStorageAvailable()) {
        callback(localStorage.getItem(dbname));
      } else {
        callback(new Error('localStorage is not available'));
      }
    };

    /**
     * saveDatabase() - save data to localstorage, will throw an error if the file can't be saved
     * might want to expand this to avoid dataloss on partial save
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     */
    LokiLocalStorageAdapter.prototype.saveDatabase = function saveDatabase(dbname, dbstring, callback) {
      if (localStorageAvailable()) {
        localStorage.setItem(dbname, dbstring);
        callback(null);
      } else {
        callback(new Error('localStorage is not available'));
      }
    };

    /**
     * loadDatabase - Handles loading from file system, local storage, or adapter (indexeddb)
     *    This method utilizes loki configuration options (if provided) to determine which
     *    persistence method to use, or environment detection (if configuration was not provided).
     *
     * @param {object} options - not currently used (remove or allow overrides?)
     * @param {function} callback - (Optional) user supplied async callback / error handler
     */
    Loki.prototype.loadDatabase = function (options, callback) {
      var cFun = callback || function (err, data) {
          if (err) {
            throw err;
          }
          return;
        },
        self = this;

      // the persistenceAdapter should be present if all is ok, but check to be sure.
      if (this.persistenceAdapter !== null) {

        this.persistenceAdapter.loadDatabase(this.filename, function loadDatabaseCallback(dbString) {
          if (typeof (dbString) === 'string') {
            self.loadJSON(dbString, options || {});
            cFun(null);
          } else {
            console.warn('lokijs loadDatabase : Database not found');
            if (typeof (dbString) === "object") {
              cFun(dbString);
            } else {
              cFun('Database not found');
            }
          }
        });

      } else {
        cFun(new Error('persistenceAdapter not configured'));
      }
    };

    /**
     * saveDatabase - Handles saving to file system, local storage, or adapter (indexeddb)
     *    This method utilizes loki configuration options (if provided) to determine which
     *    persistence method to use, or environment detection (if configuration was not provided).
     *
     * @param {object} options - not currently used (remove or allow overrides?)
     * @param {function} callback - (Optional) user supplied async callback / error handler
     */
    Loki.prototype.saveDatabase = function (callback) {
      var cFun = callback || function (err) {
          if (err) {
            throw err;
          }
          return;
        },
        self = this;

      // the persistenceAdapter should be present if all is ok, but check to be sure.
      if (this.persistenceAdapter !== null) {
        this.persistenceAdapter.saveDatabase(this.filename, self.serialize(), function saveDatabasecallback() {
          // for now assume that save went ok and reset dirty flags
          // in future we may move this into each if block if no exceptions occur.
          self.autosaveClearFlags();
          cFun(null);
        });
      } else {
        cFun(new Error('persistenceAdapter not configured'));
      }

    };

    // alias
    Loki.prototype.save = Loki.prototype.saveDatabase;

    /**
     * autosaveDirty - check whether any collections are 'dirty' meaning we need to save (entire) database
     *
     * @returns {boolean} - true if database has changed since last autosave, false if not.
     */
    Loki.prototype.autosaveDirty = function () {
      for (var idx = 0; idx < this.collections.length; idx++) {
        if (this.collections[idx].dirty) {
          return true;
        }
      }

      return false;
    };

    /**
     * autosaveClearFlags - resets dirty flags on all collections.
     *    Called from saveDatabase() after db is saved.
     *
     */
    Loki.prototype.autosaveClearFlags = function () {
      for (var idx = 0; idx < this.collections.length; idx++) {
        this.collections[idx].dirty = false;
      }
    };

    /**
     * autosaveEnable - begin a javascript interval to periodically save the database.
     *
     */
    Loki.prototype.autosaveEnable = function () {
      this.autosave = true;

      var delay = 5000,
        self = this;

      if (typeof (this.autosaveInterval) !== 'undefined' && this.autosaveInterval !== null) {
        delay = this.autosaveInterval;
      }

      this.autosaveHandle = setInterval(function autosaveHandleInterval() {
        // use of dirty flag will need to be hierarchical since mods are done at collection level with no visibility of 'db'
        // so next step will be to implement collection level dirty flags set on insert/update/remove
        // along with loki level isdirty() function which iterates all collections to see if any are dirty

        if (self.autosaveDirty()) {
          self.saveDatabase();
        }
      }, delay);
    };

    /**
     * autosaveDisable - stop the autosave interval timer.
     *
     */
    Loki.prototype.autosaveDisable = function () {
      if (typeof (this.autosaveHandle) !== 'undefined' && this.autosaveHandle !== null) {
        clearInterval(this.autosaveHandle);
        this.autosaveHandle = null;
      }
    };


    /**
     * Resultset class allowing chainable queries.  Intended to be instanced internally.
     *    Collection.find(), Collection.where(), and Collection.chain() instantiate this.
     *
     *    Example:
     *    mycollection.chain()
     *      .find({ 'doors' : 4 })
     *      .where(function(obj) { return obj.name === 'Toyota' })
     *      .data();
     *
     * @constructor
     * @param {Collection} collection - The collection which this Resultset will query against.
     * @param {string} queryObj - Optional mongo-style query object to initialize resultset with.
     * @param {function} queryFunc - Optional javascript filter function to initialize resultset with.
     * @param {bool} firstOnly - Optional boolean used by collection.findOne().
     */
    function Resultset(collection, queryObj, queryFunc, firstOnly) {
      // retain reference to collection we are querying against
      this.collection = collection;

      // if chain() instantiates with null queryObj and queryFunc, so we will keep flag for later
      this.searchIsChained = (!queryObj && !queryFunc);
      this.filteredrows = [];
      this.filterInitialized = false;

      // if user supplied initial queryObj or queryFunc, apply it
      if (typeof (queryObj) !== "undefined" && queryObj !== null) {
        return this.find(queryObj, firstOnly);
      }
      if (typeof (queryFunc) !== "undefined" && queryFunc !== null) {
        return this.where(queryFunc);
      }

      // otherwise return unfiltered Resultset for future filtering
      return this;
    }

    /**
     * toJSON() - Override of toJSON to avoid circular references
     *
     */
    Resultset.prototype.toJSON = function () {
      var copy = this.copy();
      copy.collection = null;
      return copy;
    };

    /**
     * limit() - Allows you to limit the number of documents passed to next chain operation.
     *    A resultset copy() is made to avoid altering original resultset.
     *
     * @param {int} qty - The number of documents to return.
     * @returns {Resultset} Returns a copy of the resultset, limited by qty, for subsequent chain ops.
     */
    Resultset.prototype.limit = function (qty) {
      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = Object.keys(this.collection.data);
      }

      var rscopy = this.copy();

      rscopy.filteredrows = rscopy.filteredrows.slice(0, qty);

      return rscopy;
    };

    /**
     * offset() - Used for skipping 'pos' number of documents in the resultset.
     *
     * @param {int} pos - Number of documents to skip; all preceding documents are filtered out.
     * @returns {Resultset} Returns a copy of the resultset, containing docs starting at 'pos' for subsequent chain ops.
     */
    Resultset.prototype.offset = function (pos) {
      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = Object.keys(this.collection.data);
      }

      var rscopy = this.copy();

      rscopy.filteredrows = rscopy.filteredrows.splice(pos, rscopy.filteredrows.length);

      return rscopy;
    };

    /**
     * copy() - To support reuse of resultset in branched query situations.
     *
     * @returns {Resultset} Returns a copy of the resultset (set) but the underlying document references will be the same.
     */
    Resultset.prototype.copy = function () {
      var result = new Resultset(this.collection, null, null);

      result.filteredrows = this.filteredrows.slice();
      result.filterInitialized = this.filterInitialized;

      return result;
    };

    // add branch() as alias of copy()
    Resultset.prototype.branch = Resultset.prototype.copy;

    /**
     * sort() - User supplied compare function is provided two documents to compare. (chainable)
     *    Example:
     *    rslt.sort(function(obj1, obj2) {
     *      if (obj1.name === obj2.name) return 0;
     *      if (obj1.name > obj2.name) return 1;
     *      if (obj1.name < obj2.name) return -1;
     *    });
     *
     * @param {function} comparefun - A javascript compare function used for sorting.
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     */
    Resultset.prototype.sort = function (comparefun) {
      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = Object.keys(this.collection.data);
      }

      var wrappedComparer =
        (function (userComparer, rslt) {
          return function (a, b) {
            var obj1 = rslt.collection.data[a];
            var obj2 = rslt.collection.data[b];

            return userComparer(obj1, obj2);
          };
        })(comparefun, this);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * simplesort() - Simpler, loose evaluation for user to sort based on a property name. (chainable)
     *
     * @param {string} propname - name of property to sort by.
     * @param {bool} isdesc - (Optional) If true, the property will be sorted in descending order
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     */
    Resultset.prototype.simplesort = function (propname, isdesc) {
      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = Object.keys(this.collection.data);
      }

      if (typeof (isdesc) === 'undefined') {
        isdesc = false;
      }

      var wrappedComparer =
        (function (prop, desc, rslt) {
          return function (a, b) {
            var obj1 = rslt.collection.data[a];
            var obj2 = rslt.collection.data[b];

            return sortHelper(obj1[prop], obj2[prop], desc);

          };
        })(propname, isdesc, this);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * compoundeval() - helper method for compoundsort(), performing individual object comparisons
     *
     * @param {array} properties - array of property names, in order, by which to evaluate sort order
     * @param {object} obj1 - first object to compare
     * @param {object} obj2 - second object to compare
     * @returns {integer} 0, -1, or 1 to designate if identical (sortwise) or which should be first
     */
    Resultset.prototype.compoundeval = function (properties, obj1, obj2) {
      var propertyCount = properties.length;

      if (propertyCount === 0) {
        throw new Error("Invalid call to compoundeval, need at least one property");
      }

      // decode property, whether just a string property name or subarray [propname, isdesc]
      var isdesc = false;
      var firstProp = properties[0];
      if (typeof (firstProp) !== 'string') {
        if (Array.isArray(firstProp)) {
          isdesc = firstProp[1];
          firstProp = firstProp[0];
        }
      }

      if (obj1[firstProp] === obj2[firstProp]) {
        if (propertyCount === 1) {
          return 0;
        } else {
          return this.compoundeval(properties.slice(1), obj1, obj2, isdesc);
        }
      }

      return sortHelper(obj1[firstProp], obj2[firstProp], isdesc);
    };

    /**
     * compoundsort() - Allows sorting a resultset based on multiple columns.
     *    Example : rs.compoundsort(['age', 'name']); to sort by age and then name (both ascending)
     *    Example : rs.compoundsort(['age', ['name', true]); to sort by age (ascending) and then by name (descending)
     *
     * @param {array} properties - array of property names or subarray of [propertyname, isdesc] used evaluate sort order
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     */
    Resultset.prototype.compoundsort = function (properties) {

      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = Object.keys(this.collection.data);
      }

      var wrappedComparer =
        (function (props, rslt) {
          return function (a, b) {
            var obj1 = rslt.collection.data[a];
            var obj2 = rslt.collection.data[b];

            return rslt.compoundeval(props, obj1, obj2);
          };
        })(properties, this);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * calculateRange() - Binary Search utility method to find range/segment of values matching criteria.
     *    this is used for collection.find() and first find filter of resultset/dynview
     *    slightly different than get() binary search in that get() hones in on 1 value,
     *    but we have to hone in on many (range)
     * @param {string} op - operation, such as $eq
     * @param {string} prop - name of property to calculate range for
     * @param {object} val - value to use for range calculation.
     * @returns {array} [start, end] index array positions
     */
    Resultset.prototype.calculateRange = function (op, prop, val) {
      var rcd = this.collection.data;
      var index = this.collection.binaryIndices[prop].values;
      var min = 0;
      var max = index.length - 1;
      var mid = null;
      var lbound = 0;
      var ubound = index.length - 1;

      // when no documents are in collection, return empty range condition
      if (rcd.length === 0) {
        return [0, -1];
      }

      var minVal = rcd[index[min]][prop];
      var maxVal = rcd[index[max]][prop];

      // if value falls outside of our range return [0, -1] to designate no results
      switch (op) {
      case '$eq':
        if (ltHelper(val, minVal) || gtHelper(val, maxVal)) {
          return [0, -1];
        }
        break;
      case '$gt':
        if (gtHelper(val, maxVal, true)) {
          return [0, -1];
        }
        break;
      case '$gte':
        if (gtHelper(val, maxVal)) {
          return [0, -1];
        }
        break;
      case '$lt':
        if (ltHelper(val, minVal, true)) {
          return [0, -1];
        }
        break;
      case '$lte':
        if (ltHelper(val, minVal)) {
          return [0, -1];
        }
        break;
      }

      // hone in on start position of value
      while (min < max) {
        mid = Math.floor((min + max) / 2);

        if (ltHelper(rcd[index[mid]][prop], val)) {
          min = mid + 1;
        } else {
          max = mid;
        }
      }

      lbound = min;

      min = 0;
      max = index.length - 1;

      // hone in on end position of value
      while (min < max) {
        mid = Math.floor((min + max) / 2);

        if (ltHelper(val, rcd[index[mid]][prop])) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }

      ubound = max;

      var lval = rcd[index[lbound]][prop];
      var uval = rcd[index[ubound]][prop];

      switch (op) {
      case '$eq':
        if (lval !== val) {
          return [0, -1];
        }
        if (uval !== val) {
          ubound--;
        }

        return [lbound, ubound];

      case '$gt':
        if (ltHelper(uval, val, true)) {
          return [0, -1];
        }

        return [ubound, rcd.length - 1];

      case '$gte':
        if (ltHelper(lval, val)) {
          return [0, -1];
        }

        return [lbound, rcd.length - 1];

      case '$lt':
        if (lbound === 0 && ltHelper(lval, val)) {
          return [0, 0];
        }
        return [0, lbound - 1];

      case '$lte':
        if (uval !== val) {
          ubound--;
        }

        if (ubound === 0 && ltHelper(uval, val)) {
          return [0, 0];
        }
        return [0, ubound];

      default:
        return [0, rcd.length - 1];
      }
    };

    /**
     * findOr() - oversee the operation of OR'ed query expressions.
     *    OR'ed expression evaluation runs each expression individually against the full collection,
     *    and finally does a set OR on each expression's results.
     *    Each evaluation can utilize a binary index to prevent multiple linear array scans.
     *
     * @param {array} expressionArray - array of expressions
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.findOr = function (expressionArray) {
      var fri = 0,
        ei = 0,
        fr = null,
        docset = [],
        expResultset = null;

      // if filter is already initialized we need to query against only those items already in filter.
      // This means no index utilization for fields, so hopefully its filtered to a smallish filteredrows.
      if (this.filterInitialized) {
        docset = [];

        for (ei = 0; ei < expressionArray.length; ei++) {
          // we need to branch existing query to run each filter separately and combine results
          expResultset = this.branch();
          expResultset.find(expressionArray[ei]);
          expResultset.data();

          // add any document 'hits'
          fr = expResultset.filteredrows;
          for (fri = 0; fri < fr.length; fri++) {
            if (docset.indexOf(fr[fri]) === -1) {
              docset.push(fr[fri]);
            }
          }
        }

        this.filteredrows = docset;
      } else {
        for (ei = 0; ei < expressionArray.length; ei++) {
          // we will let each filter run independently against full collection and mashup document hits later
          expResultset = this.collection.chain();
          expResultset.find(expressionArray[ei]);
          expResultset.data();

          // add any document 'hits'
          fr = expResultset.filteredrows;
          for (fri = 0; fri < fr.length; fri++) {
            if (this.filteredrows.indexOf(fr[fri]) === -1) {
              this.filteredrows.push(fr[fri]);
            }
          }
        }
      }

      this.filterInitialized = true;

      // possibly sort indexes
      return this;
    };

    /**
     * findAnd() - oversee the operation of AND'ed query expressions.
     *    AND'ed expression evaluation runs each expression progressively against the full collection,
     *    internally utilizing existing chained resultset functionality.
     *    Only the first filter can utilize a binary index.
     *
     * @param {array} expressionArray - array of expressions
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.findAnd = function (expressionArray) {
      // we have already implementing method chaining in this (our Resultset class)
      // so lets just progressively apply user supplied and filters
      for (var i = 0; i < expressionArray.length; i++) {
        this.find(expressionArray[i]);
      }

      return this;
    };

    /**
     * dotSubScan - helper function used for dot notation queries.
     */
    Resultset.prototype.dotSubScan = function (root, property, fun, value) {
      var arrayRef = null;
      var pathIndex, subIndex;
      var paths = property.split('.');
      var path;

      for (pathIndex = 0; pathIndex < paths.length; pathIndex++) {
        path = paths[pathIndex];

        // foreach already detected parent was array so this must be where we iterate
        if (arrayRef) {
          // iterate all sub-array items to see if any yield hits
          for (subIndex = 0; subIndex < arrayRef.length; subIndex++) {
            if (fun(arrayRef[subIndex][path], value)) {
              return true;
            }
          }
        }
        // else not yet determined if subarray scan is involved
        else {
          root = root[path];
          if (Array.isArray(root)) {
            arrayRef = root;
          }
        }
      }

      // made it this far so must be dot notation on non-array property
      return fun(root, value);
    };

    /**
     * find() - Used for querying via a mongo-style query object.
     *
     * @param {object} query - A mongo-style query object used for filtering current results.
     * @param {boolean} firstOnly - (Optional) Used by collection.findOne()
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.find = function (query, firstOnly) {
      if (this.collection.data.length === 0) {
        if (this.searchIsChained) {
          this.filteredrows = [];
          this.filterInitialized = true;
          return this;
        }
        return [];
      }


      var queryObject = query || 'getAll',
        property,
        value,
        operator,
        p,
        key,
        searchByIndex = false,
        result = [],
        index = null,
        // comparison function
        fun,
        // collection data
        t,
        // collection data length
        i,
        emptyQO = true;

      // if this was note invoked via findOne()
      firstOnly = firstOnly || false;

      // if passed in empty object {}, interpret as 'getAll'
      // more performant than object.keys
      for (p in queryObject) {
        emptyQO = false;
        break;
      }
      if (emptyQO) {
        queryObject = 'getAll';
      }

      // apply no filters if they want all
      if (queryObject === 'getAll') {
        // chained queries can just do coll.chain().data() but let's
        // be versatile and allow this also coll.chain().find().data()
        if (this.searchIsChained) {
          this.filteredrows = Object.keys(this.collection.data);
          return this;
        }
        // not chained, so return collection data array
        else {
          return this.collection.data;
        }
      }

      // if user is deep querying the object such as find('name.first': 'odin')
      var usingDotNotation = false;

      for (p in queryObject) {
        if (queryObject.hasOwnProperty(p)) {
          property = p;

          // injecting $and and $or expression tree evaluation here.
          if (p === '$and') {
            if (this.searchIsChained) {
              this.findAnd(queryObject[p]);

              // for chained find with firstonly,
              if (firstOnly && this.filteredrows.length > 1) {
                this.filteredrows = this.filteredrows.slice(0, 1);
              }

              return this;
            } else {
              // our $and operation internally chains filters
              result = this.collection.chain().findAnd(queryObject[p]).data();

              // if this was coll.findOne() return first object or empty array if null
              // since this is invoked from a constructor we can't return null, so we will
              // make null in coll.findOne();
              if (firstOnly) {
                if (result.length === 0) return [];

                return result[0];
              }

              // not first only return all results
              return result;
            }
          }

          if (p === '$or') {
            if (this.searchIsChained) {
              this.findOr(queryObject[p]);

              if (firstOnly && this.filteredrows.length > 1) {
                this.filteredrows = this.filteredrows.slice(0, 1);
              }

              return this;
            } else {
              // call out to helper function to determine $or results
              result = this.collection.chain().findOr(queryObject[p]).data();

              if (firstOnly) {
                if (result.length === 0) return [];

                return result[0];
              }

              // not first only return all results
              return result;
            }
          }

          if (p.indexOf('.') != -1) {
            usingDotNotation = true;
          }
          if (typeof queryObject[p] !== 'object') {
            operator = '$eq';
            value = queryObject[p];
          } else if (typeof queryObject[p] === 'object') {
            for (key in queryObject[p]) {
              if (queryObject[p].hasOwnProperty(key)) {
                operator = key;
                value = queryObject[p][key];
              }
            }
          } else {
            throw 'Do not know what you want to do.';
          }
          break;
        }
      }

      // for regex ops, precompile
      if (operator === '$regex') value = new RegExp(value);

      if (this.collection.data === null) {
        throw new TypeError();
      }

      // if an index exists for the property being queried against, use it
      // for now only enabling for non-chained query (who's set of docs matches index)
      // or chained queries where it is the first filter applied and prop is indexed
      if ((!this.searchIsChained || (this.searchIsChained && !this.filterInitialized)) &&
        operator !== '$ne' && operator !== '$regex' && operator !== '$contains' && operator !== '$containsAny' && operator !== '$in' && this.collection.binaryIndices.hasOwnProperty(property)) {
        // this is where our lazy index rebuilding will take place
        // basically we will leave all indexes dirty until we need them
        // so here we will rebuild only the index tied to this property
        // ensureIndex() will only rebuild if flagged as dirty since we are not passing force=true param
        this.collection.ensureIndex(property);

        searchByIndex = true;
        index = this.collection.binaryIndices[property];
      }

      // the comparison function
      fun = operators[operator];

      // Query executed differently depending on :
      //    - whether it is chained or not
      //    - whether the property being queried has an index defined
      //    - if chained, we handle first pass differently for initial filteredrows[] population
      //
      // For performance reasons, each case has its own if block to minimize in-loop calculations

      // If not a chained query, bypass filteredrows and work directly against data
      if (!this.searchIsChained) {
        if (!searchByIndex) {
          t = this.collection.data;
          i = t.length;

          if (firstOnly) {
            while (i--) {
              if (fun(t[i][property], value)) {
                return (t[i]);
              }
            }

            return [];
          } else {
            // if using dot notation then treat property as keypath such as 'name.first'.
            // currently supporting dot notation for non-indexed conditions only
            if (usingDotNotation) {
              while (i--) {
                if (this.dotSubScan(t[i], property, fun, value)) {
                  result.push(t[i]);
                }
              }
            } else {
              while (i--) {
                if (fun(t[i][property], value)) {
                  result.push(t[i]);
                }
              }
            }
          }
        } else {
          // searching by binary index via calculateRange() utility method
          t = this.collection.data;

          var seg = this.calculateRange(operator, property, value, this);

          // not chained so this 'find' was designated in Resultset constructor
          // so return object itself
          if (firstOnly) {
            if (seg[1] !== -1) {
              return t[index.values[seg[0]]];
            }

            return [];
          }

          for (i = seg[0]; i <= seg[1]; i++) {
            result.push(t[index.values[i]]);
          }

          this.filteredrows = result;
        }

        // not a chained query so return result as data[]
        return result;
      }
      // Otherwise this is a chained query
      else {
        // If the filteredrows[] is already initialized, use it
        if (this.filterInitialized) {
          // not searching by index
          if (!searchByIndex) {
            t = this.collection.data;
            i = this.filteredrows.length;

            // currently supporting dot notation for non-indexed conditions only
            if (usingDotNotation) {
              while (i--) {
                if (this.dotSubScan(t[this.filteredrows[i]], property, fun, value)) {
                  result.push(this.filteredrows[i]);
                }
              }
            } else {
              while (i--) {
                if (fun(t[this.filteredrows[i]][property], value)) {
                  result.push(this.filteredrows[i]);
                }
              }
            }
          } else {
            // search by index
            t = index;
            i = this.filteredrows.length;
            while (i--) {
              if (fun(t[this.filteredrows[i]], value)) {
                result.push(this.filteredrows[i]);
              }
            }
          }

          this.filteredrows = result;

          return this;
        }
        // first chained query so work against data[] but put results in filteredrows
        else {
          // if not searching by index
          if (!searchByIndex) {
            t = this.collection.data;
            i = t.length;

            if (usingDotNotation) {
              while (i--) {
                if (this.dotSubScan(t[i], property, fun, value)) {
                  result.push(i);
                }
              }
            } else {
              while (i--) {
                if (fun(t[i][property], value)) {
                  result.push(i);
                }
              }
            }
          } else {
            // search by index
            t = this.collection.data;
            var segm = this.calculateRange(operator, property, value, this);

            for (var idx = segm[0]; idx <= segm[1]; idx++) {
              result.push(index.values[idx]);
            }

            this.filteredrows = result;
          }

          this.filteredrows = result;
          this.filterInitialized = true; // next time work against filteredrows[]

          return this;
        }

      }
    };


    /**
     * where() - Used for filtering via a javascript filter function.
     *
     * @param {function} fun - A javascript function used for filtering current results by.
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.where = function (fun) {

      var viewFunction,
        result = [];

      if ('function' === typeof fun) {
        viewFunction = fun;
      } else {
        throw 'Argument is not a stored view or a function';
      }
      try {
        // if not a chained query then run directly against data[] and return object []
        if (!this.searchIsChained) {
          var i = this.collection.data.length;

          while (i--) {
            if (viewFunction(this.collection.data[i]) === true) {
              result.push(this.collection.data[i]);
            }
          }

          // not a chained query so returning result as data[]
          return result;
        }
        // else chained query, so run against filteredrows
        else {
          // If the filteredrows[] is already initialized, use it
          if (this.filterInitialized) {
            var j = this.filteredrows.length;

            while (j--) {
              if (viewFunction(this.collection.data[this.filteredrows[j]]) === true) {
                result.push(this.filteredrows[j]);
              }
            }

            this.filteredrows = result;

            return this;
          }
          // otherwise this is initial chained op, work against data, push into filteredrows[]
          else {
            var k = this.collection.data.length;

            while (k--) {
              if (viewFunction(this.collection.data[k]) === true) {
                result.push(k);
              }
            }

            this.filteredrows = result;
            this.filterInitialized = true;

            return this;
          }
        }
      } catch (err) {
        throw err;
      }
    };

    /**
     * data() - Terminates the chain and returns array of filtered documents
     *
     * @returns {array} Array of documents in the resultset
     */
    Resultset.prototype.data = function () {
      var result = [];

      // if this is chained resultset with no filters applied, just return collection.data
      if (this.searchIsChained && !this.filterInitialized) {
        if (this.filteredrows.length === 0) {
          return this.collection.data;
        } else {
          // filteredrows must have been set manually, so use it
          this.filterInitialized = true;
        }
      }

      var data = this.collection.data,
        fr = this.filteredrows;

      var i,
        len = this.filteredrows.length;

      for (i = 0; i < len; i++) {
        result.push(data[fr[i]]);
      }
      return result;
    };

    /**
     * update() - used to run an update operation on all documents currently in the resultset.
     *
     * @param {function} updateFunction - User supplied updateFunction(obj) will be executed for each document object.
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.update = function (updateFunction) {

      if (typeof (updateFunction) !== "function") {
        throw 'Argument is not a function';
      }

      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = Object.keys(this.collection.data);
      }

      var len = this.filteredrows.length,
        rcd = this.collection.data;

      for (var idx = 0; idx < len; idx++) {
        // pass in each document object currently in resultset to user supplied updateFunction
        updateFunction(rcd[this.filteredrows[idx]]);

        // notify collection we have changed this object so it can update meta and allow DynamicViews to re-evaluate
        this.collection.update(rcd[this.filteredrows[idx]]);
      }

      return this;
    };

    /**
     * remove() - removes all document objects which are currently in resultset from collection (as well as resultset)
     *
     * @returns {Resultset} this (empty) resultset for further chain ops.
     */
    Resultset.prototype.remove = function () {

      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = Object.keys(this.collection.data);
      }

      var len = this.filteredrows.length;

      for (var idx = 0; idx < len; idx++) {
        this.collection.remove(this.filteredrows[idx]);
      }

      this.filteredrows = [];

      return this;
    };

    /**
     * mapReduce() - data transformation via user supplied functions
     *
     * @param {function} mapFunction - this function accepts a single document for you to transform and return
     * @param {function} reduceFunction - this function accepts many (array of map outputs) and returns single value
     * @returns The output of your reduceFunction
     */
    Resultset.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data().map(mapFunction));
      } catch (err) {
        throw err;
      }
    };

    /**
     * eqJoin() - Left joining two sets of data. Join keys can be defined or calculated properties
     * eqJoin expects the right join key values to be unique.  Otherwise left data will be joined on the last joinData object with that key
     * @param {Array} joinData - Data array to join to.
     * @param {String,function} leftJoinKey - Property name in this result set to join on or a function to produce a value to join on
     * @param {String,function} rightJoinKey - Property name in the joinData to join on or a function to produce a value to join on
     * @param {function} (optional) mapFun - A function that receives each matching pair and maps them into output objects - function(left,right){return joinedObject}
     * @returns {Resultset} A resultset with data in the format [{left: leftObj, right: rightObj}]
     */
    Resultset.prototype.eqJoin = function (joinData, leftJoinKey, rightJoinKey, mapFun) {

      var leftData = [],
        leftDataLength,
        rightData = [],
        rightDataLength,
        key,
        result = [],
        obj,
        leftKeyisFunction = typeof leftJoinKey === 'function',
        rightKeyisFunction = typeof rightJoinKey === 'function',
        joinMap = {};

      //get the left data
      leftData = this.data();
      leftDataLength = leftData.length;

      //get the right data
      if (joinData instanceof Resultset) {
        rightData = joinData.data();
      } else if (Array.isArray(joinData)) {
        rightData = joinData;
      } else {
        throw new TypeError('joinData needs to be an array or result set');
      }
      rightDataLength = rightData.length;

      //construct a lookup table

      for (var i = 0; i < rightDataLength; i++) {
        key = rightKeyisFunction ? rightJoinKey(rightData[i]) : rightData[i][rightJoinKey];
        joinMap[key] = rightData[i];
      }

      if (!mapFun) {
        mapFun = function (left, right) {
          return {
            left: left,
            right: right
          };
        };
      }

      //Run map function over each object in the resultset
      for (var j = 0; j < leftDataLength; j++) {
        key = leftKeyisFunction ? leftJoinKey(leftData[j]) : leftData[j][leftJoinKey];
        result.push(mapFun(leftData[j], joinMap[key] || {}));
      }

      //return return a new resultset with no filters
      this.collection = new Collection('joinData');
      this.collection.insert(result);
      this.filteredrows = [];
      this.filterInitialized = false;

      return this;
    };

    Resultset.prototype.map = function (mapFun) {
      var data = this.data().map(mapFun);
      //return return a new resultset with no filters
      this.collection = new Collection('mappedData');
      this.collection.insert(data);
      this.filteredrows = [];
      this.filterInitialized = false;

      return this;
    };

    /**
     * DynamicView class is a versatile 'live' view class which can have filters and sorts applied.
     *    Collection.addDynamicView(name) instantiates this DynamicView object and notifies it
     *    whenever documents are add/updated/removed so it can remain up-to-date. (chainable)
     *
     *    Examples:
     *    var mydv = mycollection.addDynamicView('test');  // default is non-persistent
     *    mydv.applyWhere(function(obj) { return obj.name === 'Toyota'; });
     *    mydv.applyFind({ 'doors' : 4 });
     *    var results = mydv.data();
     *
     * @constructor
     * @param {Collection} collection - A reference to the collection to work against
     * @param {string} name - The name of this dynamic view
     * @param {boolean} persistent - (Optional) If true, the results will be copied into an internal array for read efficiency or binding to.
     */
    function DynamicView(collection, name, persistent) {
      this.collection = collection;
      this.name = name;

      this.persistent = false;
      if (typeof (persistent) !== 'undefined') this.persistent = persistent;

      this.resultset = new Resultset(collection);
      this.resultdata = [];
      this.resultsdirty = false;

      this.cachedresultset = null;

      // keep ordered filter pipeline
      this.filterPipeline = [];

      // sorting member variables
      // we only support one active search, applied using applySort() or applySimpleSort()
      this.sortFunction = null;
      this.sortCriteria = null;
      this.sortDirty = false;

      // for now just have 1 event for when we finally rebuilt lazy view
      // once we refactor transactions, i will tie in certain transactional events

      this.events = {
        'rebuild': []
      };
    }

    DynamicView.prototype = new LokiEventEmitter();


    /**
     * rematerialize() - intended for use immediately after deserialization (loading)
     *    This will clear out and reapply filterPipeline ops, recreating the view.
     *    Since where filters do not persist correctly, this method allows
     *    restoring the view to state where user can re-apply those where filters.
     *
     * @param {Object} options - (Optional) allows specification of 'removeWhereFilters' option
     * @returns {DynamicView} This dynamic view for further chained ops.
     */
    DynamicView.prototype.rematerialize = function (options) {
      var fpl,
        fpi,
        idx;

      options = options || {};

      this.resultdata = [];
      this.resultsdirty = true;
      this.resultset = new Resultset(this.collection);

      if (this.sortFunction || this.sortCriteria) {
        this.sortDirty = true;
      }

      if (options.hasOwnProperty('removeWhereFilters')) {
        // for each view see if it had any where filters applied... since they don't
        // serialize those functions lets remove those invalid filters
        fpl = this.filterPipeline.length;
        fpi = fpl;
        while (fpi--) {
          if (this.filterPipeline[fpi].type === 'where') {
            if (fpi !== this.filterPipeline.length - 1) {
              this.filterPipeline[fpi] = this.filterPipeline[this.filterPipeline.length - 1];
            }

            this.filterPipeline.length--;
          }
        }
      }

      // back up old filter pipeline, clear filter pipeline, and reapply pipeline ops
      var ofp = this.filterPipeline;
      this.filterPipeline = [];

      // now re-apply 'find' filterPipeline ops
      fpl = ofp.length;
      for (idx = 0; idx < fpl; idx++) {
        this.applyFind(ofp[idx].val);
      }

      // during creation of unit tests, i will remove this forced refresh and leave lazy
      this.data();

      // emit rebuild event in case user wants to be notified
      this.emit('rebuild', this);

      return this;
    };

    /**
     * branchResultset() - Makes a copy of the internal resultset for branched queries.
     *    Unlike this dynamic view, the branched resultset will not be 'live' updated,
     *    so your branched query should be immediately resolved and not held for future evaluation.
     *
     * @returns {Resultset} A copy of the internal resultset for branched queries.
     */
    DynamicView.prototype.branchResultset = function () {
      return this.resultset.copy();
    };

    /**
     * toJSON() - Override of toJSON to avoid circular references
     *
     */
    DynamicView.prototype.toJSON = function () {
      var copy = new DynamicView(this.collection, this.name, this.persistent);

      copy.resultset = this.resultset;
      copy.resultdata = []; // let's not save data (copy) to minimize size
      copy.resultsdirty = true;
      copy.filterPipeline = this.filterPipeline;
      copy.sortFunction = this.sortFunction;
      copy.sortCriteria = this.sortCriteria;
      copy.sortDirty = this.sortDirty;

      // avoid circular reference, reapply in db.loadJSON()
      copy.collection = null;

      return copy;
    };

    /**
     * applySort() - Used to apply a sort to the dynamic view
     *
     * @param {function} comparefun - a javascript compare function used for sorting
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.applySort = function (comparefun) {
      this.sortFunction = comparefun;
      this.sortCriteria = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * applySimpleSort() - Used to specify a property used for view translation.
     *
     * @param {string} propname - Name of property by which to sort.
     * @param {boolean} isdesc - (Optional) If true, the sort will be in descending order.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.applySimpleSort = function (propname, isdesc) {

      if (typeof (isdesc) === 'undefined') {
        isdesc = false;
      }

      this.sortCriteria = [
        [propname, isdesc]
      ];
      this.sortFunction = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * applySortCriteria() - Allows sorting a resultset based on multiple columns.
     *    Example : dv.applySortCriteria(['age', 'name']); to sort by age and then name (both ascending)
     *    Example : dv.applySortCriteria(['age', ['name', true]); to sort by age (ascending) and then by name (descending)
     *    Example : dv.applySortCriteria(['age', true], ['name', true]); to sort by age (descending) and then by name (descending)
     *
     * @param {array} properties - array of property names or subarray of [propertyname, isdesc] used evaluate sort order
     * @returns {DynamicView} Reference to this DynamicView, sorted, for future chain operations.
     */
    DynamicView.prototype.applySortCriteria = function (criteria) {
      this.sortCriterial = criteria;
      this.sortFunction = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * startTransaction() - marks the beginning of a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.startTransaction = function () {
      this.cachedresultset = this.resultset.copy();

      return this;
    };

    /**
     * commit() - commits a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.commit = function () {
      this.cachedresultset = null;

      return this;
    };

    /**
     * rollback() - rolls back a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.rollback = function () {
      this.resultset = this.cachedresultset;

      if (this.persistent) {
        // for now just rebuild the persistent dynamic view data in this worst case scenario
        // (a persistent view utilizing transactions which get rolled back), we already know the filter so not too bad.
        this.resultdata = this.resultset.data();

        this.emit('rebuild', this);
      }

      return this;
    };

    /**
     * applyFind() - Adds a mongo-style query option to the DynamicView filter pipeline
     *
     * @param {object} query - A mongo-style query object to apply to pipeline
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.applyFind = function (query) {
      this.filterPipeline.push({
        type: 'find',
        val: query
      });

      // Apply immediately to Resultset; if persistent we will wait until later to build internal data
      this.resultset.find(query);

      if (this.sortFunction || this.sortCriteria) {
        this.sortDirty = true;
        this.queueSortPhase();
      }

      if (this.persistent) {
        this.resultsdirty = true;
        this.queueSortPhase();
      }

      return this;
    };

    /**
     * applyWhere() - Adds a javascript filter function to the DynamicView filter pipeline
     *
     * @param {function} fun - A javascript filter function to apply to pipeline
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.applyWhere = function (fun) {
      this.filterPipeline.push({
        type: 'where',
        val: fun
      });

      // Apply immediately to Resultset; if persistent we will wait until later to build internal data
      this.resultset.where(fun);

      if (this.sortFunction || this.sortCriteria) {
        this.sortDirty = true;
        this.queueSortPhase();
      }
      if (this.persistent) {
        this.resultsdirty = true;
        this.queueSortPhase();
      }
      return this;
    };

    /**
     * data() - resolves and pending filtering and sorting, then returns document array as result.
     *
     * @returns {array} An array of documents representing the current DynamicView contents.
     */
    DynamicView.prototype.data = function () {
      // using final sort phase as 'catch all' for a few use cases which require full rebuild
      if (this.sortDirty || this.resultsdirty || !this.resultset.filterInitialized) {
        this.performSortPhase();
      }

      if (!this.persistent) {
        return this.resultset.data();
      }

      return this.resultdata;
    };

    /**
     *
     */
    DynamicView.prototype.queueSortPhase = function () {
      var self = this;

      // already queued? exit without queuing again
      if (this.sortDirty) {
        return;
      }

      this.sortDirty = true;

      // queue async call to performSortPhase()
      setTimeout(function () {
        self.performSortPhase();
      }, 1);
    };

    /**
     * performSortPhase() - invoked synchronously or asynchronously to perform final sort phase (if needed)
     *
     */
    DynamicView.prototype.performSortPhase = function () {
      // async call to this may have been pre-empted by synchronous call to data before async could fire
      if (!this.sortDirty && !this.resultsdirty && this.resultset.filterInitialized) {
        return;
      }

      if (this.sortFunction) {
        this.resultset.sort(this.sortFunction);
      }

      if (this.sortCriteria) {
        this.resultset.compoundsort(this.sortCriteria);
      }

      if (!this.persistent) {
        this.sortDirty = false;
        return;
      }

      // persistent view, rebuild local resultdata array
      this.resultdata = this.resultset.data();
      this.resultsdirty = false;
      this.sortDirty = false;

      this.emit('rebuild', this);
    };

    /**
     * evaluateDocument() - internal method for (re)evaluating document inclusion.
     *    Called by : collection.insert() and collection.update().
     *
     * @param {int} objIndex - index of document to (re)run through filter pipeline.
     */
    DynamicView.prototype.evaluateDocument = function (objIndex) {
      var ofr = this.resultset.filteredrows;
      var oldPos = ofr.indexOf(objIndex);
      var oldlen = ofr.length;

      // creating a 1-element resultset to run filter chain ops on to see if that doc passes filters;
      // mostly efficient algorithm, slight stack overhead price (this function is called on inserts and updates)
      var evalResultset = new Resultset(this.collection);
      evalResultset.filteredrows = [objIndex];
      evalResultset.filterInitialized = true;
      for (var idx = 0; idx < this.filterPipeline.length; idx++) {
        switch (this.filterPipeline[idx].type) {
        case 'find':
          evalResultset.find(this.filterPipeline[idx].val);
          break;
        case 'where':
          evalResultset.where(this.filterPipeline[idx].val);
          break;
        }
      }

      // not a true position, but -1 if not pass our filter(s), 0 if passed filter(s)
      var newPos = (evalResultset.filteredrows.length === 0) ? -1 : 0;

      // wasn't in old, shouldn't be now... do nothing
      if (oldPos == -1 && newPos == -1) return;

      // wasn't in resultset, should be now... add
      if (oldPos === -1 && newPos !== -1) {
        ofr.push(objIndex);

        if (this.persistent) {
          this.resultdata.push(this.collection.data[objIndex]);
        }

        // need to re-sort to sort new document
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        }

        return;
      }

      // was in resultset, shouldn't be now... delete
      if (oldPos !== -1 && newPos === -1) {
        if (oldPos < oldlen - 1) {
          // http://dvolvr.davidwaterston.com/2013/06/09/restating-the-obvious-the-fastest-way-to-truncate-an-array-in-javascript/comment-page-1/
          ofr[oldPos] = ofr[oldlen - 1];
          ofr.length = oldlen - 1;

          if (this.persistent) {
            this.resultdata[oldPos] = this.resultdata[oldlen - 1];
            this.resultdata.length = oldlen - 1;
          }
        } else {
          ofr.length = oldlen - 1;

          if (this.persistent) {
            this.resultdata.length = oldlen - 1;
          }
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        }

        return;
      }

      // was in resultset, should still be now... (update persistent only?)
      if (oldPos !== -1 && newPos !== -1) {
        if (this.persistent) {
          // in case document changed, replace persistent view data with the latest collection.data document
          this.resultdata[oldPos] = this.collection.data[objIndex];
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.sortDirty = true;
        }

        return;
      }
    };

    /**
     * removeDocument() - internal function called on collection.delete()
     */
    DynamicView.prototype.removeDocument = function (objIndex) {
      var ofr = this.resultset.filteredrows;
      var oldPos = ofr.indexOf(objIndex);
      var oldlen = ofr.length;
      var idx;

      if (oldPos !== -1) {
        // if not last row in resultdata, swap last to hole and truncate last row
        if (oldPos < oldlen - 1) {
          ofr[oldPos] = ofr[oldlen - 1];
          ofr.length = oldlen - 1;

          if (this.persistent) {
            this.resultdata[oldPos] = this.resultdata[oldlen - 1];
            this.resultdata.length = oldlen - 1;
          }
        }
        // last row, so just truncate last row
        else {
          ofr.length = oldlen - 1;

          if (this.persistent) {
            this.resultdata.length = oldlen - 1;
          }
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        }
      }

      // since we are using filteredrows to store data array positions
      // if they remove a document (whether in our view or not),
      // we need to adjust array positions -1 for all document array references after that position
      oldlen = ofr.length;
      for (idx = 0; idx < oldlen; idx++) {
        if (ofr[idx] > objIndex) {
          ofr[idx] --;
        }
      }
    };

    /**
     * mapReduce() - data transformation via user supplied functions
     *
     * @param {function} mapFunction - this function accepts a single document for you to transform and return
     * @param {function} reduceFunction - this function accepts many (array of map outputs) and returns single value
     * @returns The output of your reduceFunction
     */
    DynamicView.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data().map(mapFunction));
      } catch (err) {
        throw err;
      }
    };


    /**
     * @constructor
     * Collection class that handles documents of same type
     * @param {stirng} collection name
     * @param {array} array of property names to be indicized
     * @param {object} configuration object
     */
    function Collection(name, options) {
      // the name of the collection

      this.name = name;
      // the data held by the collection
      this.data = [];
      this.idIndex = []; // index of id
      this.binaryIndices = {}; // user defined indexes
      this.constraints = {
        unique: {},
        exact: {}
      };

      // the object type of the collection
      this.objType = name;

      // in autosave scenarios we will use collection level dirty flags to determine whether save is needed.
      // currently, if any collection is dirty we will autosave the whole database if autosave is configured.
      // defaulting to true since this is called from addCollection and adding a collection should trigger save
      this.dirty = true;

      // private holders for cached data
      this.cachedIndex = null;
      this.cachedBinaryIndex = null;
      this.cachedData = null;
      var self = this;

      /* OPTIONS */
      options = options || {};

      // exact match and unique constraints
      if (options.hasOwnProperty('unique')) {
        if (!Array.isArray(options.unique)) {
          options.unique = [options.unique];
        }
        options.unique.forEach(function (prop) {
          self.constraints.unique[prop] = new UniqueIndex(prop);
        });
      }

      if (options.hasOwnProperty('exact')) {
        options.exact.forEach(function (prop) {
          self.constraints.exact[prop] = new ExactIndex(prop);
        });
      }

      // is collection transactional
      this.transactional = options.hasOwnProperty('transactional') ? options.transactional : false;

      // options to clone objects when inserting them
      this.cloneObjects = options.hasOwnProperty('clone') ? options.clone : false;

      // option to make event listeners async, default is sync
      this.asyncListeners = options.hasOwnProperty('asyncListeners') ? options.asyncListeners : false;

      // disable track changes
      this.disableChangesApi = options.hasOwnProperty('disableChangesApi') ? options.disableChangesApi : true;


      // currentMaxId - change manually at your own peril!
      this.maxId = 0;

      this.DynamicViews = [];

      // events
      this.events = {
        'insert': [],
        'update': [],
        'pre-insert': [],
        'pre-update': [],
        'close': [],
        'flushbuffer': [],
        'error': [],
        'delete': [],
        'warning': []
      };

      // changes are tracked by collection and aggregated by the db
      this.changes = [];

      // initialize the id index
      this.ensureId();
      var indices = [];
      // initialize optional user-supplied indices array ['age', 'lname', 'zip']
      //if (typeof (indices) !== 'undefined') {
      if (options && options.indices) {
        if (Object.prototype.toString.call(options.indices) === '[object Array]') {
          indices = options.indices;
        } else if (typeof options.indices === 'string') {
          indices = [options.indices];
        } else {
          throw new TypeError('Indices needs to be a string or an array of strings');
        }
      }

      for (var idx = 0; idx < indices.length; idx++) {
        this.ensureIndex(indices[idx]);
      }

      /**
       * This method creates a clone of the current status of an object and associates operation and collection name,
       * so the parent db can aggregate and generate a changes object for the entire db
       */
      function createChange(name, op, obj) {
        self.changes.push({
          name: name,
          operation: op,
          obj: JSON.parse(JSON.stringify(obj))
        });
      }

      // clear all the changes
      function flushChanges() {
        self.changes = [];
      }

      this.getChanges = function () {
        return self.changes;
      };

      this.flushChanges = flushChanges;

      /**
       * If the changes API is disabled make sure only metadata is added without re-evaluating everytime if the changesApi is enabled
       */
      function insertMeta(obj) {
        if (!obj) {
          return;
        }
        if (!obj.meta) {
          obj.meta = {};
        }

        obj.meta.created = (new Date()).getTime();
        obj.meta.revision = 0;
      }

      function updateMeta(obj) {
        if (!obj) {
          return;
        }
        obj.meta.updated = (new Date()).getTime();
        obj.meta.revision += 1;
      }

      function createInsertChange(obj) {
        createChange(self.name, 'I', obj);
      }

      function createUpdateChange(obj) {
        createChange(self.name, 'U', obj);
      }

      function insertMetaWithChange(obj) {
        insertMeta(obj);
        createInsertChange(obj);
      }

      function updateMetaWithChange(obj) {
        updateMeta(obj);
        createUpdateChange(obj);
      }


      /* assign correct handler based on ChangesAPI flag */
      var insertHandler, updateHandler;

      function setHandlers() {
        insertHandler = self.disableChangesApi ? insertMeta : insertMetaWithChange;
        updateHandler = self.disableChangesApi ? updateMeta : updateMetaWithChange;
      }

      setHandlers();

      this.setChangesApi = function (enabled) {
        self.disableChangesApi = !enabled;
        setHandlers();
      };
      /**
       * built-in events
       */
      this.on('insert', function insertCallback(obj) {
        insertHandler(obj);
      });

      this.on('update', function updateCallback(obj) {
        updateHandler(obj);
      });

      this.on('delete', function deleteCallback(obj) {
        if (!self.disableChangesApi) {
          createChange(self.name, 'R', obj);
        }
      });

      this.on('warning', console.warn);
      // for de-serialization purposes
      flushChanges();
    }

    Collection.prototype = new LokiEventEmitter();

    Collection.prototype.byExample = function(template) {
      var k, obj, query;
      query = [];
      for (k in template) {
        if (!template.hasOwnProperty(k)) continue;
        query.push((
          obj = {},
          obj[k] = template[k],
          obj
        ));
      }
      return { '$and': query };
    };

    Collection.prototype.findObject = function(template) { return this.findOne(this.byExample(template)); };

    Collection.prototype.findObjects = function(template) { return this.find(this.byExample(template)); };

    /*----------------------------+
    | INDEXING                    |
    +----------------------------*/

    /**
     * Ensure binary index on a certain field
     */
    Collection.prototype.ensureIndex = function (property, force) {
      // optional parameter to force rebuild whether flagged as dirty or not
      if (typeof (force) === 'undefined') {
        force = false;
      }

      if (property === null || property === undefined) {
        throw 'Attempting to set index without an associated property';
      }

      if (this.binaryIndices.hasOwnProperty(property) && !force) {
        if (!this.binaryIndices[property].dirty) return;
      }

      this.binaryIndices[property] = {
        'name': property,
        'dirty': true,
        'values': []
      };

      var index, len = this.data.length,
        i = 0;

      index = this.binaryIndices[property];

      // initialize index values
      for (i; i < len; i += 1) {
        index.values.push(i);
      }

      var wrappedComparer =
        (function (prop, coll) {
          return function (a, b) {
            var obj1 = coll.data[a];
            var obj2 = coll.data[b];

            if (obj1[prop] === obj2[prop]) return 0;
            if (gtHelper(obj1[prop], obj2[prop])) return 1;
            if (ltHelper(obj1[prop], obj2[prop])) return -1;
          };
        })(property, this);

      index.values.sort(wrappedComparer);
      index.dirty = false;

      this.dirty = true; // for autosave scenarios
    };

    Collection.prototype.ensureUniqueIndex = function (field) {

      var index = this.constraints.unique[field];
      if (!index) {
        this.constraints.unique[field] = index = new UniqueIndex(field);
      }
      var self = this;
      this.data.forEach(function (obj) {
        index.set(obj);
      });
      return index;
    };

    /**
     * Ensure all binary indices
     */
    Collection.prototype.ensureAllIndexes = function (force) {
      var objKeys = Object.keys(this.binaryIndices);

      var i = objKeys.length;
      while (i--) {
        this.ensureIndex(objKeys[i], force);
      }
    };

    Collection.prototype.flagBinaryIndexesDirty = function () {
      var objKeys = Object.keys(this.binaryIndices);

      var i = objKeys.length;
      while (i--) {
        this.binaryIndices[objKeys[i]].dirty = true;
      }
    };

    Collection.prototype.count = function () {
      return this.data.length;
    };

    /**
     * Rebuild idIndex
     */
    Collection.prototype.ensureId = function () {

      var len = this.data.length,
        i = 0;

      this.idIndex = [];
      for (i; i < len; i += 1) {
        this.idIndex.push(this.data[i].$loki);
      }
    };

    /**
     * Rebuild idIndex async with callback - useful for background syncing with a remote server
     */
    Collection.prototype.ensureIdAsync = function (callback) {
      this.async(function () {
        this.ensureId();
      }, callback);
    };

    /**
     * Each collection maintains a list of DynamicViews associated with it
     **/

    Collection.prototype.addDynamicView = function (name, persistent) {
      var dv = new DynamicView(this, name, persistent);
      this.DynamicViews.push(dv);

      return dv;
    };

    Collection.prototype.removeDynamicView = function (name) {
      for (var idx = 0; idx < this.DynamicViews.length; idx++) {
        if (this.DynamicViews[idx].name === name) {
          this.DynamicViews.splice(idx, 1);
        }
      }
    };

    Collection.prototype.getDynamicView = function (name) {
      for (var idx = 0; idx < this.DynamicViews.length; idx++) {
        if (this.DynamicViews[idx].name === name) {
          return this.DynamicViews[idx];
        }
      }

      return null;
    };

    /**
     * find and update: pass a filtering function to select elements to be updated
     * and apply the updatefunctino to those elements iteratively
     */
    Collection.prototype.findAndUpdate = function (filterFunction, updateFunction) {

      var results = this.where(filterFunction),
        i = 0,
        obj;
      try {
        for (i; i < results.length; i++) {
          obj = updateFunction(results[i]);
          this.update(obj);
        }

      } catch (err) {
        this.rollback();
        console.error(err.message);
      }
    };

    /**
     * generate document method - ensure objects have id and objType properties
     * @param {object} the document to be inserted (or an array of objects)
     * @returns document or documents (if passed an array of objects)
     */
    Collection.prototype.insert = function (doc) {

      if (!doc) {
        var error = new Error('Object cannot be null');
        this.emit('error', error);
        throw error;
      }

      var self = this;
      // holder to the clone of the object inserted if collections is set to clone objects
      var obj;
      var docs = Array.isArray(doc) ? doc : [doc];
      var results = [];
      docs.forEach(function (d) {
        if (typeof d !== 'object') {
          throw new TypeError('Document needs to be an object');
        }

        obj = self.cloneObjects ? JSON.parse(JSON.stringify(d)) : d;
        if (typeof obj.meta === 'undefined') {
          obj.meta = {
            revision: 0,
            created: 0
          };
        }
        self.emit('pre-insert', obj);
        if (self.add(obj)) {
          self.emit('insert', obj);
          results.push(obj);
        } else {
          return undefined;
        }
      });
      return results.length === 1 ? results[0] : results;
    };

    Collection.prototype.clear = function () {
      this.data = [];
      this.idIndex = [];
      this.binaryIndices = {};
      this.cachedIndex = null;
      this.cachedData = null;
      this.maxId = 0;
      this.DynamicViews = [];
      this.dirty = true;
    };

    /**
     * Update method
     */
    Collection.prototype.update = function (doc) {
      if (Object.keys(this.binaryIndices).length > 0) {
        this.flagBinaryIndexesDirty();
      }

      if (Array.isArray(doc)) {
        var k = 0,
          len = doc.length;
        for (k; k < len; k += 1) {
          this.update(doc[k]);
        }
        return;
      }

      // verify object is a properly formed document
      if (!doc.hasOwnProperty('$loki')) {
        throw 'Trying to update unsynced document. Please save the document first by using insert() or addMany()';
      }
      try {
        this.startTransaction();
        var arr = this.get(doc.$loki, true),
          obj,
          position,
          self = this;

        if (!arr) {
          throw new Error('Trying to update a document not in collection.');
        }
        this.emit('pre-update', doc);

        obj = arr[0];
        Object.keys(this.constraints.unique).forEach(function (key) {
          self.constraints.unique[key].update(obj);
        });
        // get current position in data array
        position = arr[1];

        // operate the update
        this.data[position] = doc;


        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to evaluate for inclusion/exclusion
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].evaluateDocument(position);
        }

        this.idIndex[position] = obj.$loki;

        this.commit();
        this.dirty = true; // for autosave scenarios
        this.emit('update', doc);

      } catch (err) {
        this.rollback();
        console.error(err.message);
        this.emit('error', err);
        throw (err); // re-throw error so user does not think it succeeded
      }
    };

    /**
     * Add object to collection
     */
    Collection.prototype.add = function (obj) {
      var dvlen = this.DynamicViews.length;

      // if parameter isn't object exit with throw
      if ('object' !== typeof obj) {
        throw 'Object being added needs to be an object';
      }
      /*
       * try adding object to collection
       */

      if (Object.keys(this.binaryIndices).length > 0) {
        this.flagBinaryIndexesDirty();
      }

      // if object you are adding already has id column it is either already in the collection
      // or the object is carrying its own 'id' property.  If it also has a meta property,
      // then this is already in collection so throw error, otherwise rename to originalId and continue adding.
      if (typeof (obj.$loki) !== "undefined") {
        throw 'Document is already in collection, please use update()';
      }

      try {
        this.startTransaction();
        this.maxId++;

        if (isNaN(this.maxId)) {
          this.maxId = (this.data[this.data.length - 1].$loki + 1);
        }

        obj.$loki = this.maxId;
        obj.meta.version = 0;

        // add the object
        this.data.push(obj);

        var self = this;
        Object.keys(this.constraints.unique).forEach(function (key) {
          self.constraints.unique[key].set(obj);
        });

        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to evaluate for inclusion/exclusion
        for (var i = 0; i < dvlen; i++) {
          this.DynamicViews[i].evaluateDocument(this.data.length - 1);
        }

        // add new obj id to idIndex
        this.idIndex.push(obj.$loki);

        this.commit();
        this.dirty = true; // for autosave scenarios
        return obj;
      } catch (err) {
        this.rollback();
        console.error(err.message);
      }
    };


    Collection.prototype.removeWhere = function (query) {
      var list;
      if (typeof query === 'function') {
        list = this.data.filter(query);
      } else {
        list = new Resultset(this, query);
      }
      var len = list.length;
      while (len--) {
        this.remove(list[len]);
      }
      var dv;
      for (dv in this.DynamicViews) {
        this.DynamicViews[dv].rematerialize();
      }

    };

    Collection.prototype.removeDataOnly = function () {
      this.removeWhere(function (obj) {
        return true;
      });
    };

    /**
     * delete wrapped
     */
    Collection.prototype.remove = function (doc) {
      if (typeof doc === 'number') {
        doc = this.get(doc);
      }

      if ('object' !== typeof doc) {
        throw new Error('Parameter is not an object');
      }
      if (Array.isArray(doc)) {
        var k = 0,
          len = doc.length;
        for (k; k < len; k += 1) {
          this.remove(doc[k]);
        }
        return;
      }

      if (!doc.hasOwnProperty('$loki')) {
        throw new Error('Object is not a document stored in the collection');
      }

      if (Object.keys(this.binaryIndices).length > 0) {
        this.flagBinaryIndexesDirty();
      }

      try {
        this.startTransaction();
        var arr = this.get(doc.$loki, true),
          // obj = arr[0],
          position = arr[1];
        var self = this;
        Object.keys(this.constraints.unique).forEach(function (key) {
          self.constraints.unique[key].remove(doc);
        });
        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to remove
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].removeDocument(position);
        }

        this.data.splice(position, 1);

        // remove id from idIndex
        this.idIndex.splice(position, 1);

        this.commit();
        this.dirty = true; // for autosave scenarios
        this.emit('delete', arr[0]);
        delete doc.$loki;
        delete doc.meta;
        return doc;

      } catch (err) {
        this.rollback();
        console.error(err.message);
        this.emit('error', err);
        return null;
      }
    };

    /*---------------------+
    | Finding methods     |
    +----------------------*/

    /**
     * Get by Id - faster than other methods because of the searching algorithm
     */
    Collection.prototype.get = function (id, returnPosition) {

      var retpos = returnPosition || false,
        data = this.idIndex,
        max = data.length - 1,
        min = 0,
        mid = Math.floor(min + (max - min) / 2);

      id = typeof id === 'number' ? id : parseInt(id, 10);

      if (isNaN(id)) {
        throw 'Passed id is not an integer';
      }

      while (data[min] < data[max]) {

        mid = Math.floor((min + max) / 2);

        if (data[mid] < id) {
          min = mid + 1;
        } else {
          max = mid;
        }
      }

      if (max === min && data[min] === id) {

        if (retpos) {
          return [this.data[min], min];
        }
        return this.data[min];
      }
      return null;

    };

    Collection.prototype.by = function (field, value) {
      var self;
      if (!value) {
        self = this;
        return function (value) {
          return self.by(field, value);
        };
      }
      return this.constraints.unique[field].get(value);
    };

    /**
     * Find one object by index property, by property equal to value
     */
    Collection.prototype.findOne = function (query) {
      // Instantiate Resultset and exec find op passing firstOnly = true param
      var result = new Resultset(this, query, null, true);
      if (Array.isArray(result) && result.length === 0) {
        return null;
      } else {
        return result;
      }
    };

    /**
     * Chain method, used for beginning a series of chained find() and/or view() operations
     * on a collection.
     */
    Collection.prototype.chain = function () {
      return new Resultset(this, null, null);
    };

    /**
     * Find method, api is similar to mongodb except for now it only supports one search parameter.
     * for more complex queries use view() and storeView()
     */
    Collection.prototype.find = function (query) {
      if (typeof (query) === 'undefined') {
        query = 'getAll';
      }
      // find logic moved into Resultset class
      return new Resultset(this, query, null);
    };

    /**
     * Find object by unindexed field by property equal to value,
     * simply iterates and returns the first element matching the query
     */
    Collection.prototype.findOneUnindexed = function (prop, value) {

      var i = this.data.length,
        doc;
      while (i--) {
        if (this.data[i][prop] === value) {
          doc = this.data[i];
          return doc;
        }
      }
      return null;
    };

    /**
     * Transaction methods
     */

    /** start the transation */
    Collection.prototype.startTransaction = function () {
      if (this.transactional) {
        this.cachedData = clone(this.data, 'parse-stringify');
        this.cachedIndex = this.idIndex;
        this.cachedBinaryIndex = this.binaryIndices;

        // propagate startTransaction to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].startTransaction();
        }
      }
    };

    /** commit the transation */
    Collection.prototype.commit = function () {
      if (this.transactional) {
        this.cachedData = null;
        this.cachedIndex = null;
        this.cachedBinaryIndices = null;

        // propagate commit to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].commit();
        }
      }
    };

    /** roll back the transation */
    Collection.prototype.rollback = function () {
      if (this.transactional) {
        if (this.cachedData !== null && this.cachedIndex !== null) {
          this.data = this.cachedData;
          this.idIndex = this.cachedIndex;
          this.binaryIndices = this.cachedBinaryIndex;
        }

        // propagate rollback to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].rollback();
        }
      }
    };

    // async executor. This is only to enable callbacks at the end of the execution.
    Collection.prototype.async = function (fun, callback) {
      setTimeout(function () {
        if (typeof fun === 'function') {
          fun();
          callback();
        } else {
          throw 'Argument passed for async execution is not a function';
        }
      }, 0);
    };

    /**
     * Create view function - filter
     */
    Collection.prototype.where = function (fun) {
      // find logic moved into Resultset class
      return new Resultset(this, null, fun);
    };

    /**
     * Map Reduce
     */
    Collection.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data.map(mapFunction));
      } catch (err) {
        throw err;
      }
    };

    /**
     * eqJoin - Join two collections on specified properties
     */
    Collection.prototype.eqJoin = function (joinData, leftJoinProp, rightJoinProp, mapFun) {
      // logic in Resultset class
      return new Resultset(this).eqJoin(joinData, leftJoinProp, rightJoinProp, mapFun);
    };

    /* ------ STAGING API -------- */
    /**
     * stages: a map of uniquely identified 'stages', which hold copies of objects to be
     * manipulated without affecting the data in the original collection
     */
    Collection.prototype.stages = {};

    /**
     * create a stage and/or retrieve it
     */
    Collection.prototype.getStage = function (name) {
      if (!this.stages[name]) {
        this.stages[name] = {};
      }
      return this.stages[name];
    };
    /**
     * a collection of objects recording the changes applied through a commmitStage
     */
    Collection.prototype.commitLog = [];

    /**
     * create a copy of an object and insert it into a stage
     */
    Collection.prototype.stage = function (stageName, obj) {
      var copy = JSON.parse(JSON.stringify(obj));
      this.getStage(stageName)[obj.$loki] = copy;
      return copy;
    };

    /**
     * re-attach all objects to the original collection, so indexes and views can be rebuilt
     * then create a message to be inserted in the commitlog
     */
    Collection.prototype.commitStage = function (stageName, message) {
      var stage = this.getStage(stageName),
        prop,
        timestamp = new Date().getTime();

      for (prop in stage) {

        this.update(stage[prop]);
        this.commitLog.push({
          timestamp: timestamp,
          message: message,
          data: JSON.parse(JSON.stringify(stage[prop]))
        });
      }
      this.stages[stageName] = {};
    };

    Collection.prototype.no_op = function () {
      return;
    };

    Collection.prototype.extract = function (field) {
      var i = 0,
        len = this.data.length,
        isDotNotation = isDeepProperty(field),
        result = [];
      for (i; i < len; i += 1) {
        result.push(deepProperty(this.data[i], field, isDotNotation));
      }
      return result;
    };

    Collection.prototype.max = function (field) {
      return Math.max.apply(null, this.extract(field));
    };

    Collection.prototype.min = function (field) {
      return Math.min.apply(null, this.extract(field));
    };

    Collection.prototype.maxRecord = function (field) {
      var i = 0,
        len = this.data.length,
        deep = isDeepProperty(field),
        result = {
          index: 0,
          value: undefined
        },
        max;

      for (i; i < len; i += 1) {
        if (max !== undefined) {
          if (max < deepProperty(this.data[i], field, deep)) {
            max = deepProperty(this.data[i], field, deep);
            result.index = this.data[i].$loki;
          }
        } else {
          max = deepProperty(this.data[i], field, deep);
          result.index = this.data[i].$loki;
        }
      }
      result.value = max;
      return result;
    };

    Collection.prototype.minRecord = function (field) {
      var i = 0,
        len = this.data.length,
        deep = isDeepProperty(field),
        result = {
          index: 0,
          value: undefined
        },
        min;

      for (i; i < len; i += 1) {
        if (min !== undefined) {
          if (min > deepProperty(this.data[i], field, deep)) {
            min = deepProperty(this.data[i], field, deep);
            result.index = this.data[i].$loki;
          }
        } else {
          min = deepProperty(this.data[i], field, deep);
          result.index = this.data[i].$loki;
        }
      }
      result.value = min;
      return result;
    };

    Collection.prototype.extractNumerical = function (field) {
      return this.extract(field).map(parseBase10).filter(Number).filter(function (n) {
        return !(isNaN(n));
      });
    };

    Collection.prototype.avg = function (field) {
      return average(this.extractNumerical(field));
    };

    Collection.prototype.stdDev = function (field) {
      return standardDeviation(this.extractNumerical(field));
    };

    Collection.prototype.mode = function (field) {
      var dict = {},
        data = this.extract(field);
      data.forEach(function (obj) {
        if (dict[obj]) {
          dict[obj] += 1;
        } else {
          dict[obj] = 1;
        }
      });
      var max,
        prop, mode;
      for (prop in dict) {
        if (max) {
          if (max < dict[prop]) {
            mode = prop;
          }
        } else {
          mode = prop;
          max = dict[prop];
        }
      }
      return mode;
    };

    Collection.prototype.median = function (field) {
      var values = this.extractNumerical(field);
      values.sort(sub);

      var half = Math.floor(values.length / 2);

      if (values.length % 2) {
        return values[half];
      } else {
        return (values[half - 1] + values[half]) / 2.0;
      }
    };

    /**
     * General utils, including statistical functions
     */
    function isDeepProperty(field) {
      return field.indexOf('.') !== -1;
    }

    function parseBase10(num) {
      return parseFloat(num, 10);
    }

    function isNotUndefined(obj) {
      return obj !== undefined;
    }

    function add(a, b) {
      return a + b;
    }

    function sub(a, b) {
      return a - b;
    }

    function median(values) {
      values.sort(sub);
      var half = Math.floor(values.length / 2);
      return (values.length % 2) ? values[half] : ((values[half - 1] + values[half]) / 2.0);
    }

    function average(array) {
      return (array.reduce(add, 0)) / array.length;
    }

    function standardDeviation(values) {
      var avg = average(values);
      var squareDiffs = values.map(function (value) {
        var diff = value - avg;
        var sqrDiff = diff * diff;
        return sqrDiff;
      });

      var avgSquareDiff = average(squareDiffs);

      var stdDev = Math.sqrt(avgSquareDiff);
      return stdDev;
    }

    function deepProperty(obj, property, isDeep) {
      if (isDeep === false) {
        // pass without processing
        return obj[property];
      }
      var pieces = property.split('.'),
        root = obj;
      while (pieces.length > 0) {
        root = root[pieces.shift()];
      }
      return root;
    }

    function binarySearch(array, item, fun) {
      var lo = 0,
        hi = array.length,
        compared,
        mid;
      while (lo < hi) {
        mid = ((lo + hi) / 2) | 0;
        compared = fun.apply(null, [item, array[mid]]);
        if (compared === 0) {
          return {
            found: true,
            index: mid
          };
        } else if (compared < 0) {
          hi = mid;
        } else {
          lo = mid + 1;
        }
      }
      return {
        found: false,
        index: hi
      };
    }

    function BSonSort(fun) {
      return function (array, item) {
        return binarySearch(array, item, fun);
      };
    }

    function KeyValueStore() {}

    KeyValueStore.prototype = {
      keys: [],
      values: [],
      sort: function (a, b) {
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
      },
      setSort: function (fun) {
        this.bs = new BSonSort(fun);
      },
      bs: function () {
        return new BSonSort(this.sort);
      },
      set: function (key, value) {
        var pos = this.bs(this.keys, key);
        if (pos.found) {
          this.values[pos.index] = value;
        } else {
          this.keys.splice(pos.index, 0, key);
          this.values.splice(pos.index, 0, value);
        }
      },
      get: function (key) {
        return this.values[binarySearch(this.keys, key, this.sort).index];
      }
    };

    function UniqueIndex(uniqueField) {
      this.field = uniqueField;
      this.keyMap = {};
      this.lokiMap = {};
    }
    UniqueIndex.prototype.keyMap = {};
    UniqueIndex.prototype.lokiMap = {};
    UniqueIndex.prototype.set = function (obj) {
      if (this.keyMap[obj[this.field]]) {
        throw new Error('Duplicate key for property ' + this.field + ': ' + obj[this.field]);
      } else {
        this.keyMap[obj[this.field]] = obj;
        this.lokiMap[obj.$loki] = obj[this.field];
      }
    };
    UniqueIndex.prototype.get = function (key) {
      return this.keyMap[key];
    };

    UniqueIndex.prototype.byId = function (id) {
      return this.keyMap[this.lokiMap[id]];
    };
    UniqueIndex.prototype.update = function (obj) {
      if (this.lokiMap[obj.$loki] !== obj[this.field]) {
        var old = this.lokiMap[obj.$loki];
        this.set(obj);
        // make the old key fail bool test, while avoiding the use of delete (mem-leak prone)
        this.keyMap[old] = undefined;
      } else {
        this.keyMap[obj[this.field]] = obj;
      }
    };
    UniqueIndex.prototype.remove = function (key) {
      var obj = this.keyMap[key];
      this.keyMap[key] = undefined;
      this.lokiMap[obj.$loki] = undefined;
    };
    UniqueIndex.prototype.clear = function () {
      this.keyMap = {};
      this.lokiMap = {};
    };

    function ExactIndex(exactField) {
      this.index = {};
      this.field = exactField;
    }

    // add the value you want returned to the key in the index 
    ExactIndex.prototype = {
      set: function add(key, val) {
        if (this.index[key]) {
          this.index[key].push(val);
        } else {
          this.index[key] = [val];
        }
      },

      // remove the value from the index, if the value was the last one, remove the key
      remove: function remove(key, val) {
        var idxSet = this.index[key];
        for (var i in idxSet) {
          if (idxSet[i] == val) {
            idxSet.splice(i, 1);
          }
        }
        if (idxSet.length < 1) {
          this.index[key] = undefined;
        }
      },

      // get the values related to the key, could be more than one
      get: function get(key) {
        return this.index[key];
      },

      // clear will zap the index
      clear: function clear(key) {
        this.index = {};
      }
    };

    function SortedIndex(sortedField) {
      this.field = sortedField;
    }

    SortedIndex.prototype = {
      keys: [],
      values: [],
      // set the default sort
      sort: function (a, b) {
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
      },
      bs: function () {
        return new BSonSort(this.sort);
      },
      // and allow override of the default sort
      setSort: function (fun) {
        this.bs = new BSonSort(fun);
      },
      // add the value you want returned  to the key in the index  
      set: function (key, value) {
        var pos = binarySearch(this.keys, key, this.sort);
        if (pos.found) {
          this.values[pos.index].push(value);
        } else {
          this.keys.splice(pos.index, 0, key);
          this.values.splice(pos.index, 0, [value]);
        }
      },
      // get all values which have a key == the given key
      get: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        if (bsr.found) {
          return this.values[bsr.index];
        } else {
          return [];
        }
      },
      // get all values which have a key < the given key
      getLt: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        var pos = bsr.index;
        if (bsr.found) pos--;
        return this.getAll(key, 0, pos);
      },
      // get all values which have a key > the given key
      getGt: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        var pos = bsr.index;
        if (bsr.found) pos++;
        return this.getAll(key, pos, this.keys.length);
      },

      // get all vals from start to end
      getAll: function (key, start, end) {
        var results = [];
        for (var i = start; i < end; i++) {
          results = results.concat(this.values[i]);
        }
        return results;
      },
      // just in case someone wants to do something smart with ranges
      getPos: function (key) {
        return binarySearch(this.keys, key, this.sort);
      },
      // remove the value from the index, if the value was the last one, remove the key
      remove: function (key, value) {
        var pos = binarySearch(this.keys, key, this.sort).index;
        var idxSet = this.values[pos];
        for (var i in idxSet) {
          if (idxSet[i] == value) idxSet.splice(i, 1);
        }
        if (idxSet.length < 1) {
          this.keys.splice(pos, 1);
          this.values.splice(pos, 1);
        }
      },
      // clear will zap the index
      clear: function (key) {
        this.keys = [];
        this.values = [];
      }
    };


    Loki.Collection = Collection;
    Loki.KeyValueStore = KeyValueStore;
    return Loki;
  }());

}));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"fs":23}],200:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.9.0
(function() {
  var JSONStorage, LocalStorage, QUOTA_EXCEEDED_ERR, StorageEvent, events, fs, path, _emptyDirectory, _rm,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  path = require('path');

  fs = require('fs');

  events = require('events');

  _emptyDirectory = function(target) {
    var p, _i, _len, _ref, _results;
    _ref = fs.readdirSync(target);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(_rm(path.join(target, p)));
    }
    return _results;
  };

  _rm = function(target) {
    if (fs.statSync(target).isDirectory()) {
      _emptyDirectory(target);
      return fs.rmdirSync(target);
    } else {
      return fs.unlinkSync(target);
    }
  };

  QUOTA_EXCEEDED_ERR = (function(_super) {
    __extends(QUOTA_EXCEEDED_ERR, _super);

    function QUOTA_EXCEEDED_ERR(_at_message) {
      this.message = _at_message != null ? _at_message : 'Unknown error.';
      if (Error.captureStackTrace != null) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
    }

    QUOTA_EXCEEDED_ERR.prototype.toString = function() {
      return this.name + ": " + this.message;
    };

    return QUOTA_EXCEEDED_ERR;

  })(Error);

  StorageEvent = (function() {
    function StorageEvent(_at_key, _at_oldValue, _at_newValue, _at_url, _at_storageArea) {
      this.key = _at_key;
      this.oldValue = _at_oldValue;
      this.newValue = _at_newValue;
      this.url = _at_url;
      this.storageArea = _at_storageArea != null ? _at_storageArea : 'localStorage';
    }

    return StorageEvent;

  })();

  LocalStorage = (function(_super) {
    var MetaKey, createMap;

    __extends(LocalStorage, _super);

    function LocalStorage(_at_location, _at_quota) {
      this.location = _at_location;
      this.quota = _at_quota != null ? _at_quota : 5 * 1024 * 1024;
      if (!(this instanceof LocalStorage)) {
        return new LocalStorage(this.location, this.quota);
      }
      this.length = 0;
      this.bytesInUse = 0;
      this.keys = [];
      this.metaKeyMap = createMap();
      this.eventUrl = "pid:" + process.pid;
      this._init();
      this.QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;
    }

    MetaKey = (function() {
      function MetaKey(_at_key, _at_index) {
        this.key = _at_key;
        this.index = _at_index;
        if (!(this instanceof MetaKey)) {
          return new MetaKey(this.key, this.index);
        }
      }

      return MetaKey;

    })();

    createMap = function() {
      var Map;
      Map = function() {};
      Map.prototype = Object.create(null);
      return new Map();
    };

    LocalStorage.prototype._init = function() {
      var index, k, stat, _MetaKey, _decodedKey, _i, _keys, _len;
      if (fs.existsSync(this.location)) {
        if (!fs.statSync(this.location).isDirectory()) {
          throw new Error("A file exists at the location '" + this.location + "' when trying to create/open localStorage");
        }
      }
      this.bytesInUse = 0;
      this.length = 0;
      if (!fs.existsSync(this.location)) {
        fs.mkdirSync(this.location);
        return;
      }
      _keys = fs.readdirSync(this.location);
      for (index = _i = 0, _len = _keys.length; _i < _len; index = ++_i) {
        k = _keys[index];
        _decodedKey = decodeURIComponent(k);
        this.keys.push(_decodedKey);
        _MetaKey = new MetaKey(k, index);
        this.metaKeyMap[_decodedKey] = _MetaKey;
        stat = this.getStat(k);
        if ((stat != null ? stat.size : void 0) != null) {
          _MetaKey.size = stat.size;
          this.bytesInUse += stat.size;
        }
      }
      return this.length = _keys.length;
    };

    LocalStorage.prototype.setItem = function(key, value) {
      var encodedKey, evnt, existsBeforeSet, filename, hasListeners, metaKey, oldLength, oldValue, valueString, valueStringLength;
      hasListeners = events.EventEmitter.listenerCount(this, 'storage');
      oldValue = null;
      if (hasListeners) {
        oldValue = this.getItem(key);
      }
      key = key.toString();
      encodedKey = encodeURIComponent(key);
      filename = path.join(this.location, encodedKey);
      valueString = value.toString();
      valueStringLength = valueString.length;
      metaKey = this.metaKeyMap[key];
      existsBeforeSet = !!metaKey;
      if (existsBeforeSet) {
        oldLength = metaKey.size;
      } else {
        oldLength = 0;
      }
      if (this.bytesInUse - oldLength + valueStringLength > this.quota) {
        throw new QUOTA_EXCEEDED_ERR();
      }
      fs.writeFileSync(filename, valueString, 'utf8');
      if (!existsBeforeSet) {
        metaKey = new MetaKey(encodedKey, (this.keys.push(key)) - 1);
        metaKey.size = valueStringLength;
        this.metaKeyMap[key] = metaKey;
        this.length += 1;
        this.bytesInUse += valueStringLength;
      }
      if (hasListeners) {
        evnt = new StorageEvent(key, oldValue, value, this.eventUrl);
        return this.emit('storage', evnt);
      }
    };

    LocalStorage.prototype.getItem = function(key) {
      var filename, metaKey;
      key = key.toString();
      metaKey = this.metaKeyMap[key];
      if (!!metaKey) {
        filename = path.join(this.location, metaKey.key);
        return fs.readFileSync(filename, 'utf8');
      } else {
        return null;
      }
    };

    LocalStorage.prototype.getStat = function(key) {
      var filename;
      key = key.toString();
      filename = path.join(this.location, encodeURIComponent(key));
      if (fs.existsSync(filename)) {
        return fs.statSync(filename);
      } else {
        return null;
      }
    };

    LocalStorage.prototype.removeItem = function(key) {
      var evnt, filename, hasListeners, metaKey, oldValue;
      key = key.toString();
      metaKey = this.metaKeyMap[key];
      if (!!metaKey) {
        hasListeners = events.EventEmitter.listenerCount(this, 'storage');
        oldValue = null;
        if (hasListeners) {
          oldValue = this.getItem(key);
        }
        delete this.metaKeyMap[key];
        this.length -= 1;
        this.bytesInUse -= metaKey.size;
        filename = path.join(this.location, metaKey.key);
        this.keys.splice(metaKey.index, 1);
        _rm(filename);
        if (hasListeners) {
          evnt = new StorageEvent(key, oldValue, null, this.eventUrl);
          return this.emit('storage', evnt);
        }
      }
    };

    LocalStorage.prototype.key = function(n) {
      return this.keys[n];
    };

    LocalStorage.prototype.clear = function() {
      var evnt;
      _emptyDirectory(this.location);
      this.metaKeyMap = createMap();
      this.keys = [];
      this.length = 0;
      this.bytesInUse = 0;
      if (events.EventEmitter.listenerCount(this, 'storage')) {
        evnt = new StorageEvent(null, null, null, this.eventUrl);
        return this.emit('storage', evnt);
      }
    };

    LocalStorage.prototype.getBytesInUse = function() {
      return this.bytesInUse;
    };

    LocalStorage.prototype._deleteLocation = function() {
      _rm(this.location);
      this.metaKeyMap = {};
      this.keys = [];
      this.length = 0;
      return this.bytesInUse = 0;
    };

    return LocalStorage;

  })(events.EventEmitter);

  JSONStorage = (function(_super) {
    __extends(JSONStorage, _super);

    function JSONStorage() {
      return JSONStorage.__super__.constructor.apply(this, arguments);
    }

    JSONStorage.prototype.setItem = function(key, value) {
      var newValue;
      newValue = JSON.stringify(value);
      return JSONStorage.__super__.setItem.call(this, key, newValue);
    };

    JSONStorage.prototype.getItem = function(key) {
      return JSON.parse(JSONStorage.__super__.getItem.call(this, key));
    };

    return JSONStorage;

  })(LocalStorage);

  exports.LocalStorage = LocalStorage;

  exports.JSONStorage = JSONStorage;

  exports.QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;

}).call(this);

}).call(this,require('_process'))
},{"_process":176,"events":167,"fs":23,"path":175}],201:[function(require,module,exports){
/* Copyright(c) 2013-2014 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */

var TypedArraysFactory = require('../util/arrays');
var sm = require('./scalarmult');

/**
 * Replacement of crypto_box_keypair in crypto_box/curve25519xsalsa20poly1305/ref/keypair.c
 * Public key can be generated for any given secret key, which itself should be randomly generated.
 * @param sk is Uint8Array of 32 bytes of a secret key.
 * @returns Uint8Array with 32 bytes of a public key, that corresponds given secret key. 
 */
function generate_pubkey(sk) {
	"use strict";
	if (sk.BYTES_PER_ELEMENT !== 1) { throw new TypeError("Key array k must be Uint8Array."); }
	if (sk.length !== 32) { throw new Error(
			"Key array sk should have 32 elements (bytes) in it, but it is "+
			sk.length+" elements long."); }
	var pk = new Uint8Array(32);
	sm.curve25519_base(pk,sk);
	return pk;
}
module.exports = {
		generate_pubkey: generate_pubkey
};
Object.freeze(module.exports);

},{"../util/arrays":204,"./scalarmult":202}],202:[function(require,module,exports){
/* Copyright(c) 2013 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */

var ArraysFactory = require('../util/arrays');
var mult32 = require('../util/int32').mult;

/**
 * Analog of add in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 * @param b is Uint32Array, 32 items long.
 */
function add(out, a, b){
	"use strict";
	var u = 0;
	for (var j=0; j<31; j+=1) {
		u += a[j] + b[j];
		u &= 0xffffffff;
		out[j] = u & 255;
		u >>>= 8;
	}
	u += a[31] + b[31];
	u &= 0xffffffff;
	out[31] = u;
}

/**
 * Analog of sub in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 * @param b is Uint32Array, 32 items long.
 */
function sub(out, a, b) {
	"use strict";
	var u = 218;
	for (var j=0; j<31; j+=1) {
		u += a[j] + 65280 - b[j];
		u &= 0xffffffff;
		out[j] = u & 255;
		u >>>= 8;
	}
	u += a[31] - b[31];
	u &= 0xffffffff;
	out[31] = u;
}

/**
 * Analog of squeeze in crypto_scalarmult/curve25519/ref/smult.c
 * @param a is Uint32Array, 32 items long.
 */
function squeeze(a) {
	"use strict";
	var u = 0;
	for (var j=0; j<31; j+=1) {
		u += a[j];
		u &= 0xffffffff;
		a[j] = u & 255;
		u >>>= 8;
	}
	u += a[31];
	u &= 0xffffffff;
	a[31] = u & 127;
	u = 19 * (u >>> 7);	// multiplication by 19 is safe here
	u &= 0xffffffff;
	for (var j=0; j<31; j+=1) {
		u += a[j];
		u &= 0xffffffff;
		a[j] = u & 255;
		u >>>= 8;
	}
	u += a[31];
	u &= 0xffffffff;
	a[31] = u;
}

/**
 * minusp array in crypto_scalarmult/curve25519/ref/smult.c
 */
var minusp = new Uint32Array(32);
minusp.set([ 19, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 128 ]);

/**
 * Analog of freeze in crypto_scalarmult/curve25519/ref/smult.c
 * @param a is Uint32Array, 32 items long.
 * @param arrFactory is TypedArraysFactory, used to allocated/find an array for use.
 */
function freeze(a, arrFactory) {
	"use strict";
	var aorig = arrFactory.getUint32Array(32);
	aorig.set(a);
	add(a,a,minusp);
	var negative = -((a[31] >>> 7) & 1);
	negative &= 0xffffffff;
	for (var j=0; j<32; j+=1) {
		a[j] ^= negative & (aorig[j] ^ a[j]);
	}
	arrFactory.recycle(aorig);
}

/**
 * Analog of mult in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 * @param b is Uint32Array, 32 items long.
 */
function mult(out, a, b) {
	"use strict";
	var u = 0;
	for (var i=0; i<32; i+=1) {
		u = 0;
		for (var j=0; j<=i; j+=1) {
			u += mult32(a[j], b[i - j]);
			u &= 0xffffffff;
		}
		for (var j=i+1; j<32; j+=1) {
			u += 38 * mult32(a[j], b[i + 32 - j]);	// multiplication by 38 is safe here
			u &= 0xffffffff;
		}
		out[i] = u;
	}
	squeeze(out);
}

/**
 * Analog of mult121665 in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 */
function mult121665(out, a) {
	"use strict";
	var u = 0;
	for (var j=0; j<31; j+=1) {
		u += 121665 * a[j];	// safe multiplication, as 17+32=49 bits
		u &= 0xffffffff;
		out[j] = u & 255;
		u >>>= 8;
	}
	u += 121665 * a[31];	// safe multiplication, as 17+32=49 bits
	u &= 0xffffffff;
	out[31] = u & 127;
	u = 19 * (u >>> 7);	// multiplication by 19 is safe here
	u &= 0xffffffff;
	for (var j=0; j<31; j+=1) {
		u += out[j];
		u &= 0xffffffff;
		out[j] = u & 255;
		u >>>= 8;
	}
	u += out[j];
	u &= 0xffffffff;
	out[j] = u;
}

/**
 * Analog of square in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param a is Uint32Array, 32 items long.
 */
function square(out, a) {
	"use strict";
	var u = 0;
	for (var i=0; i<32; i+=1) {
		u = 0;
		for (var j=0; j<(i-j); j+=1) {
			u += mult32(a[j], a[i - j]);
			u &= 0xffffffff;
		}
		for (var j=(i+1); j<(i+32-j); j+=1) {
			u += 38 * mult32(a[j], a[i + 32 - j]);	// multiplication by 38 is safe here
			u &= 0xffffffff;
		}
		u *= 2;
		u &= 0xffffffff;
		if ((i & 1) === 0) {	// this assures i even, so Math.floor() is not needed below 
			u += mult32(a[i/2], a[i/2]);
			u &= 0xffffffff;
			u += 38 * mult32(a[i/2 + 16], a[i/2 + 16]);	// multiplication by 38 is safe here
			u &= 0xffffffff;
		}
		out[i] = u;
	}
	squeeze(out);
}

/**
 * Analog of select in crypto_scalarmult/curve25519/ref/smult.c
 * @param p is Uint32Array, 64 items long.
 * @param q is Uint32Array, 64 items long.
 * @param r is Uint32Array, 64 items long.
 * @param s is Uint32Array, 64 items long.
 * @param b is a number within Uint32 limits.
 */
function select(p, q, r, s, b) {
	"use strict";
	b &= 0xffffffff;
	var t = 0
	, bminus1 = b - 1;
	bminus1 &= 0xffffffff;
	for (var j=0; j<64; j+=1) {
		t = bminus1 & (r[j] ^ s[j]);
		p[j] = s[j] ^ t;
		q[j] = r[j] ^ t;
	}
}

/**
 * Analog of mainloop in crypto_scalarmult/curve25519/ref/smult.c
 * @param work is Uint32Array, 64 items long.
 * @param e is Uint8Array, 32 items long.
 * @param arrFactory is TypedArraysFactory, used to allocated/find an array for use.
 */
function mainloop(work, e, arrFactory) {
	"use strict";
	
	var xzm1 = arrFactory.getUint32Array(64)
	, xzm = arrFactory.getUint32Array(64)
	, xzmb = arrFactory.getUint32Array(64)
	, xzm1b = arrFactory.getUint32Array(64)
	, xznb = arrFactory.getUint32Array(64)
	, xzn1b = arrFactory.getUint32Array(64)
	, a0 = arrFactory.getUint32Array(64)
	, a1 = arrFactory.getUint32Array(64)
	, b0 = arrFactory.getUint32Array(64)
	, b1 = arrFactory.getUint32Array(64)
	, c1 = arrFactory.getUint32Array(64)
	, r = arrFactory.getUint32Array(32)
	, s = arrFactory.getUint32Array(32)
	, t = arrFactory.getUint32Array(32)
	, u = arrFactory.getUint32Array(32)
	, b = 0;

	for (var j=0; j<32; j+=1) { xzm1[j] = work[j]; }
	xzm1[32] = 1;
	for (var j=33; j<64; j+=1) { xzm1[j] = 0; }

	xzm[0] = 1;
	for (var j=1; j<64; j+=1) { xzm[j] = 0; }
	  
	// views of last 32 elements of original arrays
	var xzmb_32 = xzmb.subarray(32, 64)
	, xzm1b_32 = xzm1b.subarray(32, 64)
	, a0_32 = a0.subarray(32, 64)
	, a1_32 = a1.subarray(32, 64)
	, b0_32 = b0.subarray(32, 64)
	, b1_32 = b1.subarray(32, 64)
	, c1_32 = c1.subarray(32, 64)
	, xznb_32 = xznb.subarray(32, 64)
	, xzn1b_32 = xzn1b.subarray(32, 64);

	for (var pos=254; pos>=0; pos-=1) {
		b = e[Math.floor(pos/8)] >>> (pos & 7);
		b &= 1;
		select(xzmb,xzm1b,xzm,xzm1,b);
		add(a0,xzmb,xzmb_32);
		sub(a0_32,xzmb,xzmb_32);
		add(a1,xzm1b,xzm1b_32);
		sub(a1_32,xzm1b,xzm1b_32);
		square(b0,a0);
		square(b0_32,a0_32);
		mult(b1,a1,a0_32);
		mult(b1_32,a1_32,a0);
		add(c1,b1,b1_32);
		sub(c1_32,b1,b1_32);
		square(r,c1_32);
		sub(s,b0,b0_32);
		mult121665(t,s);
		add(u,t,b0);
		mult(xznb,b0,b0_32);
		mult(xznb_32,s,u);
		square(xzn1b,c1);
		mult(xzn1b_32,r,work);
		select(xzm,xzm1,xznb,xzn1b,b);
	}

	work.set(xzm);
	
	arrFactory.recycle(
			xzm1, xzm, xzmb, xzm1b, xznb, xzn1b, a0, a1, b0, b1, c1, r, s, t, u);
}

/**
 * Analog of recip in crypto_scalarmult/curve25519/ref/smult.c
 * @param out is Uint32Array, 32 items long.
 * @param z is Uint32Array, 32 items long.
 * @param arrFactory is TypedArraysFactory, used to allocated/find an array for use.
 */
function recip(out, z, arrFactory) {
	"use strict";
	
	var z2 = arrFactory.getUint32Array(32)
	, z9 = arrFactory.getUint32Array(32)
	, z11 = arrFactory.getUint32Array(32)
	, z2_5_0 = arrFactory.getUint32Array(32)
	, z2_10_0 = arrFactory.getUint32Array(32)
	, z2_20_0 = arrFactory.getUint32Array(32)
	, z2_50_0 = arrFactory.getUint32Array(32)
	, z2_100_0 = arrFactory.getUint32Array(32)
	, t0 = arrFactory.getUint32Array(32)
	, t1 = arrFactory.getUint32Array(32);

	/* 2 */ square(z2,z);
	/* 4 */ square(t1,z2);
	/* 8 */ square(t0,t1);
	/* 9 */ mult(z9,t0,z);
	/* 11 */ mult(z11,z9,z2);
	/* 22 */ square(t0,z11);
	/* 2^5 - 2^0 = 31 */ mult(z2_5_0,t0,z9);

	/* 2^6 - 2^1 */ square(t0,z2_5_0);
	/* 2^7 - 2^2 */ square(t1,t0);
	/* 2^8 - 2^3 */ square(t0,t1);
	/* 2^9 - 2^4 */ square(t1,t0);
	/* 2^10 - 2^5 */ square(t0,t1);
	/* 2^10 - 2^0 */ mult(z2_10_0,t0,z2_5_0);

	/* 2^11 - 2^1 */ square(t0,z2_10_0);
	/* 2^12 - 2^2 */ square(t1,t0);
	/* 2^20 - 2^10 */ for (var i=2; i<10; i+=2) { square(t0,t1); square(t1,t0); }
	/* 2^20 - 2^0 */ mult(z2_20_0,t1,z2_10_0);

	/* 2^21 - 2^1 */ square(t0,z2_20_0);
	/* 2^22 - 2^2 */ square(t1,t0);
	/* 2^40 - 2^20 */ for (var i=2; i<20; i+=2) { square(t0,t1); square(t1,t0); }
	/* 2^40 - 2^0 */ mult(t0,t1,z2_20_0);

	/* 2^41 - 2^1 */ square(t1,t0);
	/* 2^42 - 2^2 */ square(t0,t1);
	/* 2^50 - 2^10 */ for (var i=2; i<10; i+=2) { square(t1,t0); square(t0,t1); }
	/* 2^50 - 2^0 */ mult(z2_50_0,t0,z2_10_0);

	/* 2^51 - 2^1 */ square(t0,z2_50_0);
	/* 2^52 - 2^2 */ square(t1,t0);
	/* 2^100 - 2^50 */ for (var i=2; i<50; i+=2) { square(t0,t1); square(t1,t0); }
	/* 2^100 - 2^0 */ mult(z2_100_0,t1,z2_50_0);

	/* 2^101 - 2^1 */ square(t1,z2_100_0);
	/* 2^102 - 2^2 */ square(t0,t1);
	/* 2^200 - 2^100 */ for (var i=2; i<100; i+=2) { square(t1,t0); square(t0,t1); }
	/* 2^200 - 2^0 */ mult(t1,t0,z2_100_0);

	/* 2^201 - 2^1 */ square(t0,t1);
	/* 2^202 - 2^2 */ square(t1,t0);
	/* 2^250 - 2^50 */ for (var i=2; i<50; i+=2) { square(t0,t1); square(t1,t0); }
	/* 2^250 - 2^0 */ mult(t0,t1,z2_50_0);

	/* 2^251 - 2^1 */ square(t1,t0);
	/* 2^252 - 2^2 */ square(t0,t1);
	/* 2^253 - 2^3 */ square(t1,t0);
	/* 2^254 - 2^4 */ square(t0,t1);
	/* 2^255 - 2^5 */ square(t1,t0);
	/* 2^255 - 21 */ mult(out,t1,z11);
	
	arrFactory.recycle(
			z2, z9, z11, z2_5_0, z2_10_0, z2_20_0, z2_50_0, z2_100_0, t0, t1);
}

/**
 * Analog of crypto_scalarmult in crypto_scalarmult/curve25519/ref/smult.c
 * @param q is Uint8Array, 32 items long.
 * @param n is Uint8Array, 32 items long.
 * @param p is Uint8Array, 32 items long.
 * @param arrFactory is TypedArraysFactory, used to allocated/find an array for use.
 * It may be undefined, in which case an internally created one is used.
 */
function crypto_scalarmult(q, n, p, arrFactory) {
	"use strict";
	
	if (!arrFactory) { arrFactory = new ArraysFactory(); }
	var work = arrFactory.getUint32Array(96)
	, e = arrFactory.getUint32Array(32);

	e.set(n);
	e[0] &= 248;
	e[31] &= 127;
	e[31] |= 64;
	
	// partial views of work array
	var work_32 = work.subarray(32, 64)
	, work_64 = work.subarray(64, 96);

	work.set(p);	// sets first 32 elements, as p.length===32
	
	mainloop(work,e,arrFactory);
	recip(work_32,work_32,arrFactory);
	mult(work_64,work,work_32);
	freeze(work_64,arrFactory);
	q.set(work_64);
	
	arrFactory.recycle(work, e);
}

/**
 * base array in crypto_scalarmult/curve25519/ref/base.c
 */
var base = new Uint8Array(32);
base[0] = 9;

/**
 * Analog of crypto_scalarmult_base in crypto_scalarmult/curve25519/ref/base.c
 * @param q is Uint8Array, 32 items long.
 * @param n is Uint8Array, 32 items long.
 * @param arrFactory is TypedArraysFactory, used to allocated/find an array for use.
 * It may be undefined, in which case an internally created one is used.
 */
function crypto_scalarmult_base(q, n, arrFactory) {
	"use strict";
	crypto_scalarmult(q, n, base, arrFactory);
}

module.exports = {
		curve25519: crypto_scalarmult,
		curve25519_base: crypto_scalarmult_base
};
},{"../util/arrays":204,"../util/int32":205}],203:[function(require,module,exports){
/* Copyright(c) 2013-2014 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This file is an external interface of Ecma-NaCl library.
 */

var sm = require('./boxes/scalarmult'),
box = require('./boxes/box'),
TypedArraysFactory = require('./util/arrays');

/**
 * @param x typed array
 * @param y typed array
 * @returns true, if arrays have the same length and their elements are equal;
 * and false, otherwise.
 */
function compareVectors(x, y) {
	"use strict";
	if (x.length !== y.length) { return false; }
	return verify(x, y, x.length);
}

module.exports = {
		generate_pubkey:box.generate_pubkey,
		curve25519: sm.curve25519,
		curve25519_base: sm.curve25519_base,
		TypedArraysFactory: TypedArraysFactory,
		compareVectors: compareVectors,
		wipeArrays: TypedArraysFactory.prototype.wipe
};
Object.freeze(module.exports);

},{"./boxes/box":201,"./boxes/scalarmult":202,"./util/arrays":204}],204:[function(require,module,exports){
/* Copyright(c) 2013 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This module provide an object pool for typed arrays used in the library.
 * When we turn off reusing, by always making new arrays, time for boxes goes up
 * dramatically (due to arrays needed in stream?).
 */

/**
 * Pool of arrays a particular type, with a particular length.
 * @param numOfElemsInObj
 * @param constructorFunc
 * @returns
 */
function NumericArrPool(numOfElemsInObj, constructorFunc) {
	"use strict";
	this.constructor = constructorFunc;
	this.numOfElemsInObj = numOfElemsInObj;
	this.pool = new Array(16);
	this.poolIndex = -1;
	Object.seal(this);
}

/**
 * This either creates new, or gets a spare array from the pool.
 * Newly created array is not put into pool, because it is given to someone for use.
 * If someone forgets to return it, there shall be no leaking references.
 * @returns TypedArray, created by set constructor, with set number of elements in it.
 * Note that array may and shall have arbitrary data in it, thus, any initialization
 * must be performed explicitly.
 */
NumericArrPool.prototype.get = function() {
	"use strict";
	var arr;
	if (this.poolIndex < 0) {
		arr = new this.constructor(this.numOfElemsInObj);
	} else {
		arr = this.pool[this.poolIndex];
		this.pool[this.poolIndex] = null;
		this.poolIndex -= 1;
	}
	return arr;
};

/**
 * This puts array into the pool, but it does not touch a content of array.
 * @param arr
 */
NumericArrPool.prototype.recycle = function(arr) {
	"use strict";
	this.poolIndex += 1;
	this.pool[this.poolIndex] = arr;
};

function TypedArraysFactory() {
	"use strict";
	this.uint8s = { constructor: Uint8Array };
	this.uint32s = { constructor: Uint32Array };
	Object.freeze(this);
}

function clearPool(p) {
	"use strict";
	for (var fieldName in p) {
		if (fieldName !== "constructor") {
			delete p[fieldName];
		}
	}
}

/**
 * This drops all arrays from pools, letting GC to pick them up,
 * even if reference to this factory is hanging somewhere.
 */
TypedArraysFactory.prototype.clear = function() {
	"use strict";
	clearPool(this.uint8s);
	clearPool(this.uint32s);
};

function get(typedPools, len) {
	"use strict";
	var pool = typedPools[len];
	if (!pool) {
		pool = new NumericArrPool(len, typedPools.constructor);
		typedPools[len] = pool;
	}
	return pool.get();
}

function recycle(typedPools, arr) {
	"use strict";
	var pool = typedPools[arr.length];
	if (!pool) {
		pool = new NumericArrPool(arr.length, typedPools.constructor);
		typedPools[arr.length] = pool;
	}
	pool.recycle(arr);
}

/**
 * This either creates new, or gets a spare array from the pool.
 * Newly created array is not put into pool, because it is given to someone for use.
 * If someone forgets to return it, there shall be no leaking references.
 * @param len is number of elements in desired array.
 * @returns Uint8Array, with given number of elements in it,
 * all set to zero (either by construction, or by auto cleanup of recycled arrays).
 */
TypedArraysFactory.prototype.getUint8Array = function(len) {
	"use strict";
	return get(this.uint8s, len);
};

/**
 * This either creates new, or gets a spare array from the pool.
 * Newly created array is not put into pool, because it is given to someone for use.
 * If someone forgets to return it, there shall be no leaking references.
 * @param len is number of elements in desired array.
 * @returns Uint32Array, with given number of elements in it,
 * all set to zero (either by construction, or by auto cleanup of recycled arrays).
 */
TypedArraysFactory.prototype.getUint32Array = function(len) {
	"use strict";
	return get(this.uint32s, len);
};

/**
 * This puts given arrays into the pool, and zeros all of elements.
 * Use this function for those arrays that shall be reused, due to having common
 * to your application size, and, correspondingly, do not use it on odd size
 * arrays.
 * This function takes any number of unsigned arrays, that need to be recycled.
 * When you need to just wipe an array, or wipe a particular view of an array,
 * use wipe() method.
 */
TypedArraysFactory.prototype.recycle = function() {
	"use strict";
	var arr;
	for (var i=0; i<arguments.length; i+=1) {
		arr = arguments[i];
		if (!arr) continue;
		if ((arr.byteOffset !== 0) ||
				(arr.length*arr.BYTES_PER_ELEMENT !== arr.buffer.byteLength)) {
			throw new TypeError(
					"Given, as argument #"+(i+1)+" is a view of an array, and these are not " +
					"supposed to be recycled.");
		}
		if (arr.BYTES_PER_ELEMENT === 1) {
			recycle(this.uint8s, arr);
		} else if (arr.BYTES_PER_ELEMENT === 4) {
			recycle(this.uint32s, arr);
		} else {
			throw new TypedError(
					"This works with typed arrays that have 1 or 4 bytes per element, "+
					"while given at position "+i+" array claims to have "+arr.BYTES_PER_ELEMENT);
		}
	}
};

/**
 * This zeros all elements of given arrays, or given array views.
 * Use this function on things that needs secure cleanup, but should not be
 * recycled due to their odd and/or huge size, as it makes pooling inefficient.
 */
TypedArraysFactory.prototype.wipe = function() {
	"use strict";
	var arr;
	for (var i=0; i<arguments.length; i+=1) {
		arr = arguments[i];
		if (!arr) continue;
		for (var j=0; j<arr.length; j+=1) { arr[j] = 0; }
	}
};

function wipePool(p) {
	"use strict";
	var poolArr, uintArr;
	for (var fieldName in p) {
		if (fieldName === "constructor") { continue; }
		poolArr = p[fieldName].pool;
		for (var i=0; i<= poolArr.length; i+=1) {
			uintArr = poolArr[i];
			if (!uintArr) { continue; }
			for (var j=0; j<uintArr.length; j+=1) {
				uintArr[j] = 0;
			}
		}
	}
}

/**
 * This wipes (sets to zeros) all arrays that are located in pools
 */
TypedArraysFactory.prototype.wipeRecycled = function() {
	"use strict";
	wipePool(this.uint8s);
	wipePool(this.uint32s);
};

Object.freeze(TypedArraysFactory);
Object.freeze(TypedArraysFactory.prototype);

module.exports = TypedArraysFactory;

},{}],205:[function(require,module,exports){
/* Copyright(c) 2013 3NSoft Inc.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This module provides multiplication, modulo 32 bits, of uint32s.
 * All number operations in javascript are done in float64.
 * Therefore, there are fifty something bits for exact multiplication, and if those
 * overflow, lower bits are dropped, like in everyday calculation, while it is higher
 * bits are dropped in modulo operations.
 * This allows addition and subtraction of uint32's, performing occasional & with 0xffffffff.
 * But, for example, multiplication of two numbers with 30 bits gives more bits,
 * which will be truncated from the wrong, for our purposes, side.
 * And here we provide proper modulo 32 bits multiplication.
 */

/**
 * @param a is number, assumed to be within uint32 limits.
 * @param b is number, assumed to be within uint32 limits.
 * @returns number, which is a result of multiplication modulo 32 bits.
 */
function mult(a,b) {
	"use strict";
	var r = a*(b >>> 16);
	r &= 0xffffffff;
	r *= 0x10000;
	r &= 0xffffffff;
	r += a*(b & 0xffff);
	r &= 0xffffffff;
	return r;
}

/**
 * @param a is number, forced to uint32 limits.
 * @param b is number, forced to uint32 limits.
 * @returns number, which is a result of multiplication modulo 32 bits.
 */
function multChecked(a,b) {
	"use strict";
	a &= 0xffffffff;
	b &= 0xffffffff;
	var r = a*(b >>> 16);
	r &= 0xffffffff;
	r *= 0x10000;
	r &= 0xffffffff;
	r += a*(b & 0xffff);
	r &= 0xffffffff;
	return r;
}

module.exports = {
		mult: mult,
		multChecked: multChecked
};
},{}],206:[function(require,module,exports){
var _global = (function() { return this; })();
var nativeWebSocket = _global.WebSocket || _global.MozWebSocket;


/**
 * Expose a W3C WebSocket class with just one or two arguments.
 */
function W3CWebSocket(uri, protocols) {
	var native_instance;

	if (protocols) {
		native_instance = new nativeWebSocket(uri, protocols);
	}
	else {
		native_instance = new nativeWebSocket(uri);
	}

	/**
	 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
	 * class). Since it is an Object it will be returned as it is when creating an
	 * instance of W3CWebSocket via 'new W3CWebSocket()'.
	 *
	 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
	 */
	return native_instance;
}


/**
 * Module exports.
 */
module.exports = {
    'w3cwebsocket' : nativeWebSocket ? W3CWebSocket : null,
    'version'      : require('./version')
};

},{"./version":207}],207:[function(require,module,exports){
module.exports = require('../package.json').version;

},{"../package.json":208}],208:[function(require,module,exports){
module.exports={
  "name": "websocket",
  "description": "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
  "keywords": [
    "websocket",
    "websockets",
    "socket",
    "networking",
    "comet",
    "push",
    "RFC-6455",
    "realtime",
    "server",
    "client"
  ],
  "author": {
    "name": "Brian McKelvey",
    "email": "brian@worlize.com",
    "url": "https://www.worlize.com/"
  },
  "version": "1.0.19",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/theturtle32/WebSocket-Node.git"
  },
  "homepage": "https://github.com/theturtle32/WebSocket-Node",
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "debug": "~2.1.0",
    "nan": "1.8.x",
    "typedarray-to-buffer": "~3.0.0"
  },
  "devDependencies": {
    "buffer-equal": "0.0.1",
    "faucet": "0.0.1",
    "gulp": "git+https://github.com/gulpjs/gulp.git#4.0",
    "gulp-jshint": "^1.9.0",
    "jshint-stylish": "^1.0.0",
    "tape": "^3.0.0"
  },
  "config": {
    "verbose": false
  },
  "scripts": {
    "install": "(node-gyp rebuild 2> builderror.log) || (exit 0)",
    "test": "faucet test/unit",
    "gulp": "gulp"
  },
  "main": "index",
  "directories": {
    "lib": "./lib"
  },
  "browser": "lib/browser.js",
  "license": "Apache-2.0",
  "gitHead": "da3bd5b04e9442c84881b2e9c13432cdbbae1f16",
  "bugs": {
    "url": "https://github.com/theturtle32/WebSocket-Node/issues"
  },
  "_id": "websocket@1.0.19",
  "_shasum": "e62dbf1a3c5e0767425db7187cfa38f921dfb42c",
  "_from": "websocket@>=1.0.14",
  "_npmVersion": "2.10.1",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "name": "theturtle32",
    "email": "brian@worlize.com"
  },
  "maintainers": [
    {
      "name": "theturtle32",
      "email": "brian@worlize.com"
    }
  ],
  "dist": {
    "shasum": "e62dbf1a3c5e0767425db7187cfa38f921dfb42c",
    "tarball": "http://registry.npmjs.org/websocket/-/websocket-1.0.19.tgz"
  },
  "_resolved": "https://registry.npmjs.org/websocket/-/websocket-1.0.19.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],"omclient":[function(require,module,exports){
(function (Buffer){
var proto = require('./ldproto'),
client = require('./client'),
crypto = require('crypto'),
ourcrypto = require('./crypto'),
assert = require('assert');

module.exports = {
    assert: assert,
    proto: proto,
    client: client,
    Buffer: Buffer,
    createNonce: ourcrypto.createNonce,
    createPrivateKey: ourcrypto.createPrivateKey,
    generatePublicKey: ourcrypto.generatePublicKey,
    computeShared: ourcrypto.computeShared,
    createSHA256: ourcrypto.createSHA256,
    createMD5: ourcrypto.createMD5,
};
Object.freeze(module.exports);
}).call(this,require("buffer").Buffer)
},{"./client":1,"./crypto":21,"./ldproto":22,"assert":24,"buffer":26,"crypto":30}]},{},[]);
